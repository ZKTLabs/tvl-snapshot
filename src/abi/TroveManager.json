{
  "address": "0xE06F4754e94E2b6A462E616Ca3Ec78c6f4674A61",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_activePoolAddress",
          "type": "address"
        }
      ],
      "name": "ActivePoolAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_baseRate",
          "type": "uint256"
        }
      ],
      "name": "BaseRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newBorrowerOperationsAddress",
          "type": "address"
        }
      ],
      "name": "BorrowerOperationsAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_collSurplusPoolAddress",
          "type": "address"
        }
      ],
      "name": "CollSurplusPoolAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "controller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "ControllerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_defaultPoolAddress",
          "type": "address"
        }
      ],
      "name": "DefaultPoolAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_gasPoolAddress",
          "type": "address"
        }
      ],
      "name": "GasPoolAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_L_Native",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_L_Debt",
          "type": "uint256"
        }
      ],
      "name": "LTermsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_lastFeeOpTime",
          "type": "uint256"
        }
      ],
      "name": "LastFeeOpTimeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_liquidatedDebt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_liquidatedColl",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_collGasCompensation",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_ZKUSDGasCompensation",
          "type": "uint256"
        }
      ],
      "name": "Liquidation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newPriceFeedAddress",
          "type": "address"
        }
      ],
      "name": "PriceFeedAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_attemptedZKUSDAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_actualZKUSDAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_ETHSent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_ETHFee",
          "type": "uint256"
        }
      ],
      "name": "Redemption",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_sortedTrovesAddress",
          "type": "address"
        }
      ],
      "name": "SortedTrovesAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_stabilityPoolAddress",
          "type": "address"
        }
      ],
      "name": "StabilityPoolAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_totalStakesSnapshot",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_totalCollateralSnapshot",
          "type": "uint256"
        }
      ],
      "name": "SystemSnapshotsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newTotalStakes",
          "type": "uint256"
        }
      ],
      "name": "TotalStakesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newIndex",
          "type": "uint256"
        }
      ],
      "name": "TroveIndexUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_debt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_coll",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum TroveManager.TroveManagerOperation",
          "name": "_operation",
          "type": "uint8"
        }
      ],
      "name": "TroveLiquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_L_Native",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_L_Debt",
          "type": "uint256"
        }
      ],
      "name": "TroveSnapshotsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_debt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_coll",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_stake",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum TroveManager.TroveManagerOperation",
          "name": "_operation",
          "type": "uint8"
        }
      ],
      "name": "TroveUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_zktStakingAddress",
          "type": "address"
        }
      ],
      "name": "ZKTStakingAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_zkTokenAddress",
          "type": "address"
        }
      ],
      "name": "ZKTokenAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newZKUSDTokenAddress",
          "type": "address"
        }
      ],
      "name": "ZKUSDTokenAddressChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BETA",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BOOTSTRAP_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BORROWING_FEE_FLOOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CCR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DECIMAL_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "L_ETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "L_ZKUSDDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_BORROWING_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MCR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINUTE_DECAY_FACTOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_NET_DEBT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENT_DIVISOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REDEMPTION_FEE_FLOOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SECONDS_IN_ONE_MINUTE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "TroveOwners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "Troves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "debt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "coll",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stake",
          "type": "uint256"
        },
        {
          "internalType": "enum TroveManager.Status",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "uint128",
          "name": "arrayIndex",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ZKUSD_GAS_COMPENSATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_100pct",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activePool",
      "outputs": [
        {
          "internalType": "contract IActivePool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "addTroveOwnerToArray",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "applyPendingRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_troveArray",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_updateData",
          "type": "bytes[]"
        }
      ],
      "name": "batchLiquidateTroves",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowerOperationsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "checkRecoveryMode",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "closeTrove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "controllers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decayBaseRateFromBorrowing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_collDecrease",
          "type": "uint256"
        }
      ],
      "name": "decreaseTroveColl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_debtDecrease",
          "type": "uint256"
        }
      ],
      "name": "decreaseTroveDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultPool",
      "outputs": [
        {
          "internalType": "contract IDefaultPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ZKUSDDebt",
          "type": "uint256"
        }
      ],
      "name": "getBorrowingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ZKUSDDebt",
          "type": "uint256"
        }
      ],
      "name": "getBorrowingFeeWithDecay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBorrowingRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBorrowingRateWithDecay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "getCurrentICR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getEntireDebtAndColl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "debt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "coll",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingZKUSDDebtReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingETHReward",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntireSystemColl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "entireSystemColl",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntireSystemDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "entireSystemDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getNominalICR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getPendingETHReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getPendingZKUSDDebtReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ETHDrawn",
          "type": "uint256"
        }
      ],
      "name": "getRedemptionFeeWithDecay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRedemptionRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRedemptionRateWithDecay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "getTCR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getTroveColl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getTroveDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getTroveFromTroveOwnersArray",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTroveOwnersCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getTroveStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getTroveStatus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "hasPendingRewards",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_collIncrease",
          "type": "uint256"
        }
      ],
      "name": "increaseTroveColl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_debtIncrease",
          "type": "uint256"
        }
      ],
      "name": "increaseTroveDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastETHError_Redistribution",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastFeeOperationTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastZKUSDDebtError_Redistribution",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "bytes[]",
          "name": "_updateData",
          "type": "bytes[]"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_n",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "_updateData",
          "type": "bytes[]"
        }
      ],
      "name": "liquidateTroves",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract IPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ZKUSDamount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_firstRedemptionHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_upperPartialRedemptionHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lowerPartialRedemptionHint",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_partialRedemptionHintNICR",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxIterations",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxFeePercentage",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "_updateData",
          "type": "bytes[]"
        }
      ],
      "name": "redeemCollateral",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "removeStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardSnapshots",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ETH",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ZKUSDDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrowerOperationsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_activePoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_defaultPoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stabilityPoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gasPoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collSurplusPoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceFeedAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_zkusdTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sortedTrovesAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_zkTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_zktStakingAddress",
          "type": "address"
        }
      ],
      "name": "setAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "controller",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gasCompensation",
          "type": "uint256"
        }
      ],
      "name": "setGasCompensation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minNetDebt",
          "type": "uint256"
        }
      ],
      "name": "setMinNetDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_num",
          "type": "uint256"
        }
      ],
      "name": "setTroveStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sortedTroves",
      "outputs": [
        {
          "internalType": "contract ISortedTroves",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stabilityPool",
      "outputs": [
        {
          "internalType": "contract IStabilityPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalCollateralSnapshot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStakes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStakesSnapshot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "updateStakeAndTotalStakes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "updateTroveRewardSnapshots",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zkToken",
      "outputs": [
        {
          "internalType": "contract IZKToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zktStaking",
      "outputs": [
        {
          "internalType": "contract IZKTStaking",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zkusdToken",
      "outputs": [
        {
          "internalType": "contract IZKUSDToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0dd064b11a819d902eddf3a5e2e689914151db5a372f2ea2686d3dbd4ddd65d6",
  "receipt": {
    "to": null,
    "from": "0x88762203C68C8B0b2dD4855AcA764b225e1b1E2E",
    "contractAddress": "0xE06F4754e94E2b6A462E616Ca3Ec78c6f4674A61",
    "transactionIndex": 30,
    "gasUsed": "5396331",
    "logsBloom": "0x
    "blockHash": "0x9262de73a68421ad8cdced8ed3bc287b4856be7b777322b51666674645a6fb62",
    "transactionHash": "0x0dd064b11a819d902eddf3a5e2e689914151db5a372f2ea2686d3dbd4ddd65d6",
    "logs": [
      {
        "transactionIndex": 30,
        "blockNumber": 861760,
        "transactionHash": "0x0dd064b11a819d902eddf3a5e2e689914151db5a372f2ea2686d3dbd4ddd65d6",
        "address": "0xE06F4754e94E2b6A462E616Ca3Ec78c6f4674A61",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000088762203c68c8b0b2dd4855aca764b225e1b1e2e"
        ],
        "data": "0x",
        "logIndex": 94,
        "blockHash": "0x9262de73a68421ad8cdced8ed3bc287b4856be7b777322b51666674645a6fb62"
      }
    ],
    "blockNumber": 861760,
    "cumulativeGasUsed": "9553504",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ffe83ff5afde0d06d4b6b8e37e72100d",
  "metadata": "{\"compiler\":{\"version\":\"0.6.11+commit.5ef660b1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_activePoolAddress\",\"type\":\"address\"}],\"name\":\"ActivePoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_baseRate\",\"type\":\"uint256\"}],\"name\":\"BaseRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newBorrowerOperationsAddress\",\"type\":\"address\"}],\"name\":\"BorrowerOperationsAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_collSurplusPoolAddress\",\"type\":\"address\"}],\"name\":\"CollSurplusPoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"ControllerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_defaultPoolAddress\",\"type\":\"address\"}],\"name\":\"DefaultPoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_gasPoolAddress\",\"type\":\"address\"}],\"name\":\"GasPoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_L_Native\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_L_Debt\",\"type\":\"uint256\"}],\"name\":\"LTermsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lastFeeOpTime\",\"type\":\"uint256\"}],\"name\":\"LastFeeOpTimeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_liquidatedDebt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_liquidatedColl\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_collGasCompensation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_ZKUSDGasCompensation\",\"type\":\"uint256\"}],\"name\":\"Liquidation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newPriceFeedAddress\",\"type\":\"address\"}],\"name\":\"PriceFeedAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_attemptedZKUSDAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_actualZKUSDAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_ETHSent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_ETHFee\",\"type\":\"uint256\"}],\"name\":\"Redemption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sortedTrovesAddress\",\"type\":\"address\"}],\"name\":\"SortedTrovesAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_stabilityPoolAddress\",\"type\":\"address\"}],\"name\":\"StabilityPoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalStakesSnapshot\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalCollateralSnapshot\",\"type\":\"uint256\"}],\"name\":\"SystemSnapshotsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newTotalStakes\",\"type\":\"uint256\"}],\"name\":\"TotalStakesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newIndex\",\"type\":\"uint256\"}],\"name\":\"TroveIndexUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_debt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_coll\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum TroveManager.TroveManagerOperation\",\"name\":\"_operation\",\"type\":\"uint8\"}],\"name\":\"TroveLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_L_Native\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_L_Debt\",\"type\":\"uint256\"}],\"name\":\"TroveSnapshotsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_debt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_coll\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_stake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum TroveManager.TroveManagerOperation\",\"name\":\"_operation\",\"type\":\"uint8\"}],\"name\":\"TroveUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_zktStakingAddress\",\"type\":\"address\"}],\"name\":\"ZKTStakingAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_zkTokenAddress\",\"type\":\"address\"}],\"name\":\"ZKTokenAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newZKUSDTokenAddress\",\"type\":\"address\"}],\"name\":\"ZKUSDTokenAddressChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BETA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BOOTSTRAP_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BORROWING_FEE_FLOOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DECIMAL_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"L_ETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"L_ZKUSDDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BORROWING_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINUTE_DECAY_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_NET_DEBT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REDEMPTION_FEE_FLOOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECONDS_IN_ONE_MINUTE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TroveOwners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Troves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coll\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"enum TroveManager.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"arrayIndex\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZKUSD_GAS_COMPENSATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_100pct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activePool\",\"outputs\":[{\"internalType\":\"contract IActivePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"addTroveOwnerToArray\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"applyPendingRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_troveArray\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_updateData\",\"type\":\"bytes[]\"}],\"name\":\"batchLiquidateTroves\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowerOperationsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"checkRecoveryMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"closeTrove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decayBaseRateFromBorrowing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collDecrease\",\"type\":\"uint256\"}],\"name\":\"decreaseTroveColl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_debtDecrease\",\"type\":\"uint256\"}],\"name\":\"decreaseTroveDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultPool\",\"outputs\":[{\"internalType\":\"contract IDefaultPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ZKUSDDebt\",\"type\":\"uint256\"}],\"name\":\"getBorrowingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ZKUSDDebt\",\"type\":\"uint256\"}],\"name\":\"getBorrowingFeeWithDecay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBorrowingRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBorrowingRateWithDecay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"getCurrentICR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getEntireDebtAndColl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coll\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingZKUSDDebtReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingETHReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntireSystemColl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"entireSystemColl\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntireSystemDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"entireSystemDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getNominalICR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getPendingETHReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getPendingZKUSDDebtReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ETHDrawn\",\"type\":\"uint256\"}],\"name\":\"getRedemptionFeeWithDecay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRedemptionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRedemptionRateWithDecay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"getTCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getTroveColl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getTroveDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getTroveFromTroveOwnersArray\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTroveOwnersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getTroveStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getTroveStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"hasPendingRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collIncrease\",\"type\":\"uint256\"}],\"name\":\"increaseTroveColl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_debtIncrease\",\"type\":\"uint256\"}],\"name\":\"increaseTroveDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastETHError_Redistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastFeeOperationTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastZKUSDDebtError_Redistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"_updateData\",\"type\":\"bytes[]\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_n\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"_updateData\",\"type\":\"bytes[]\"}],\"name\":\"liquidateTroves\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ZKUSDamount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_firstRedemptionHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_upperPartialRedemptionHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerPartialRedemptionHint\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_partialRedemptionHintNICR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxIterations\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"_updateData\",\"type\":\"bytes[]\"}],\"name\":\"redeemCollateral\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"removeStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardSnapshots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ZKUSDDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrowerOperationsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_activePoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_defaultPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stabilityPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gasPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collSurplusPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeedAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zkusdTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sortedTrovesAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zkTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zktStakingAddress\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gasCompensation\",\"type\":\"uint256\"}],\"name\":\"setGasCompensation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minNetDebt\",\"type\":\"uint256\"}],\"name\":\"setMinNetDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"setTroveStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sortedTroves\",\"outputs\":[{\"internalType\":\"contract ISortedTroves\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stabilityPool\",\"outputs\":[{\"internalType\":\"contract IStabilityPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCollateralSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakesSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"updateStakeAndTotalStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"updateTroveRewardSnapshots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zkToken\",\"outputs\":[{\"internalType\":\"contract IZKToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zktStaking\",\"outputs\":[{\"internalType\":\"contract IZKTStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zkusdToken\",\"outputs\":[{\"internalType\":\"contract IZKUSDToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TroveManager.sol\":\"TroveManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":50},\"remappings\":[]},\"sources\":{\"contracts/Dependencies/BaseMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.11;\\n\\ncontract BaseMath {\\n    uint public constant DECIMAL_PRECISION = 1e18;\\n}\\n\",\"keccak256\":\"0xedb38df2955774c113e04392c6188ee3e1d3e2814db5bd0a32a76d0a70a54b72\",\"license\":\"MIT\"},\"contracts/Dependencies/CheckContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\ncontract CheckContract {\\n    /**\\n     * Check that the account is an already deployed non-destroyed contract.\\n     * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol#L12\\n     */\\n    function checkContract(address _account) internal view {\\n        require(_account != address(0), \\\"Account cannot be zero address\\\");\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(_account)\\n        }\\n        require(size > 0, \\\"Account code size cannot be zero\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x5cb0f0f94c7c5b8ca01b92ae6448066d13dce5d054e97f1e5a99b5e8bec7cf86\",\"license\":\"MIT\"},\"contracts/Dependencies/Controllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\ncontract Controllable is Ownable {\\n    mapping(address => bool) public controllers;\\n\\n    event ControllerChanged(address indexed controller, bool enabled);\\n\\n    modifier onlyController() {\\n        require(\\n            controllers[msg.sender],\\n            \\\"Controllable: Caller is not a controller\\\"\\n        );\\n        _;\\n    }\\n\\n    function setController(address controller, bool enabled) public onlyOwner {\\n        controllers[controller] = enabled;\\n        emit ControllerChanged(controller, enabled);\\n    }\\n}\\n\",\"keccak256\":\"0x4c068a36fad13b6a89e293a592cc0aab572cb358f65ad2b47f6eafba83c80e36\",\"license\":\"MIT\"},\"contracts/Dependencies/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\n/**\\n * Based on the OpenZeppelin IER20 interface:\\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\\n *\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    function increaseAllowance(\\n        address spender,\\n        uint256 addedValue\\n    ) external returns (bool);\\n\\n    function decreaseAllowance(\\n        address spender,\\n        uint256 subtractedValue\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0x3e47d40e3564300383968dec19ae471645a52766b43b2bd28cd5ec8eaa051d45\",\"license\":\"MIT\"},\"contracts/Dependencies/IERC2612.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\n/**\\n * @dev Interface of the ERC2612 standard as defined in the EIP.\\n *\\n * Adds the {permit} method, which can be used to change one's\\n * {IERC20-allowance} without having to send a transaction, by signing a\\n * message. This allows users to spend tokens without having to hold Ether.\\n *\\n * See https://eips.ethereum.org/EIPS/eip-2612.\\n *\\n * Code adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2237/\\n */\\ninterface IERC2612 {\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over `owner`'s tokens,\\n     * given `owner`'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current ERC2612 nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases `owner`'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     *\\n     * `owner` can limit the time a Permit is valid for by setting `deadline` to\\n     * a value in the near future. The deadline argument can be set to uint(-1) to\\n     * create Permits that effectively never expire.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function version() external view returns (string memory);\\n\\n    function permitTypeHash() external view returns (bytes32);\\n\\n    function domainSeparator() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb4822b28b9d205de5eb2d58a8a0690f314cabf67f3ff55d5a87bbf8ba721f79f\",\"license\":\"MIT\"},\"contracts/Dependencies/LiquityBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\nimport \\\"./BaseMath.sol\\\";\\nimport \\\"./LiquityMath.sol\\\";\\nimport \\\"../Interfaces/IActivePool.sol\\\";\\nimport \\\"../Interfaces/IDefaultPool.sol\\\";\\nimport \\\"../Interfaces/IPriceFeed.sol\\\";\\nimport \\\"../Interfaces/ILiquityBase.sol\\\";\\nimport \\\"./Controllable.sol\\\";\\n\\n/*\\n * Base contract for TroveManager, BorrowerOperations and StabilityPool. Contains global system constants and\\n * common functions.\\n */\\ncontract LiquityBase is BaseMath, ILiquityBase, Controllable {\\n    using SafeMath for uint;\\n\\n    uint public constant _100pct = 1000000000000000000; // 1e18 == 100%\\n\\n    // Minimum collateral ratio for individual troves\\n    uint public constant MCR = 1100000000000000000; // 110%\\n\\n    // Critical system collateral ratio. If the system's total collateral ratio (TCR) falls below the CCR, Recovery Mode is triggered.\\n    uint public constant CCR = 1500000000000000000; // 150%\\n\\n    // Amount of ZKUSD to be locked in gas pool on opening troves\\n    // adjust when need to close last trove\\n    uint public ZKUSD_GAS_COMPENSATION = 50e18;\\n\\n    // Minimum amount of net ZKUSD debt a trove must have\\n    // adjust when need to close last trove\\n    uint public MIN_NET_DEBT = 450e18;\\n    // uint constant public MIN_NET_DEBT = 0;\\n\\n    uint public constant PERCENT_DIVISOR = 200; // dividing by 200 yields 0.5%\\n\\n    uint public constant BORROWING_FEE_FLOOR = (DECIMAL_PRECISION / 1000) * 5; // 0.5%\\n\\n    IActivePool public activePool;\\n\\n    IDefaultPool public defaultPool;\\n\\n    IPriceFeed public override priceFeed;\\n\\n    function setMinNetDebt(uint _minNetDebt) external onlyController {\\n        MIN_NET_DEBT = _minNetDebt;\\n    }\\n\\n    function setGasCompensation(uint _gasCompensation) external onlyController {\\n        ZKUSD_GAS_COMPENSATION = _gasCompensation;\\n    }\\n\\n    // --- Gas compensation functions ---\\n\\n    // Returns the composite debt (drawn debt + gas compensation) of a trove, for the purpose of ICR calculation\\n    function _getCompositeDebt(uint _debt) internal view returns (uint) {\\n        return _debt.add(ZKUSD_GAS_COMPENSATION);\\n    }\\n\\n    function _getNetDebt(uint _debt) internal view returns (uint) {\\n        return _debt.sub(ZKUSD_GAS_COMPENSATION);\\n    }\\n\\n    // Return the amount of ETH to be drawn from a trove's collateral and sent as gas compensation.\\n    function _getCollGasCompensation(\\n        uint _entireColl\\n    ) internal pure returns (uint) {\\n        return _entireColl / PERCENT_DIVISOR;\\n    }\\n\\n    function getEntireSystemColl() public view returns (uint entireSystemColl) {\\n        uint activeColl = activePool.getETH();\\n        uint liquidatedColl = defaultPool.getETH();\\n\\n        return activeColl.add(liquidatedColl);\\n    }\\n\\n    function getEntireSystemDebt() public view returns (uint entireSystemDebt) {\\n        uint activeDebt = activePool.getZKUSDDebt();\\n        uint closedDebt = defaultPool.getZKUSDDebt();\\n\\n        return activeDebt.add(closedDebt);\\n    }\\n\\n    function _getTCR(uint _price) internal view returns (uint TCR) {\\n        uint entireSystemColl = getEntireSystemColl();\\n        uint entireSystemDebt = getEntireSystemDebt();\\n\\n        TCR = LiquityMath._computeCR(\\n            entireSystemColl,\\n            entireSystemDebt,\\n            _price\\n        );\\n\\n        return TCR;\\n    }\\n\\n    function _checkRecoveryMode(uint _price) internal view returns (bool) {\\n        uint TCR = _getTCR(_price);\\n\\n        return TCR < CCR;\\n    }\\n\\n    function _requireUserAcceptsFee(\\n        uint _fee,\\n        uint _amount,\\n        uint _maxFeePercentage\\n    ) internal pure {\\n        uint feePercentage = _fee.mul(DECIMAL_PRECISION).div(_amount);\\n        require(\\n            feePercentage <= _maxFeePercentage,\\n            \\\"Fee exceeded provided maximum\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x26dbc8dc5a14e92240c7ed1b33d0684e89a2846efb69db176c8f838e1e6d13b5\",\"license\":\"MIT\"},\"contracts/Dependencies/LiquityMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./console.sol\\\";\\n\\nlibrary LiquityMath {\\n    using SafeMath for uint;\\n\\n    uint internal constant DECIMAL_PRECISION = 1e18;\\n\\n    /* Precision for Nominal ICR (independent of price). Rationale for the value:\\n     *\\n     * - Making it \\u201ctoo high\\u201d could lead to overflows.\\n     * - Making it \\u201ctoo low\\u201d could lead to an ICR equal to zero, due to truncation from Solidity floor division.\\n     *\\n     * This value of 1e20 is chosen for safety: the NICR will only overflow for numerator > ~1e39 ETH,\\n     * and will only truncate to 0 if the denominator is at least 1e20 times greater than the numerator.\\n     *\\n     */\\n    uint internal constant NICR_PRECISION = 1e20;\\n\\n    function _min(uint _a, uint _b) internal pure returns (uint) {\\n        return (_a < _b) ? _a : _b;\\n    }\\n\\n    function _max(uint _a, uint _b) internal pure returns (uint) {\\n        return (_a >= _b) ? _a : _b;\\n    }\\n\\n    /*\\n     * Multiply two decimal numbers and use normal rounding rules:\\n     * -round product up if 19'th mantissa digit >= 5\\n     * -round product down if 19'th mantissa digit < 5\\n     *\\n     * Used only inside the exponentiation, _decPow().\\n     */\\n    function decMul(uint x, uint y) internal pure returns (uint decProd) {\\n        uint prod_xy = x.mul(y);\\n\\n        decProd = prod_xy.add(DECIMAL_PRECISION / 2).div(DECIMAL_PRECISION);\\n    }\\n\\n    /*\\n     * _decPow: Exponentiation function for 18-digit decimal base, and integer exponent n.\\n     *\\n     * Uses the efficient \\\"exponentiation by squaring\\\" algorithm. O(log(n)) complexity.\\n     *\\n     * Called by two functions that represent time in units of minutes:\\n     * 1) TroveManager._calcDecayedBaseRate\\n     * 2) CommunityIssuance._getCumulativeIssuanceFraction\\n     *\\n     * The exponent is capped to avoid reverting due to overflow. The cap 525600000 equals\\n     * \\\"minutes in 1000 years\\\": 60 * 24 * 365 * 1000\\n     *\\n     * If a period of > 1000 years is ever used as an exponent in either of the above functions, the result will be\\n     * negligibly different from just passing the cap, since:\\n     *\\n     * In function 1), the decayed base rate will be 0 for 1000 years or > 1000 years\\n     * In function 2), the difference in tokens issued at 1000 years and any time > 1000 years, will be negligible\\n     */\\n    function _decPow(uint _base, uint _minutes) internal pure returns (uint) {\\n        if (_minutes > 525600000) {\\n            _minutes = 525600000;\\n        } // cap to avoid overflow\\n\\n        if (_minutes == 0) {\\n            return DECIMAL_PRECISION;\\n        }\\n\\n        uint y = DECIMAL_PRECISION;\\n        uint x = _base;\\n        uint n = _minutes;\\n\\n        // Exponentiation-by-squaring\\n        while (n > 1) {\\n            if (n % 2 == 0) {\\n                x = decMul(x, x);\\n                n = n.div(2);\\n            } else {\\n                // if (n % 2 != 0)\\n                y = decMul(x, y);\\n                x = decMul(x, x);\\n                n = (n.sub(1)).div(2);\\n            }\\n        }\\n\\n        return decMul(x, y);\\n    }\\n\\n    function _getAbsoluteDifference(\\n        uint _a,\\n        uint _b\\n    ) internal pure returns (uint) {\\n        return (_a >= _b) ? _a.sub(_b) : _b.sub(_a);\\n    }\\n\\n    function _computeNominalCR(\\n        uint _coll,\\n        uint _debt\\n    ) internal pure returns (uint) {\\n        if (_debt > 0) {\\n            return _coll.mul(NICR_PRECISION).div(_debt);\\n        }\\n        // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n        else {\\n            // if (_debt == 0)\\n            return 2 ** 256 - 1;\\n        }\\n    }\\n\\n    function _computeCR(\\n        uint _coll,\\n        uint _debt,\\n        uint _price\\n    ) internal pure returns (uint) {\\n        if (_debt > 0) {\\n            uint newCollRatio = _coll.mul(_price).div(_debt);\\n\\n            return newCollRatio;\\n        }\\n        // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n        else {\\n            // if (_debt == 0)\\n            return 2 ** 256 - 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeb122176b1348d2617ed7bf7c3b962a664841b9d8b75a52e23601661ed651c1f\",\"license\":\"MIT\"},\"contracts/Dependencies/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\n/**\\n * Based on OpenZeppelin's Ownable contract:\\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\\n *\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() internal {\\n        _owner = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return msg.sender == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     *\\n     * NOTE: This function is not safe, as it doesn\\u2019t check owner is calling it.\\n     * Make sure you check it before calling it.\\n     */\\n    function _renounceOwnership() internal {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n}\\n\",\"keccak256\":\"0xde881d9dc03f7c4fdef3bd8e22288ada00f87dccd8071d927cbd1078452b265b\",\"license\":\"MIT\"},\"contracts/Dependencies/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\n/**\\n * Based on OpenZeppelin's SafeMath:\\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/SafeMath.sol\\n *\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x1bca79004f4eae2412520cd8dffddd575e28a5f1e73240011fe41c1b38938263\",\"license\":\"MIT\"},\"contracts/Dependencies/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\n// Buidler's helper contract for console logging\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n    function log() internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log()\\\")\\n        );\\n        ignored;\\n    }\\n\\n    function logInt(int p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(int)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logUint(uint p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logString(string memory p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBool(bool p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logAddress(address p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes(bytes memory p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logByte(bytes1 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(byte)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes1(bytes1 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes1)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes2(bytes2 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes2)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes3(bytes3 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes3)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes4(bytes4 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes4)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes5(bytes5 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes5)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes6(bytes6 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes6)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes7(bytes7 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes7)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes8(bytes8 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes8)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes9(bytes9 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes9)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes10(bytes10 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes10)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes11(bytes11 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes11)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes12(bytes12 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes12)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes13(bytes13 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes13)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes14(bytes14 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes14)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes15(bytes15 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes15)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes16(bytes16 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes16)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes17(bytes17 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes17)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes18(bytes18 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes18)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes19(bytes19 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes19)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes20(bytes20 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes20)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes21(bytes21 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes21)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes22(bytes22 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes22)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes23(bytes23 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes23)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes24(bytes24 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes24)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes25(bytes25 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes25)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes26(bytes26 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes26)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes27(bytes27 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes27)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes28(bytes28 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes28)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes29(bytes29 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes29)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes30(bytes30 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes30)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes31(bytes31 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes31)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes32(bytes32 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes32)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, string memory p1) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, uint p1) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, string memory p1) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, bool p1) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, address p1) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, string memory p1) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, string memory p1) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, address p1) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, uint p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, bool p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, address p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, string memory p1, address p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, uint p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, bool p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, address p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, uint p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, string memory p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, bool p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, address p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, uint p1, address p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, address p1, uint p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, uint p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, bool p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, address p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, uint p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, uint p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, uint p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, string memory p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, bool p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, address p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, string memory p1, uint p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, uint p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, address p1, uint p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, address p1, address p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        uint p0,\\n        uint p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, address p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, address p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, address p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, address p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        uint p0,\\n        string memory p1,\\n        uint p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        uint p0,\\n        string memory p1,\\n        string memory p2,\\n        uint p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        uint p0,\\n        string memory p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        uint p0,\\n        string memory p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        uint p0,\\n        string memory p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        uint p0,\\n        string memory p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, string memory p1, address p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        uint p0,\\n        string memory p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, string memory p1, address p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        uint p0,\\n        string memory p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        uint p0,\\n        bool p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, address p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, address p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, address p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, address p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, uint p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, uint p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, uint p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, uint p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, string memory p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        uint p0,\\n        address p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, string memory p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        uint p0,\\n        address p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, bool p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, bool p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, bool p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, bool p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, address p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        uint p0,\\n        address p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, address p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, address p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint p1,\\n        uint p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint p1,\\n        string memory p2,\\n        uint p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, uint p1, address p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, uint p1, address p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        uint p2,\\n        uint p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        uint p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        uint p2,\\n        bool p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        uint p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2,\\n        uint p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        bool p2,\\n        uint p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        address p2,\\n        uint p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        uint p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        string memory p2,\\n        uint p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, address p1, uint p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        uint p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, address p1, uint p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        uint p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        string memory p2,\\n        uint p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        address p2,\\n        uint p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, address p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, address p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, address p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, address p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        uint p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        string memory p2,\\n        uint p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, uint p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, uint p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, uint p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, uint p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, uint p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, uint p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, uint p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, uint p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, string memory p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        uint p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, string memory p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        uint p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, bool p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, bool p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, bool p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, bool p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, address p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        uint p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, address p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, address p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, string memory p1, uint p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        uint p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, string memory p1, uint p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        uint p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        string memory p2,\\n        uint p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        address p2,\\n        uint p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, uint p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, uint p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, uint p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, uint p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, address p1, uint p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        uint p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, address p1, uint p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, address p1, uint p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        string memory p2,\\n        uint p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, address p1, address p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n}\\n\",\"keccak256\":\"0xa8fd2dde0b73d2b0d4bbf1049d5fdb943868bb090abaf161947d2a80b1bd0e4b\",\"license\":\"MIT\"},\"contracts/Interfaces/IActivePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\nimport \\\"./IPool.sol\\\";\\n\\ninterface IActivePool is IPool {\\n    // --- Events ---\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolZKUSDDebtUpdated(uint _ZKUSDDebt);\\n    event ActivePoolETHBalanceUpdated(uint _ETH);\\n\\n    // --- Functions ---\\n    function sendETH(address _account, uint _amount) external;\\n}\\n\",\"keccak256\":\"0xe19be4181014505b9bec0dedf6ea23499b8f152eb1854a0510cba056d973823f\",\"license\":\"MIT\"},\"contracts/Interfaces/ICollSurplusPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\ninterface ICollSurplusPool {\\n    // --- Events ---\\n\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n\\n    event CollBalanceUpdated(address indexed _account, uint _newBalance);\\n    event EtherSent(address _to, uint _amount);\\n\\n    // --- Contract setters ---\\n\\n    function setAddresses(\\n        address _borrowerOperationsAddress,\\n        address _troveManagerAddress,\\n        address _activePoolAddress\\n    ) external;\\n\\n    function getETH() external view returns (uint);\\n\\n    function getCollateral(address _account) external view returns (uint);\\n\\n    function accountSurplus(address _account, uint _amount) external;\\n\\n    function claimColl(address _account) external;\\n}\\n\",\"keccak256\":\"0x1b3d7f6e8b74991ea8a6437fc0f736c48646f84f7026f69842b6e436262c2d24\",\"license\":\"MIT\"},\"contracts/Interfaces/IDefaultPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\nimport \\\"./IPool.sol\\\";\\n\\ninterface IDefaultPool is IPool {\\n    // --- Events ---\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event DefaultPoolZKUSDDebtUpdated(uint _ZKUSDDebt);\\n    event DefaultPoolETHBalanceUpdated(uint _ETH);\\n\\n    // --- Functions ---\\n    function sendETHToActivePool(uint _amount) external;\\n}\\n\",\"keccak256\":\"0xe6738093082df33d09ca2a1c69cffce58668ef1f97b28d734bfcde5daeab5ef2\",\"license\":\"MIT\"},\"contracts/Interfaces/ILiquityBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\nimport \\\"./IPriceFeed.sol\\\";\\n\\ninterface ILiquityBase {\\n    function priceFeed() external view returns (IPriceFeed);\\n}\\n\",\"keccak256\":\"0xe5664f10e955ae7452671d39d948171a2d7cabea55532dc8abd603a2e0cf4e1e\",\"license\":\"MIT\"},\"contracts/Interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\n// Common interface for the Pools.\\ninterface IPool {\\n    // --- Events ---\\n\\n    event ETHBalanceUpdated(uint _newBalance);\\n    event ZKUSDBalanceUpdated(uint _newBalance);\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n    event DefaultPoolAddressChanged(address _newDefaultPoolAddress);\\n    event StabilityPoolAddressChanged(address _newStabilityPoolAddress);\\n    event EtherSent(address _to, uint _amount);\\n\\n    // --- Functions ---\\n\\n    function getETH() external view returns (uint);\\n\\n    function getZKUSDDebt() external view returns (uint);\\n\\n    function increaseZKUSDDebt(uint _amount) external;\\n\\n    function decreaseZKUSDDebt(uint _amount) external;\\n}\\n\",\"keccak256\":\"0x91c4a9dfa5d962cbf37acb1b16dd829ba8e0558be932f433b08e10689b840f45\",\"license\":\"MIT\"},\"contracts/Interfaces/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\ninterface IPriceFeed {\\n    // --- Events ---\\n    event LastGoodPriceUpdated(uint _lastGoodPrice);\\n\\n    // --- Function ---\\n    function fetchPrice() external returns (uint);\\n\\n    function fetchPullPrice(\\n        uint fee,\\n        bytes[] calldata updateData\\n    ) external payable returns (uint);\\n\\n    function fetchUpdateFee(\\n        bytes[] calldata updateData\\n    ) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xd075538be5175dcd41e8308b44e037d078af7d9eccc526e23614a73dd2e8682d\",\"license\":\"MIT\"},\"contracts/Interfaces/ISortedTroves.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\n// Common interface for the SortedTroves Doubly Linked List.\\ninterface ISortedTroves {\\n    // --- Events ---\\n\\n    event SortedTrovesAddressChanged(address _sortedDoublyLLAddress);\\n    event BorrowerOperationsAddressChanged(address _borrowerOperationsAddress);\\n    event NodeAdded(address _id, address _prevId, address _nextId, uint _NICR);\\n    event NodeRemoved(address _id);\\n    event UpdateLink(address _head, address _tail, uint256 _currentSize);\\n\\n    // --- Functions ---\\n\\n    function setParams(\\n        uint256 _size,\\n        address _TroveManagerAddress,\\n        address _borrowerOperationsAddress\\n    ) external;\\n\\n    function insert(\\n        address _id,\\n        uint256 _ICR,\\n        address _prevId,\\n        address _nextId\\n    ) external;\\n\\n    function remove(address _id) external;\\n\\n    function reInsert(\\n        address _id,\\n        uint256 _newICR,\\n        address _prevId,\\n        address _nextId\\n    ) external;\\n\\n    function contains(address _id) external view returns (bool);\\n\\n    function isFull() external view returns (bool);\\n\\n    function isEmpty() external view returns (bool);\\n\\n    function getSize() external view returns (uint256);\\n\\n    function getMaxSize() external view returns (uint256);\\n\\n    function getFirst() external view returns (address);\\n\\n    function getLast() external view returns (address);\\n\\n    function getNext(address _id) external view returns (address);\\n\\n    function getPrev(address _id) external view returns (address);\\n\\n    function validInsertPosition(\\n        uint256 _ICR,\\n        address _prevId,\\n        address _nextId\\n    ) external view returns (bool);\\n\\n    function findInsertPosition(\\n        uint256 _ICR,\\n        address _prevId,\\n        address _nextId\\n    ) external view returns (address, address);\\n}\\n\",\"keccak256\":\"0x40fa13e2b9a7e1e2f11ec26626662b42e332a69bcd70582ccbbf9ab504308a77\",\"license\":\"MIT\"},\"contracts/Interfaces/IStabilityPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\n/*\\n * The Stability Pool holds ZKUSD tokens deposited by Stability Pool depositors.\\n *\\n * When a trove is liquidated, then depending on system conditions, some of its ZKUSD debt gets offset with\\n * ZKUSD in the Stability Pool:  that is, the offset debt evaporates, and an equal amount of ZKUSD tokens in the Stability Pool is burned.\\n *\\n * Thus, a liquidation causes each depositor to receive a ZKUSD loss, in proportion to their deposit as a share of total deposits.\\n * They also receive an ETH gain, as the ETH collateral of the liquidated trove is distributed among Stability depositors,\\n * in the same proportion.\\n *\\n * When a liquidation occurs, it depletes every deposit by the same fraction: for example, a liquidation that depletes 40%\\n * of the total ZKUSD in the Stability Pool, depletes 40% of each deposit.\\n *\\n * A deposit that has experienced a series of liquidations is termed a \\\"compounded deposit\\\": each liquidation depletes the deposit,\\n * multiplying it by some factor in range ]0,1[\\n *\\n * Please see the implementation spec in the proof document, which closely follows on from the compounded deposit / ETH gain derivations:\\n * https://github.com/liquity/liquity/blob/master/papers/Scalable_Reward_Distribution_with_Compounding_Stakes.pdf\\n *\\n * --- ZKT ISSUANCE TO STABILITY POOL DEPOSITORS ---\\n *\\n * An ZKT issuance event occurs at every deposit operation, and every liquidation.\\n *\\n * Each deposit is tagged with the address of the front end through which it was made.\\n *\\n * All deposits earn a share of the issued ZKT in proportion to the deposit as a share of total deposits. The ZKT earned\\n * by a given deposit, is split between the depositor and the front end through which the deposit was made, based on the front end's kickbackRate.\\n *\\n * Please see the system Readme for an overview:\\n * https://github.com/liquity/dev/blob/main/README.md#zkt-issuance-to-stability-providers\\n */\\ninterface IStabilityPool {\\n    // --- Events ---\\n\\n    event StabilityPoolETHBalanceUpdated(uint _newBalance);\\n    event StabilityPoolZKUSDBalanceUpdated(uint _newBalance);\\n\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n    event DefaultPoolAddressChanged(address _newDefaultPoolAddress);\\n    event ZKUSDTokenAddressChanged(address _newZKUSDTokenAddress);\\n    event SortedTrovesAddressChanged(address _newSortedTrovesAddress);\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\n    event CommunityIssuanceAddressChanged(address _newCommunityIssuanceAddress);\\n\\n    event P_Updated(uint _P);\\n    event S_Updated(uint _S, uint128 _epoch, uint128 _scale);\\n    event G_Updated(uint _G, uint128 _epoch, uint128 _scale);\\n    event EpochUpdated(uint128 _currentEpoch);\\n    event ScaleUpdated(uint128 _currentScale);\\n\\n    event FrontEndRegistered(address indexed _frontEnd, uint _kickbackRate);\\n    event FrontEndTagSet(address indexed _depositor, address indexed _frontEnd);\\n\\n    event DepositSnapshotUpdated(\\n        address indexed _depositor,\\n        uint _P,\\n        uint _S,\\n        uint _G\\n    );\\n    event FrontEndSnapshotUpdated(address indexed _frontEnd, uint _P, uint _G);\\n    event UserDepositChanged(address indexed _depositor, uint _newDeposit);\\n    event FrontEndStakeChanged(\\n        address indexed _frontEnd,\\n        uint _newFrontEndStake,\\n        address _depositor\\n    );\\n\\n    event ETHGainWithdrawn(\\n        address indexed _depositor,\\n        uint _ETH,\\n        uint _ZKUSDLoss\\n    );\\n    event ZKTPaidToDepositor(address indexed _depositor, uint _ZKT);\\n    event ZKTPaidToFrontEnd(address indexed _frontEnd, uint _ZKT);\\n    event EtherSent(address _to, uint _amount);\\n\\n    // --- Functions ---\\n\\n    /*\\n     * Called only once on init, to set addresses of other Liquity contracts\\n     * Callable only by owner, renounces ownership at the end\\n     */\\n    function setAddresses(\\n        address _borrowerOperationsAddress,\\n        address _troveManagerAddress,\\n        address _activePoolAddress,\\n        address _zkusdTokenAddress,\\n        address _sortedTrovesAddress,\\n        address _priceFeedAddress,\\n        address _communityIssuanceAddress,\\n        address _treasuryAddress\\n    ) external;\\n\\n    /*\\n     * Initial checks:\\n     * - Frontend is registered or zero address\\n     * - Sender is not a registered frontend\\n     * - _amount is not zero\\n     * ---\\n     * - Triggers a ZKT issuance, based on time passed since the last issuance. The ZKT issuance is shared between *all* depositors and front ends\\n     * - Tags the deposit with the provided front end tag param, if it's a new deposit\\n     * - Sends depositor's accumulated gains (ZKT, ETH) to depositor\\n     * - Sends the tagged front end's accumulated ZKT gains to the tagged front end\\n     * - Increases deposit and tagged front end's stake, and takes new snapshots for each.\\n     */\\n    function provideToSP(uint _amount) external;\\n\\n    /*\\n     * Initial checks:\\n     * - _amount is zero or there are no under collateralized troves left in the system\\n     * - User has a non zero deposit\\n     * ---\\n     * - Triggers a ZKT issuance, based on time passed since the last issuance. The ZKT issuance is shared between *all* depositors and front ends\\n     * - Removes the deposit's front end tag if it is a full withdrawal\\n     * - Sends all depositor's accumulated gains (ZKT, ETH) to depositor\\n     * - Sends the tagged front end's accumulated ZKT gains to the tagged front end\\n     * - Decreases deposit and tagged front end's stake, and takes new snapshots for each.\\n     *\\n     * If _amount > userDeposit, the user withdraws all of their compounded deposit.\\n     */\\n    function withdrawFromSP(\\n        uint _amount,\\n        bytes[] calldata _updateData\\n    ) external payable;\\n\\n    /*\\n     * Initial checks:\\n     * - User has a non zero deposit\\n     * - User has an open trove\\n     * - User has some ETH gain\\n     * ---\\n     * - Triggers a ZKT issuance, based on time passed since the last issuance. The ZKT issuance is shared between *all* depositors and front ends\\n     * - Sends all depositor's ZKT gain to  depositor\\n     * - Sends all tagged front end's ZKT gain to the tagged front end\\n     * - Transfers the depositor's entire ETH gain from the Stability Pool to the caller's trove\\n     * - Leaves their compounded deposit in the Stability Pool\\n     * - Updates snapshots for deposit and tagged front end stake\\n     */\\n    function withdrawETHGainToTrove(\\n        address _upperHint,\\n        address _lowerHint,\\n        bytes[] calldata _updateData\\n    ) external payable;\\n\\n    /*\\n     * Initial checks:\\n     * - Caller is TroveManager\\n     * ---\\n     * Cancels out the specified debt against the ZKUSD contained in the Stability Pool (as far as possible)\\n     * and transfers the Trove's ETH collateral from ActivePool to StabilityPool.\\n     * Only called by liquidation functions in the TroveManager.\\n     */\\n    function offset(uint _debt, uint _coll) external;\\n\\n    /*\\n     * Returns the total amount of ETH held by the pool, accounted in an internal variable instead of `balance`,\\n     * to exclude edge cases like ETH received from a self-destruct.\\n     */\\n    function getETH() external view returns (uint);\\n\\n    /*\\n     * Returns ZKUSD held in the pool. Changes when users deposit/withdraw, and when Trove debt is offset.\\n     */\\n    function getTotalZKUSDDeposits() external view returns (uint);\\n\\n    /*\\n     * Calculates the ETH gain earned by the deposit since its last snapshots were taken.\\n     */\\n    function getDepositorETHGain(\\n        address _depositor\\n    ) external view returns (uint);\\n\\n    /*\\n     * Calculate the ZKT gain earned by a deposit since its last snapshots were taken.\\n     * If not tagged with a front end, the depositor gets a 100% cut of what their deposit earned.\\n     * Otherwise, their cut of the deposit's earnings is equal to the kickbackRate, set by the front end through\\n     * which they made their deposit.\\n     */\\n    function getDepositorZKTGain(\\n        address _depositor\\n    ) external view returns (uint);\\n\\n    /*\\n     * Return the ZKT gain earned by the front end.\\n     */\\n    function getFrontEndZKTGain(address _frontEnd) external view returns (uint);\\n\\n    /*\\n     * Return the user's compounded deposit.\\n     */\\n    function getCompoundedZKUSDDeposit(\\n        address _depositor\\n    ) external view returns (uint);\\n\\n    /*\\n     * Return the front end's compounded stake.\\n     *\\n     * The front end's compounded stake is equal to the sum of its depositors' compounded deposits.\\n     */\\n    function getCompoundedFrontEndStake(\\n        address _frontEnd\\n    ) external view returns (uint);\\n\\n    /*\\n     * Fallback function\\n     * Only callable by Active Pool, it just accounts for ETH received\\n     * receive() external payable;\\n     */\\n}\\n\",\"keccak256\":\"0xaa8963d29d489774f2652796b03479e97f5fdb8b3eb62cbd1f55303c6a2b590b\",\"license\":\"MIT\"},\"contracts/Interfaces/ITroveManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ILiquityBase.sol\\\";\\nimport \\\"./IStabilityPool.sol\\\";\\nimport \\\"./IZKUSDToken.sol\\\";\\nimport \\\"./IZKToken.sol\\\";\\nimport \\\"./IZKTStaking.sol\\\";\\n\\n// Common interface for the Trove Manager.\\ninterface ITroveManager is ILiquityBase {\\n    // --- Events ---\\n\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\n    event ZKUSDTokenAddressChanged(address _newZKUSDTokenAddress);\\n    event ActivePoolAddressChanged(address _activePoolAddress);\\n    event DefaultPoolAddressChanged(address _defaultPoolAddress);\\n    event StabilityPoolAddressChanged(address _stabilityPoolAddress);\\n    event GasPoolAddressChanged(address _gasPoolAddress);\\n    event CollSurplusPoolAddressChanged(address _collSurplusPoolAddress);\\n    event SortedTrovesAddressChanged(address _sortedTrovesAddress);\\n    event ZKTokenAddressChanged(address _zkTokenAddress);\\n    event ZKTStakingAddressChanged(address _zktStakingAddress);\\n\\n    event Liquidation(\\n        uint _liquidatedDebt,\\n        uint _liquidatedColl,\\n        uint _collGasCompensation,\\n        uint _ZKUSDGasCompensation\\n    );\\n    event Redemption(\\n        uint _attemptedZKUSDAmount,\\n        uint _actualZKUSDAmount,\\n        uint _ETHSent,\\n        uint _ETHFee\\n    );\\n    event TroveUpdated(\\n        address indexed _borrower,\\n        uint _debt,\\n        uint _coll,\\n        uint stake,\\n        uint8 operation\\n    );\\n    event TroveLiquidated(\\n        address indexed _borrower,\\n        uint _debt,\\n        uint _coll,\\n        uint8 operation\\n    );\\n    event BaseRateUpdated(uint _baseRate);\\n    event LastFeeOpTimeUpdated(uint _lastFeeOpTime);\\n    event TotalStakesUpdated(uint _newTotalStakes);\\n    event SystemSnapshotsUpdated(\\n        uint _totalStakesSnapshot,\\n        uint _totalCollateralSnapshot\\n    );\\n    event LTermsUpdated(uint256 _L_Native, uint256 _L_Debt);\\n    event TroveSnapshotsUpdated(\\n        address _borrower,\\n        uint256 _L_Native,\\n        uint256 _L_Debt\\n    );\\n    event TroveIndexUpdated(address _borrower, uint256 _newIndex);\\n\\n    // --- Functions ---\\n\\n    function setAddresses(\\n        address _borrowerOperationsAddress,\\n        address _activePoolAddress,\\n        address _defaultPoolAddress,\\n        address _stabilityPoolAddress,\\n        address _gasPoolAddress,\\n        address _collSurplusPoolAddress,\\n        address _priceFeedAddress,\\n        address _zkusdTokenAddress,\\n        address _sortedTrovesAddress,\\n        address _zkTokenAddress,\\n        address _zktStakingAddress\\n    ) external;\\n\\n    function stabilityPool() external view returns (IStabilityPool);\\n\\n    function zkusdToken() external view returns (IZKUSDToken);\\n\\n    function zkToken() external view returns (IZKToken);\\n\\n    function zktStaking() external view returns (IZKTStaking);\\n\\n    function getTroveOwnersCount() external view returns (uint);\\n\\n    function getTroveFromTroveOwnersArray(\\n        uint _index\\n    ) external view returns (address);\\n\\n    function getNominalICR(address _borrower) external view returns (uint);\\n\\n    function getCurrentICR(\\n        address _borrower,\\n        uint _price\\n    ) external view returns (uint);\\n\\n    function liquidate(\\n        address _borrower,\\n        bytes[] calldata _updateData\\n    ) external payable;\\n\\n    function liquidateTroves(\\n        uint _n,\\n        bytes[] calldata _updateData\\n    ) external payable;\\n\\n    function batchLiquidateTroves(\\n        address[] calldata _troveArray,\\n        bytes[] calldata _updateData\\n    ) external payable;\\n\\n    function redeemCollateral(\\n        uint _ZKUSDAmount,\\n        address _firstRedemptionHint,\\n        address _upperPartialRedemptionHint,\\n        address _lowerPartialRedemptionHint,\\n        uint _partialRedemptionHintNICR,\\n        uint _maxIterations,\\n        uint _maxFee,\\n        bytes[] calldata _updateData\\n    ) external payable;\\n\\n    function updateStakeAndTotalStakes(\\n        address _borrower\\n    ) external returns (uint);\\n\\n    function updateTroveRewardSnapshots(address _borrower) external;\\n\\n    function addTroveOwnerToArray(\\n        address _borrower\\n    ) external returns (uint index);\\n\\n    function applyPendingRewards(address _borrower) external;\\n\\n    function getPendingETHReward(\\n        address _borrower\\n    ) external view returns (uint);\\n\\n    function getPendingZKUSDDebtReward(\\n        address _borrower\\n    ) external view returns (uint);\\n\\n    function hasPendingRewards(address _borrower) external view returns (bool);\\n\\n    function getEntireDebtAndColl(\\n        address _borrower\\n    )\\n        external\\n        view\\n        returns (\\n            uint debt,\\n            uint coll,\\n            uint pendingZKUSDDebtReward,\\n            uint pendingETHReward\\n        );\\n\\n    function closeTrove(address _borrower) external;\\n\\n    function removeStake(address _borrower) external;\\n\\n    function getRedemptionRate() external view returns (uint);\\n\\n    function getRedemptionRateWithDecay() external view returns (uint);\\n\\n    function getRedemptionFeeWithDecay(\\n        uint _ETHDrawn\\n    ) external view returns (uint);\\n\\n    function getBorrowingRate() external view returns (uint);\\n\\n    function getBorrowingRateWithDecay() external view returns (uint);\\n\\n    function getBorrowingFee(uint ZKUSDDebt) external view returns (uint);\\n\\n    function getBorrowingFeeWithDecay(\\n        uint _ZKUSDDebt\\n    ) external view returns (uint);\\n\\n    function decayBaseRateFromBorrowing() external;\\n\\n    function getTroveStatus(address _borrower) external view returns (uint);\\n\\n    function getTroveStake(address _borrower) external view returns (uint);\\n\\n    function getTroveDebt(address _borrower) external view returns (uint);\\n\\n    function getTroveColl(address _borrower) external view returns (uint);\\n\\n    function setTroveStatus(address _borrower, uint num) external;\\n\\n    function increaseTroveColl(\\n        address _borrower,\\n        uint _collIncrease\\n    ) external returns (uint);\\n\\n    function decreaseTroveColl(\\n        address _borrower,\\n        uint _collDecrease\\n    ) external returns (uint);\\n\\n    function increaseTroveDebt(\\n        address _borrower,\\n        uint _debtIncrease\\n    ) external returns (uint);\\n\\n    function decreaseTroveDebt(\\n        address _borrower,\\n        uint _collDecrease\\n    ) external returns (uint);\\n\\n    function getTCR(uint _price) external view returns (uint);\\n\\n    function checkRecoveryMode(uint _price) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x24152262f3bd5c4e9ff769cd0a28c028aeb86d8a7b91f6251c397d498e1ace50\",\"license\":\"MIT\"},\"contracts/Interfaces/IZKTStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\ninterface IZKTStaking {\\n    // --- Events --\\n\\n    event ZKTokenAddressSet(address _zkTokenAddress);\\n    event ZKUSDTokenAddressSet(address _zkusdTokenAddress);\\n    event TroveManagerAddressSet(address _troveManager);\\n    event BorrowerOperationsAddressSet(address _borrowerOperationsAddress);\\n    event ActivePoolAddressSet(address _activePoolAddress);\\n\\n    event StakeChanged(address indexed staker, uint newStake);\\n    event StakingGainsWithdrawn(\\n        address indexed staker,\\n        uint ZKUSDGain,\\n        uint ETHGain\\n    );\\n    event F_ETHUpdated(uint _F_ETH);\\n    event F_ZKUSDUpdated(uint _F_ZKUSD);\\n    event TotalZKTStakedUpdated(uint _totalZKTStaked);\\n    event EtherSent(address _account, uint _amount);\\n    event StakerSnapshotsUpdated(address _staker, uint _F_ETH, uint _F_ZKUSD);\\n\\n    // --- Functions ---\\n\\n    function setAddresses(\\n        address _zkTokenAddress,\\n        address _zkusdTokenAddress,\\n        address _troveManagerAddress,\\n        address _borrowerOperationsAddress,\\n        address _activePoolAddress\\n    ) external;\\n\\n    function stake(uint _ZKTamount) external;\\n\\n    function unstake(uint _ZKTamount) external;\\n\\n    function increaseF_ETH(uint _ETHFee) external;\\n\\n    function increaseF_ZKUSD(uint _ZKTFee) external;\\n\\n    function getPendingETHGain(address _user) external view returns (uint);\\n\\n    function getPendingZKUSDGain(address _user) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xa78901f469b426ca433fa80ac24299337a06e0d88144d182316a0b76533ee180\",\"license\":\"MIT\"},\"contracts/Interfaces/IZKToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\nimport \\\"../Dependencies/IERC20.sol\\\";\\nimport \\\"../Dependencies/IERC2612.sol\\\";\\n\\ninterface IZKToken is IERC20, IERC2612 {\\n    // --- Events ---\\n\\n    event CommunityIssuanceAddressSet(address _communityIssuanceAddress);\\n    event ZKTStakingAddressSet(address _zktStakingAddress);\\n    event LockupContractFactoryAddressSet(\\n        address _lockupContractFactoryAddress\\n    );\\n\\n    // --- Functions ---\\n\\n    function sendToZKTStaking(address _sender, uint256 _amount) external;\\n\\n    function getDeploymentStartTime() external view returns (uint256);\\n\\n    function getLpRewardsEntitlement() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xefdb7618c8120010722116fea0e57455b9a5945dc67381e06ca1eb6aab5bee9e\",\"license\":\"MIT\"},\"contracts/Interfaces/IZKUSDToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\nimport \\\"../Dependencies/IERC20.sol\\\";\\nimport \\\"../Dependencies/IERC2612.sol\\\";\\n\\ninterface IZKUSDToken is IERC20, IERC2612 {\\n    // --- Events ---\\n\\n    event TroveManagerAddressChanged(address _troveManagerAddress);\\n    event StabilityPoolAddressChanged(address _newStabilityPoolAddress);\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n\\n    event ZKUSDTokenBalanceUpdated(address _user, uint _amount);\\n\\n    // --- Functions ---\\n\\n    function mint(address _account, uint256 _amount) external;\\n\\n    function burn(address _account, uint256 _amount) external;\\n\\n    function sendToPool(\\n        address _sender,\\n        address poolAddress,\\n        uint256 _amount\\n    ) external;\\n\\n    function returnFromPool(\\n        address poolAddress,\\n        address user,\\n        uint256 _amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcf6fed514128014c4de8ce63eff3dda32bd84c61f996831fab13b3297834f07a\",\"license\":\"MIT\"},\"contracts/TroveManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./Interfaces/ITroveManager.sol\\\";\\nimport \\\"./Interfaces/IStabilityPool.sol\\\";\\nimport \\\"./Interfaces/ICollSurplusPool.sol\\\";\\nimport \\\"./Interfaces/IZKUSDToken.sol\\\";\\nimport \\\"./Interfaces/ISortedTroves.sol\\\";\\nimport \\\"./Interfaces/IZKToken.sol\\\";\\nimport \\\"./Interfaces/IZKTStaking.sol\\\";\\nimport \\\"./Dependencies/LiquityBase.sol\\\";\\nimport \\\"./Dependencies/Ownable.sol\\\";\\nimport \\\"./Dependencies/CheckContract.sol\\\";\\nimport \\\"./Dependencies/console.sol\\\";\\n\\ncontract TroveManager is LiquityBase, CheckContract, ITroveManager {\\n    string public constant NAME = \\\"TroveManager\\\";\\n\\n    // --- Connected contract declarations ---\\n\\n    address public borrowerOperationsAddress;\\n\\n    IStabilityPool public override stabilityPool;\\n\\n    address gasPoolAddress;\\n\\n    ICollSurplusPool collSurplusPool;\\n\\n    IZKUSDToken public override zkusdToken;\\n\\n    IZKToken public override zkToken;\\n\\n    IZKTStaking public override zktStaking;\\n\\n    // A doubly linked list of Troves, sorted by their sorted by their collateral ratios\\n    ISortedTroves public sortedTroves;\\n\\n    // --- Data structures ---\\n\\n    uint public constant SECONDS_IN_ONE_MINUTE = 60;\\n    /*\\n     * Half-life of 12h. 12h = 720 min\\n     * (1/2) = d^720 => d = (1/2)^(1/720)\\n     */\\n    uint public constant MINUTE_DECAY_FACTOR = 999037758833783000;\\n    uint public constant REDEMPTION_FEE_FLOOR = (DECIMAL_PRECISION / 1000) * 5; // 0.5%\\n    uint public constant MAX_BORROWING_FEE = (DECIMAL_PRECISION / 100) * 5; // 5%\\n\\n    // During bootsrap period redemptions are not allowed\\n    uint public constant BOOTSTRAP_PERIOD = 14 days;\\n\\n    /*\\n     * BETA: 18 digit decimal. Parameter by which to divide the redeemed fraction, in order to calc the new base rate from a redemption.\\n     * Corresponds to (1 / ALPHA) in the white paper.\\n     */\\n    uint public constant BETA = 2;\\n\\n    uint public baseRate;\\n\\n    // The timestamp of the latest fee operation (redemption or new ZKUSD issuance)\\n    uint public lastFeeOperationTime;\\n\\n    enum Status {\\n        nonExistent,\\n        active,\\n        closedByOwner,\\n        closedByLiquidation,\\n        closedByRedemption\\n    }\\n\\n    // Store the necessary data for a trove\\n    struct Trove {\\n        uint debt;\\n        uint coll;\\n        uint stake;\\n        Status status;\\n        uint128 arrayIndex;\\n    }\\n\\n    mapping(address => Trove) public Troves;\\n\\n    uint public totalStakes;\\n\\n    // Snapshot of the value of totalStakes, taken immediately after the latest liquidation\\n    uint public totalStakesSnapshot;\\n\\n    // Snapshot of the total collateral across the ActivePool and DefaultPool, immediately after the latest liquidation.\\n    uint public totalCollateralSnapshot;\\n\\n    uint public L_ETH;\\n    uint public L_ZKUSDDebt;\\n\\n    mapping(address => RewardSnapshot) public rewardSnapshots;\\n\\n    struct RewardSnapshot {\\n        uint ETH;\\n        uint ZKUSDDebt;\\n    }\\n\\n    address[] public TroveOwners;\\n\\n    uint public lastETHError_Redistribution;\\n    uint public lastZKUSDDebtError_Redistribution;\\n\\n    struct LocalVariables_OuterLiquidationFunction {\\n        uint price;\\n        uint ZKUSDInStabPool;\\n        bool recoveryModeAtStart;\\n        uint liquidatedDebt;\\n        uint liquidatedColl;\\n    }\\n\\n    struct LocalVariables_InnerSingleLiquidateFunction {\\n        uint collToLiquidate;\\n        uint pendingDebtReward;\\n        uint pendingCollReward;\\n    }\\n\\n    struct LocalVariables_LiquidationSequence {\\n        uint remainingZKUSDInStabPool;\\n        uint i;\\n        uint ICR;\\n        address user;\\n        bool backToNormalMode;\\n        uint entireSystemDebt;\\n        uint entireSystemColl;\\n    }\\n\\n    struct LiquidationValues {\\n        uint entireTroveDebt;\\n        uint entireTroveColl;\\n        uint collGasCompensation;\\n        uint ZKUSDGasCompensation;\\n        uint debtToOffset;\\n        uint collToSendToSP;\\n        uint debtToRedistribute;\\n        uint collToRedistribute;\\n        uint collSurplus;\\n    }\\n\\n    struct LiquidationTotals {\\n        uint totalCollInSequence;\\n        uint totalDebtInSequence;\\n        uint totalCollGasCompensation;\\n        uint totalZKUSDGasCompensation;\\n        uint totalDebtToOffset;\\n        uint totalCollToSendToSP;\\n        uint totalDebtToRedistribute;\\n        uint totalCollToRedistribute;\\n        uint totalCollSurplus;\\n    }\\n\\n    struct ContractsCache {\\n        IActivePool activePool;\\n        IDefaultPool defaultPool;\\n        IZKUSDToken zkusdToken;\\n        IZKTStaking zktStaking;\\n        ISortedTroves sortedTroves;\\n        ICollSurplusPool collSurplusPool;\\n        address gasPoolAddress;\\n    }\\n    // --- Variable container structs for redemptions ---\\n\\n    struct RedemptionTotals {\\n        uint remainingZKUSD;\\n        uint totalZKUSDToRedeem;\\n        uint totalETHDrawn;\\n        uint ETHFee;\\n        uint ETHToSendToRedeemer;\\n        uint decayedBaseRate;\\n        uint price;\\n        uint totalZKUSDSupplyAtStart;\\n    }\\n\\n    struct SingleRedemptionValues {\\n        uint ZKUSDLot;\\n        uint ETHLot;\\n        bool cancelledPartial;\\n    }\\n\\n    // --- Events ---\\n\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\n    event ZKUSDTokenAddressChanged(address _newZKUSDTokenAddress);\\n    event ActivePoolAddressChanged(address _activePoolAddress);\\n    event DefaultPoolAddressChanged(address _defaultPoolAddress);\\n    event StabilityPoolAddressChanged(address _stabilityPoolAddress);\\n    event GasPoolAddressChanged(address _gasPoolAddress);\\n    event CollSurplusPoolAddressChanged(address _collSurplusPoolAddress);\\n    event SortedTrovesAddressChanged(address _sortedTrovesAddress);\\n    event ZKTokenAddressChanged(address _zkTokenAddress);\\n    event ZKTStakingAddressChanged(address _zktStakingAddress);\\n\\n    event Liquidation(\\n        uint _liquidatedDebt,\\n        uint _liquidatedColl,\\n        uint _collGasCompensation,\\n        uint _ZKUSDGasCompensation\\n    );\\n    event Redemption(\\n        uint _attemptedZKUSDAmount,\\n        uint _actualZKUSDAmount,\\n        uint _ETHSent,\\n        uint _ETHFee\\n    );\\n    event TroveUpdated(\\n        address indexed _borrower,\\n        uint _debt,\\n        uint _coll,\\n        uint _stake,\\n        TroveManagerOperation _operation\\n    );\\n    event TroveLiquidated(\\n        address indexed _borrower,\\n        uint _debt,\\n        uint _coll,\\n        TroveManagerOperation _operation\\n    );\\n    event BaseRateUpdated(uint _baseRate);\\n    event LastFeeOpTimeUpdated(uint _lastFeeOpTime);\\n    event TotalStakesUpdated(uint _newTotalStakes);\\n    event SystemSnapshotsUpdated(\\n        uint _totalStakesSnapshot,\\n        uint _totalCollateralSnapshot\\n    );\\n    event LTermsUpdated(uint256 _L_Native, uint256 _L_Debt);\\n    event TroveSnapshotsUpdated(\\n        address _borrower,\\n        uint256 _L_Native,\\n        uint256 _L_Debt\\n    );\\n    event TroveIndexUpdated(address _borrower, uint256 _newIndex);\\n\\n    enum TroveManagerOperation {\\n        applyPendingRewards,\\n        liquidateInNormalMode,\\n        liquidateInRecoveryMode,\\n        redeemCollateral\\n    }\\n\\n    // --- Dependency setter ---\\n\\n    function setAddresses(\\n        address _borrowerOperationsAddress,\\n        address _activePoolAddress,\\n        address _defaultPoolAddress,\\n        address _stabilityPoolAddress,\\n        address _gasPoolAddress,\\n        address _collSurplusPoolAddress,\\n        address _priceFeedAddress,\\n        address _zkusdTokenAddress,\\n        address _sortedTrovesAddress,\\n        address _zkTokenAddress,\\n        address _zktStakingAddress\\n    ) external override onlyOwner {\\n        checkContract(_borrowerOperationsAddress);\\n        checkContract(_activePoolAddress);\\n        checkContract(_defaultPoolAddress);\\n        checkContract(_stabilityPoolAddress);\\n        checkContract(_gasPoolAddress);\\n        checkContract(_collSurplusPoolAddress);\\n        checkContract(_priceFeedAddress);\\n        checkContract(_zkusdTokenAddress);\\n        checkContract(_sortedTrovesAddress);\\n        checkContract(_zkTokenAddress);\\n        checkContract(_zktStakingAddress);\\n\\n        borrowerOperationsAddress = _borrowerOperationsAddress;\\n        activePool = IActivePool(_activePoolAddress);\\n        defaultPool = IDefaultPool(_defaultPoolAddress);\\n        stabilityPool = IStabilityPool(_stabilityPoolAddress);\\n        gasPoolAddress = _gasPoolAddress;\\n        collSurplusPool = ICollSurplusPool(_collSurplusPoolAddress);\\n        priceFeed = IPriceFeed(_priceFeedAddress);\\n        zkusdToken = IZKUSDToken(_zkusdTokenAddress);\\n        sortedTroves = ISortedTroves(_sortedTrovesAddress);\\n        zkToken = IZKToken(_zkTokenAddress);\\n        zktStaking = IZKTStaking(_zktStakingAddress);\\n\\n        emit BorrowerOperationsAddressChanged(_borrowerOperationsAddress);\\n        emit ActivePoolAddressChanged(_activePoolAddress);\\n        emit DefaultPoolAddressChanged(_defaultPoolAddress);\\n        emit StabilityPoolAddressChanged(_stabilityPoolAddress);\\n        emit GasPoolAddressChanged(_gasPoolAddress);\\n        emit CollSurplusPoolAddressChanged(_collSurplusPoolAddress);\\n        emit PriceFeedAddressChanged(_priceFeedAddress);\\n        emit ZKUSDTokenAddressChanged(_zkusdTokenAddress);\\n        emit SortedTrovesAddressChanged(_sortedTrovesAddress);\\n        emit ZKTokenAddressChanged(_zkTokenAddress);\\n        emit ZKTStakingAddressChanged(_zktStakingAddress);\\n    }\\n\\n    // --- Getters ---\\n\\n    function getTroveOwnersCount() external view override returns (uint) {\\n        return TroveOwners.length;\\n    }\\n\\n    function getTroveFromTroveOwnersArray(\\n        uint _index\\n    ) external view override returns (address) {\\n        return TroveOwners[_index];\\n    }\\n\\n    // --- Trove Liquidation functions ---\\n\\n    // Single liquidation function. Closes the trove if its ICR is lower than the minimum collateral ratio.\\n    function liquidate(\\n        address _borrower,\\n        bytes[] calldata _updateData\\n    ) external payable override {\\n        _requireTroveIsActive(_borrower);\\n\\n        address[] memory borrowers = new address[](1);\\n        borrowers[0] = _borrower;\\n        batchLiquidateTroves(borrowers, _updateData);\\n    }\\n\\n    // --- Inner single liquidation functions ---\\n\\n    // Liquidate one trove, in Normal Mode.\\n    function _liquidateNormalMode(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        address _borrower,\\n        uint _ZKUSDInStabPool\\n    ) internal returns (LiquidationValues memory singleLiquidation) {\\n        LocalVariables_InnerSingleLiquidateFunction memory vars;\\n\\n        (\\n            singleLiquidation.entireTroveDebt,\\n            singleLiquidation.entireTroveColl,\\n            vars.pendingDebtReward,\\n            vars.pendingCollReward\\n        ) = getEntireDebtAndColl(_borrower);\\n\\n        _movePendingTroveRewardsToActivePool(\\n            _activePool,\\n            _defaultPool,\\n            vars.pendingDebtReward,\\n            vars.pendingCollReward\\n        );\\n        _removeStake(_borrower);\\n\\n        singleLiquidation.collGasCompensation = _getCollGasCompensation(\\n            singleLiquidation.entireTroveColl\\n        );\\n        singleLiquidation.ZKUSDGasCompensation = ZKUSD_GAS_COMPENSATION;\\n        uint collToLiquidate = singleLiquidation.entireTroveColl.sub(\\n            singleLiquidation.collGasCompensation\\n        );\\n\\n        (\\n            singleLiquidation.debtToOffset,\\n            singleLiquidation.collToSendToSP,\\n            singleLiquidation.debtToRedistribute,\\n            singleLiquidation.collToRedistribute\\n        ) = _getOffsetAndRedistributionVals(\\n            singleLiquidation.entireTroveDebt,\\n            collToLiquidate,\\n            _ZKUSDInStabPool\\n        );\\n\\n        _closeTrove(_borrower, Status.closedByLiquidation);\\n        emit TroveLiquidated(\\n            _borrower,\\n            singleLiquidation.entireTroveDebt,\\n            singleLiquidation.entireTroveColl,\\n            TroveManagerOperation.liquidateInNormalMode\\n        );\\n        emit TroveUpdated(\\n            _borrower,\\n            0,\\n            0,\\n            0,\\n            TroveManagerOperation.liquidateInNormalMode\\n        );\\n        return singleLiquidation;\\n    }\\n\\n    // Liquidate one trove, in Recovery Mode.\\n    function _liquidateRecoveryMode(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        address _borrower,\\n        uint _ICR,\\n        uint _ZKUSDInStabPool,\\n        uint _TCR,\\n        uint _price\\n    ) internal returns (LiquidationValues memory singleLiquidation) {\\n        LocalVariables_InnerSingleLiquidateFunction memory vars;\\n        if (TroveOwners.length <= 1) {\\n            return singleLiquidation;\\n        } // don't liquidate if last trove\\n        (\\n            singleLiquidation.entireTroveDebt,\\n            singleLiquidation.entireTroveColl,\\n            vars.pendingDebtReward,\\n            vars.pendingCollReward\\n        ) = getEntireDebtAndColl(_borrower);\\n\\n        singleLiquidation.collGasCompensation = _getCollGasCompensation(\\n            singleLiquidation.entireTroveColl\\n        );\\n        singleLiquidation.ZKUSDGasCompensation = ZKUSD_GAS_COMPENSATION;\\n        vars.collToLiquidate = singleLiquidation.entireTroveColl.sub(\\n            singleLiquidation.collGasCompensation\\n        );\\n\\n        // If ICR <= 100%, purely redistribute the Trove across all active Troves\\n        if (_ICR <= _100pct) {\\n            _movePendingTroveRewardsToActivePool(\\n                _activePool,\\n                _defaultPool,\\n                vars.pendingDebtReward,\\n                vars.pendingCollReward\\n            );\\n            _removeStake(_borrower);\\n\\n            singleLiquidation.debtToOffset = 0;\\n            singleLiquidation.collToSendToSP = 0;\\n            singleLiquidation.debtToRedistribute = singleLiquidation\\n                .entireTroveDebt;\\n            singleLiquidation.collToRedistribute = vars.collToLiquidate;\\n\\n            _closeTrove(_borrower, Status.closedByLiquidation);\\n            emit TroveLiquidated(\\n                _borrower,\\n                singleLiquidation.entireTroveDebt,\\n                singleLiquidation.entireTroveColl,\\n                TroveManagerOperation.liquidateInRecoveryMode\\n            );\\n            emit TroveUpdated(\\n                _borrower,\\n                0,\\n                0,\\n                0,\\n                TroveManagerOperation.liquidateInRecoveryMode\\n            );\\n\\n            // If 100% < ICR < MCR, offset as much as possible, and redistribute the remainder\\n        } else if ((_ICR > _100pct) && (_ICR < MCR)) {\\n            _movePendingTroveRewardsToActivePool(\\n                _activePool,\\n                _defaultPool,\\n                vars.pendingDebtReward,\\n                vars.pendingCollReward\\n            );\\n            _removeStake(_borrower);\\n\\n            (\\n                singleLiquidation.debtToOffset,\\n                singleLiquidation.collToSendToSP,\\n                singleLiquidation.debtToRedistribute,\\n                singleLiquidation.collToRedistribute\\n            ) = _getOffsetAndRedistributionVals(\\n                singleLiquidation.entireTroveDebt,\\n                vars.collToLiquidate,\\n                _ZKUSDInStabPool\\n            );\\n\\n            _closeTrove(_borrower, Status.closedByLiquidation);\\n            emit TroveLiquidated(\\n                _borrower,\\n                singleLiquidation.entireTroveDebt,\\n                singleLiquidation.entireTroveColl,\\n                TroveManagerOperation.liquidateInRecoveryMode\\n            );\\n            emit TroveUpdated(\\n                _borrower,\\n                0,\\n                0,\\n                0,\\n                TroveManagerOperation.liquidateInRecoveryMode\\n            );\\n            /*\\n             * If 110% <= ICR < current TCR (accounting for the preceding liquidations in the current sequence)\\n             * and there is ZKUSD in the Stability Pool, only offset, with no redistribution,\\n             * but at a capped rate of 1.1 and only if the whole debt can be liquidated.\\n             * The remainder due to the capped rate will be claimable as collateral surplus.\\n             */\\n        } else if (\\n            (_ICR >= MCR) &&\\n            (_ICR < _TCR) &&\\n            (singleLiquidation.entireTroveDebt <= _ZKUSDInStabPool)\\n        ) {\\n            _movePendingTroveRewardsToActivePool(\\n                _activePool,\\n                _defaultPool,\\n                vars.pendingDebtReward,\\n                vars.pendingCollReward\\n            );\\n            assert(_ZKUSDInStabPool != 0);\\n\\n            _removeStake(_borrower);\\n            singleLiquidation = _getCappedOffsetVals(\\n                singleLiquidation.entireTroveDebt,\\n                singleLiquidation.entireTroveColl,\\n                _price\\n            );\\n\\n            _closeTrove(_borrower, Status.closedByLiquidation);\\n            if (singleLiquidation.collSurplus > 0) {\\n                collSurplusPool.accountSurplus(\\n                    _borrower,\\n                    singleLiquidation.collSurplus\\n                );\\n            }\\n\\n            emit TroveLiquidated(\\n                _borrower,\\n                singleLiquidation.entireTroveDebt,\\n                singleLiquidation.collToSendToSP,\\n                TroveManagerOperation.liquidateInRecoveryMode\\n            );\\n            emit TroveUpdated(\\n                _borrower,\\n                0,\\n                0,\\n                0,\\n                TroveManagerOperation.liquidateInRecoveryMode\\n            );\\n        } else {\\n            // if (_ICR >= MCR && ( _ICR >= _TCR || singleLiquidation.entireTroveDebt > _ZKUSDInStabPool))\\n            LiquidationValues memory zeroVals;\\n            return zeroVals;\\n        }\\n\\n        return singleLiquidation;\\n    }\\n\\n    /* In a full liquidation, returns the values for a trove's coll and debt to be offset, and coll and debt to be\\n     * redistributed to active troves.\\n     */\\n    function _getOffsetAndRedistributionVals(\\n        uint _debt,\\n        uint _coll,\\n        uint _ZKUSDInStabPool\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint debtToOffset,\\n            uint collToSendToSP,\\n            uint debtToRedistribute,\\n            uint collToRedistribute\\n        )\\n    {\\n        if (_ZKUSDInStabPool > 0) {\\n            debtToOffset = LiquityMath._min(_debt, _ZKUSDInStabPool);\\n            collToSendToSP = _coll.mul(debtToOffset).div(_debt);\\n            debtToRedistribute = _debt.sub(debtToOffset);\\n            collToRedistribute = _coll.sub(collToSendToSP);\\n        } else {\\n            debtToOffset = 0;\\n            collToSendToSP = 0;\\n            debtToRedistribute = _debt;\\n            collToRedistribute = _coll;\\n        }\\n    }\\n\\n    /*\\n     *  Get its offset coll/debt and ETH gas comp, and close the trove.\\n     */\\n    function _getCappedOffsetVals(\\n        uint _entireTroveDebt,\\n        uint _entireTroveColl,\\n        uint _price\\n    ) internal view returns (LiquidationValues memory singleLiquidation) {\\n        singleLiquidation.entireTroveDebt = _entireTroveDebt;\\n        singleLiquidation.entireTroveColl = _entireTroveColl;\\n        uint cappedCollPortion = _entireTroveDebt.mul(MCR).div(_price);\\n\\n        singleLiquidation.collGasCompensation = _getCollGasCompensation(\\n            cappedCollPortion\\n        );\\n        singleLiquidation.ZKUSDGasCompensation = ZKUSD_GAS_COMPENSATION;\\n\\n        singleLiquidation.debtToOffset = _entireTroveDebt;\\n        singleLiquidation.collToSendToSP = cappedCollPortion.sub(\\n            singleLiquidation.collGasCompensation\\n        );\\n        singleLiquidation.collSurplus = _entireTroveColl.sub(cappedCollPortion);\\n        singleLiquidation.debtToRedistribute = 0;\\n        singleLiquidation.collToRedistribute = 0;\\n    }\\n\\n    /*\\n     * Liquidate a sequence of troves. Closes a maximum number of n under-collateralized Troves,\\n     * starting from the one with the lowest collateral ratio in the system, and moving upwards\\n     */\\n    function liquidateTroves(\\n        uint _n,\\n        bytes[] calldata _updateData\\n    ) external payable override {\\n        ContractsCache memory contractsCache = ContractsCache(\\n            activePool,\\n            defaultPool,\\n            IZKUSDToken(address(0)),\\n            IZKTStaking(address(0)),\\n            sortedTroves,\\n            ICollSurplusPool(address(0)),\\n            address(0)\\n        );\\n        IStabilityPool stabilityPoolCached = stabilityPool;\\n\\n        LocalVariables_OuterLiquidationFunction memory vars;\\n\\n        LiquidationTotals memory totals;\\n\\n        vars.price = _requireCallerHasPriceFeedFee(_updateData);\\n        vars.ZKUSDInStabPool = stabilityPoolCached.getTotalZKUSDDeposits();\\n        vars.recoveryModeAtStart = _checkRecoveryMode(vars.price);\\n\\n        // Perform the appropriate liquidation sequence - tally the values, and obtain their totals\\n        if (vars.recoveryModeAtStart) {\\n            totals = _getTotalsFromLiquidateTrovesSequence_RecoveryMode(\\n                contractsCache,\\n                vars.price,\\n                vars.ZKUSDInStabPool,\\n                _n\\n            );\\n        } else {\\n            // if !vars.recoveryModeAtStart\\n            totals = _getTotalsFromLiquidateTrovesSequence_NormalMode(\\n                contractsCache.activePool,\\n                contractsCache.defaultPool,\\n                vars.price,\\n                vars.ZKUSDInStabPool,\\n                _n\\n            );\\n        }\\n\\n        require(\\n            totals.totalDebtInSequence > 0,\\n            \\\"TroveManager: nothing to liquidate\\\"\\n        );\\n\\n        stabilityPoolCached.offset(\\n            totals.totalDebtToOffset,\\n            totals.totalCollToSendToSP\\n        );\\n        _redistributeDebtAndColl(\\n            contractsCache.activePool,\\n            contractsCache.defaultPool,\\n            totals.totalDebtToRedistribute,\\n            totals.totalCollToRedistribute\\n        );\\n        if (totals.totalCollSurplus > 0) {\\n            contractsCache.activePool.sendETH(\\n                address(collSurplusPool),\\n                totals.totalCollSurplus\\n            );\\n        }\\n\\n        // Update system snapshots\\n        _updateSystemSnapshots_excludeCollRemainder(\\n            contractsCache.activePool,\\n            totals.totalCollGasCompensation\\n        );\\n\\n        vars.liquidatedDebt = totals.totalDebtInSequence;\\n        vars.liquidatedColl = totals\\n            .totalCollInSequence\\n            .sub(totals.totalCollGasCompensation)\\n            .sub(totals.totalCollSurplus);\\n        emit Liquidation(\\n            vars.liquidatedDebt,\\n            vars.liquidatedColl,\\n            totals.totalCollGasCompensation,\\n            totals.totalZKUSDGasCompensation\\n        );\\n\\n        // Send gas compensation to caller\\n        _sendGasCompensation(\\n            contractsCache.activePool,\\n            msg.sender,\\n            totals.totalZKUSDGasCompensation,\\n            totals.totalCollGasCompensation\\n        );\\n    }\\n\\n    /*\\n     * This function is used when the liquidateTroves sequence starts during Recovery Mode. However, it\\n     * handle the case where the system *leaves* Recovery Mode, part way through the liquidation sequence\\n     */\\n    function _getTotalsFromLiquidateTrovesSequence_RecoveryMode(\\n        ContractsCache memory _contractsCache,\\n        uint _price,\\n        uint _ZKUSDInStabPool,\\n        uint _n\\n    ) internal returns (LiquidationTotals memory totals) {\\n        LocalVariables_LiquidationSequence memory vars;\\n        LiquidationValues memory singleLiquidation;\\n\\n        vars.remainingZKUSDInStabPool = _ZKUSDInStabPool;\\n        vars.backToNormalMode = false;\\n        vars.entireSystemDebt = getEntireSystemDebt();\\n        vars.entireSystemColl = getEntireSystemColl();\\n\\n        vars.user = _contractsCache.sortedTroves.getLast();\\n        address firstUser = _contractsCache.sortedTroves.getFirst();\\n        for (vars.i = 0; vars.i < _n && vars.user != firstUser; vars.i++) {\\n            // we need to cache it, because current user is likely going to be deleted\\n            address nextUser = _contractsCache.sortedTroves.getPrev(vars.user);\\n\\n            vars.ICR = getCurrentICR(vars.user, _price);\\n\\n            if (!vars.backToNormalMode) {\\n                // Break the loop if ICR is greater than MCR and Stability Pool is empty\\n                if (vars.ICR >= MCR && vars.remainingZKUSDInStabPool == 0) {\\n                    break;\\n                }\\n\\n                uint TCR = LiquityMath._computeCR(\\n                    vars.entireSystemColl,\\n                    vars.entireSystemDebt,\\n                    _price\\n                );\\n\\n                singleLiquidation = _liquidateRecoveryMode(\\n                    _contractsCache.activePool,\\n                    _contractsCache.defaultPool,\\n                    vars.user,\\n                    vars.ICR,\\n                    vars.remainingZKUSDInStabPool,\\n                    TCR,\\n                    _price\\n                );\\n\\n                // Update aggregate trackers\\n                vars.remainingZKUSDInStabPool = vars\\n                    .remainingZKUSDInStabPool\\n                    .sub(singleLiquidation.debtToOffset);\\n                vars.entireSystemDebt = vars.entireSystemDebt.sub(\\n                    singleLiquidation.debtToOffset\\n                );\\n                vars.entireSystemColl = vars\\n                    .entireSystemColl\\n                    .sub(singleLiquidation.collToSendToSP)\\n                    .sub(singleLiquidation.collGasCompensation)\\n                    .sub(singleLiquidation.collSurplus);\\n\\n                // Add liquidation values to their respective running totals\\n                totals = _addLiquidationValuesToTotals(\\n                    totals,\\n                    singleLiquidation\\n                );\\n\\n                vars.backToNormalMode = !_checkPotentialRecoveryMode(\\n                    vars.entireSystemColl,\\n                    vars.entireSystemDebt,\\n                    _price\\n                );\\n            } else if (vars.backToNormalMode && vars.ICR < MCR) {\\n                singleLiquidation = _liquidateNormalMode(\\n                    _contractsCache.activePool,\\n                    _contractsCache.defaultPool,\\n                    vars.user,\\n                    vars.remainingZKUSDInStabPool\\n                );\\n\\n                vars.remainingZKUSDInStabPool = vars\\n                    .remainingZKUSDInStabPool\\n                    .sub(singleLiquidation.debtToOffset);\\n\\n                // Add liquidation values to their respective running totals\\n                totals = _addLiquidationValuesToTotals(\\n                    totals,\\n                    singleLiquidation\\n                );\\n            } else break; // break if the loop reaches a Trove with ICR >= MCR\\n\\n            vars.user = nextUser;\\n        }\\n    }\\n\\n    function _getTotalsFromLiquidateTrovesSequence_NormalMode(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        uint _price,\\n        uint _ZKUSDInStabPool,\\n        uint _n\\n    ) internal returns (LiquidationTotals memory totals) {\\n        LocalVariables_LiquidationSequence memory vars;\\n        LiquidationValues memory singleLiquidation;\\n        ISortedTroves sortedTrovesCached = sortedTroves;\\n\\n        vars.remainingZKUSDInStabPool = _ZKUSDInStabPool;\\n\\n        for (vars.i = 0; vars.i < _n; vars.i++) {\\n            vars.user = sortedTrovesCached.getLast();\\n            vars.ICR = getCurrentICR(vars.user, _price);\\n\\n            if (vars.ICR < MCR) {\\n                singleLiquidation = _liquidateNormalMode(\\n                    _activePool,\\n                    _defaultPool,\\n                    vars.user,\\n                    vars.remainingZKUSDInStabPool\\n                );\\n\\n                vars.remainingZKUSDInStabPool = vars\\n                    .remainingZKUSDInStabPool\\n                    .sub(singleLiquidation.debtToOffset);\\n\\n                // Add liquidation values to their respective running totals\\n                totals = _addLiquidationValuesToTotals(\\n                    totals,\\n                    singleLiquidation\\n                );\\n            } else break; // break if the loop reaches a Trove with ICR >= MCR\\n        }\\n    }\\n\\n    /*\\n     * Attempt to liquidate a custom list of troves provided by the caller.\\n     */\\n    function batchLiquidateTroves(\\n        address[] memory _troveArray,\\n        bytes[] calldata _updateData\\n    ) public payable override {\\n        require(\\n            _troveArray.length != 0,\\n            \\\"TroveManager: Calldata address array must not be empty\\\"\\n        );\\n\\n        IActivePool activePoolCached = activePool;\\n        IDefaultPool defaultPoolCached = defaultPool;\\n        IStabilityPool stabilityPoolCached = stabilityPool;\\n\\n        LocalVariables_OuterLiquidationFunction memory vars;\\n        LiquidationTotals memory totals;\\n\\n        vars.price = _requireCallerHasPriceFeedFee(_updateData);\\n        vars.ZKUSDInStabPool = stabilityPoolCached.getTotalZKUSDDeposits();\\n        vars.recoveryModeAtStart = _checkRecoveryMode(vars.price);\\n\\n        // Perform the appropriate liquidation sequence - tally values and obtain their totals.\\n        if (vars.recoveryModeAtStart) {\\n            totals = _getTotalFromBatchLiquidate_RecoveryMode(\\n                activePoolCached,\\n                defaultPoolCached,\\n                vars.price,\\n                vars.ZKUSDInStabPool,\\n                _troveArray\\n            );\\n        } else {\\n            //  if !vars.recoveryModeAtStart\\n            totals = _getTotalsFromBatchLiquidate_NormalMode(\\n                activePoolCached,\\n                defaultPoolCached,\\n                vars.price,\\n                vars.ZKUSDInStabPool,\\n                _troveArray\\n            );\\n        }\\n\\n        require(\\n            totals.totalDebtInSequence > 0,\\n            \\\"TroveManager: nothing to liquidate\\\"\\n        );\\n\\n        // Move liquidated ETH and ZKUSD to the appropriate pools\\n        stabilityPoolCached.offset(\\n            totals.totalDebtToOffset,\\n            totals.totalCollToSendToSP\\n        );\\n        _redistributeDebtAndColl(\\n            activePoolCached,\\n            defaultPoolCached,\\n            totals.totalDebtToRedistribute,\\n            totals.totalCollToRedistribute\\n        );\\n        if (totals.totalCollSurplus > 0) {\\n            activePoolCached.sendETH(\\n                address(collSurplusPool),\\n                totals.totalCollSurplus\\n            );\\n        }\\n\\n        // Update system snapshots\\n        _updateSystemSnapshots_excludeCollRemainder(\\n            activePoolCached,\\n            totals.totalCollGasCompensation\\n        );\\n\\n        vars.liquidatedDebt = totals.totalDebtInSequence;\\n        vars.liquidatedColl = totals\\n            .totalCollInSequence\\n            .sub(totals.totalCollGasCompensation)\\n            .sub(totals.totalCollSurplus);\\n        emit Liquidation(\\n            vars.liquidatedDebt,\\n            vars.liquidatedColl,\\n            totals.totalCollGasCompensation,\\n            totals.totalZKUSDGasCompensation\\n        );\\n\\n        // Send gas compensation to caller\\n        _sendGasCompensation(\\n            activePoolCached,\\n            msg.sender,\\n            totals.totalZKUSDGasCompensation,\\n            totals.totalCollGasCompensation\\n        );\\n    }\\n\\n    /*\\n     * This function is used when the batch liquidation sequence starts during Recovery Mode. However, it\\n     * handle the case where the system *leaves* Recovery Mode, part way through the liquidation sequence\\n     */\\n    function _getTotalFromBatchLiquidate_RecoveryMode(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        uint _price,\\n        uint _ZKUSDInStabPool,\\n        address[] memory _troveArray\\n    ) internal returns (LiquidationTotals memory totals) {\\n        LocalVariables_LiquidationSequence memory vars;\\n        LiquidationValues memory singleLiquidation;\\n\\n        vars.remainingZKUSDInStabPool = _ZKUSDInStabPool;\\n        vars.backToNormalMode = false;\\n        vars.entireSystemDebt = getEntireSystemDebt();\\n        vars.entireSystemColl = getEntireSystemColl();\\n\\n        for (vars.i = 0; vars.i < _troveArray.length; vars.i++) {\\n            vars.user = _troveArray[vars.i];\\n            // Skip non-active troves\\n            if (Troves[vars.user].status != Status.active) {\\n                continue;\\n            }\\n            vars.ICR = getCurrentICR(vars.user, _price);\\n\\n            if (!vars.backToNormalMode) {\\n                // Skip this trove if ICR is greater than MCR and Stability Pool is empty\\n                if (vars.ICR >= MCR && vars.remainingZKUSDInStabPool == 0) {\\n                    continue;\\n                }\\n\\n                uint TCR = LiquityMath._computeCR(\\n                    vars.entireSystemColl,\\n                    vars.entireSystemDebt,\\n                    _price\\n                );\\n\\n                singleLiquidation = _liquidateRecoveryMode(\\n                    _activePool,\\n                    _defaultPool,\\n                    vars.user,\\n                    vars.ICR,\\n                    vars.remainingZKUSDInStabPool,\\n                    TCR,\\n                    _price\\n                );\\n\\n                // Update aggregate trackers\\n                vars.remainingZKUSDInStabPool = vars\\n                    .remainingZKUSDInStabPool\\n                    .sub(singleLiquidation.debtToOffset);\\n                vars.entireSystemDebt = vars.entireSystemDebt.sub(\\n                    singleLiquidation.debtToOffset\\n                );\\n                vars.entireSystemColl = vars\\n                    .entireSystemColl\\n                    .sub(singleLiquidation.collToSendToSP)\\n                    .sub(singleLiquidation.collGasCompensation)\\n                    .sub(singleLiquidation.collSurplus);\\n\\n                // Add liquidation values to their respective running totals\\n                totals = _addLiquidationValuesToTotals(\\n                    totals,\\n                    singleLiquidation\\n                );\\n\\n                vars.backToNormalMode = !_checkPotentialRecoveryMode(\\n                    vars.entireSystemColl,\\n                    vars.entireSystemDebt,\\n                    _price\\n                );\\n            } else if (vars.backToNormalMode && vars.ICR < MCR) {\\n                singleLiquidation = _liquidateNormalMode(\\n                    _activePool,\\n                    _defaultPool,\\n                    vars.user,\\n                    vars.remainingZKUSDInStabPool\\n                );\\n                vars.remainingZKUSDInStabPool = vars\\n                    .remainingZKUSDInStabPool\\n                    .sub(singleLiquidation.debtToOffset);\\n\\n                // Add liquidation values to their respective running totals\\n                totals = _addLiquidationValuesToTotals(\\n                    totals,\\n                    singleLiquidation\\n                );\\n            } else continue; // In Normal Mode skip troves with ICR >= MCR\\n        }\\n    }\\n\\n    function _getTotalsFromBatchLiquidate_NormalMode(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        uint _price,\\n        uint _ZKUSDInStabPool,\\n        address[] memory _troveArray\\n    ) internal returns (LiquidationTotals memory totals) {\\n        LocalVariables_LiquidationSequence memory vars;\\n        LiquidationValues memory singleLiquidation;\\n\\n        vars.remainingZKUSDInStabPool = _ZKUSDInStabPool;\\n\\n        for (vars.i = 0; vars.i < _troveArray.length; vars.i++) {\\n            vars.user = _troveArray[vars.i];\\n            vars.ICR = getCurrentICR(vars.user, _price);\\n\\n            if (vars.ICR < MCR) {\\n                singleLiquidation = _liquidateNormalMode(\\n                    _activePool,\\n                    _defaultPool,\\n                    vars.user,\\n                    vars.remainingZKUSDInStabPool\\n                );\\n                vars.remainingZKUSDInStabPool = vars\\n                    .remainingZKUSDInStabPool\\n                    .sub(singleLiquidation.debtToOffset);\\n\\n                // Add liquidation values to their respective running totals\\n                totals = _addLiquidationValuesToTotals(\\n                    totals,\\n                    singleLiquidation\\n                );\\n            }\\n        }\\n    }\\n\\n    // --- Liquidation helper functions ---\\n\\n    function _addLiquidationValuesToTotals(\\n        LiquidationTotals memory oldTotals,\\n        LiquidationValues memory singleLiquidation\\n    ) internal pure returns (LiquidationTotals memory newTotals) {\\n        // Tally all the values with their respective running totals\\n        newTotals.totalCollGasCompensation = oldTotals\\n            .totalCollGasCompensation\\n            .add(singleLiquidation.collGasCompensation);\\n        newTotals.totalZKUSDGasCompensation = oldTotals\\n            .totalZKUSDGasCompensation\\n            .add(singleLiquidation.ZKUSDGasCompensation);\\n        newTotals.totalDebtInSequence = oldTotals.totalDebtInSequence.add(\\n            singleLiquidation.entireTroveDebt\\n        );\\n        newTotals.totalCollInSequence = oldTotals.totalCollInSequence.add(\\n            singleLiquidation.entireTroveColl\\n        );\\n        newTotals.totalDebtToOffset = oldTotals.totalDebtToOffset.add(\\n            singleLiquidation.debtToOffset\\n        );\\n        newTotals.totalCollToSendToSP = oldTotals.totalCollToSendToSP.add(\\n            singleLiquidation.collToSendToSP\\n        );\\n        newTotals.totalDebtToRedistribute = oldTotals\\n            .totalDebtToRedistribute\\n            .add(singleLiquidation.debtToRedistribute);\\n        newTotals.totalCollToRedistribute = oldTotals\\n            .totalCollToRedistribute\\n            .add(singleLiquidation.collToRedistribute);\\n        newTotals.totalCollSurplus = oldTotals.totalCollSurplus.add(\\n            singleLiquidation.collSurplus\\n        );\\n\\n        return newTotals;\\n    }\\n\\n    function _sendGasCompensation(\\n        IActivePool _activePool,\\n        address _liquidator,\\n        uint _ZKUSD,\\n        uint _ETH\\n    ) internal {\\n        if (_ZKUSD > 0) {\\n            zkusdToken.returnFromPool(gasPoolAddress, _liquidator, _ZKUSD);\\n        }\\n\\n        if (_ETH > 0) {\\n            _activePool.sendETH(_liquidator, _ETH);\\n        }\\n    }\\n\\n    // Move a Trove's pending debt and collateral rewards from distributions, from the Default Pool to the Active Pool\\n    function _movePendingTroveRewardsToActivePool(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        uint _ZKUSD,\\n        uint _ETH\\n    ) internal {\\n        _defaultPool.decreaseZKUSDDebt(_ZKUSD);\\n        _activePool.increaseZKUSDDebt(_ZKUSD);\\n        _defaultPool.sendETHToActivePool(_ETH);\\n    }\\n\\n    // --- Redemption functions ---\\n\\n    // Redeem as much collateral as possible from _borrower's Trove in exchange for ZKUSD up to _maxZKUSDamount\\n    function _redeemCollateralFromTrove(\\n        ContractsCache memory _contractsCache,\\n        address _borrower,\\n        uint _maxZKUSDamount,\\n        uint _price,\\n        address _upperPartialRedemptionHint,\\n        address _lowerPartialRedemptionHint,\\n        uint _partialRedemptionHintNICR\\n    ) internal returns (SingleRedemptionValues memory singleRedemption) {\\n        // Determine the remaining amount (lot) to be redeemed, capped by the entire debt of the Trove minus the liquidation reserve\\n        singleRedemption.ZKUSDLot = LiquityMath._min(\\n            _maxZKUSDamount,\\n            Troves[_borrower].debt.sub(ZKUSD_GAS_COMPENSATION)\\n        );\\n\\n        // Get the ETHLot of equivalent value in USD\\n        singleRedemption.ETHLot = singleRedemption\\n            .ZKUSDLot\\n            .mul(DECIMAL_PRECISION)\\n            .div(_price);\\n\\n        // Decrease the debt and collateral of the current Trove according to the ZKUSD lot and corresponding ETH to send\\n        uint newDebt = (Troves[_borrower].debt).sub(singleRedemption.ZKUSDLot);\\n        uint newColl = (Troves[_borrower].coll).sub(singleRedemption.ETHLot);\\n\\n        if (newDebt == ZKUSD_GAS_COMPENSATION) {\\n            // No debt left in the Trove (except for the liquidation reserve), therefore the trove gets closed\\n            _removeStake(_borrower);\\n            _closeTrove(_borrower, Status.closedByRedemption);\\n            _redeemCloseTrove(\\n                _contractsCache,\\n                _borrower,\\n                ZKUSD_GAS_COMPENSATION,\\n                newColl\\n            );\\n            emit TroveUpdated(\\n                _borrower,\\n                0,\\n                0,\\n                0,\\n                TroveManagerOperation.redeemCollateral\\n            );\\n        } else {\\n            uint newNICR = LiquityMath._computeNominalCR(newColl, newDebt);\\n\\n            /*\\n             * If the provided hint is out of date, we bail since trying to reinsert without a good hint will almost\\n             * certainly result in running out of gas.\\n             *\\n             * If the resultant net debt of the partial is less than the minimum, net debt we bail.\\n             */\\n            if (\\n                newNICR != _partialRedemptionHintNICR ||\\n                _getNetDebt(newDebt) < MIN_NET_DEBT\\n            ) {\\n                singleRedemption.cancelledPartial = true;\\n                return singleRedemption;\\n            }\\n\\n            _contractsCache.sortedTroves.reInsert(\\n                _borrower,\\n                newNICR,\\n                _upperPartialRedemptionHint,\\n                _lowerPartialRedemptionHint\\n            );\\n\\n            Troves[_borrower].debt = newDebt;\\n            Troves[_borrower].coll = newColl;\\n            _updateStakeAndTotalStakes(_borrower);\\n\\n            emit TroveUpdated(\\n                _borrower,\\n                newDebt,\\n                newColl,\\n                Troves[_borrower].stake,\\n                TroveManagerOperation.redeemCollateral\\n            );\\n        }\\n\\n        return singleRedemption;\\n    }\\n\\n    /*\\n     * Called when a full redemption occurs, and closes the trove.\\n     * The redeemer swaps (debt - liquidation reserve) ZKUSD for (debt - liquidation reserve) worth of ETH, so the ZKUSD liquidation reserve left corresponds to the remaining debt.\\n     * In order to close the trove, the ZKUSD liquidation reserve is burned, and the corresponding debt is removed from the active pool.\\n     * The debt recorded on the trove's struct is zero'd elswhere, in _closeTrove.\\n     * Any surplus ETH left in the trove, is sent to the Coll surplus pool, and can be later claimed by the borrower.\\n     */\\n    function _redeemCloseTrove(\\n        ContractsCache memory _contractsCache,\\n        address _borrower,\\n        uint _ZKUSD,\\n        uint _ETH\\n    ) internal {\\n        _contractsCache.zkusdToken.burn(gasPoolAddress, _ZKUSD);\\n        // Update Active Pool ZKUSD, and send ETH to account\\n        _contractsCache.activePool.decreaseZKUSDDebt(_ZKUSD);\\n\\n        // send ETH from Active Pool to CollSurplus Pool\\n        _contractsCache.collSurplusPool.accountSurplus(_borrower, _ETH);\\n        _contractsCache.activePool.sendETH(\\n            address(_contractsCache.collSurplusPool),\\n            _ETH\\n        );\\n    }\\n\\n    function _isValidFirstRedemptionHint(\\n        ISortedTroves _sortedTroves,\\n        address _firstRedemptionHint,\\n        uint _price\\n    ) internal view returns (bool) {\\n        if (\\n            _firstRedemptionHint == address(0) ||\\n            !_sortedTroves.contains(_firstRedemptionHint) ||\\n            getCurrentICR(_firstRedemptionHint, _price) < MCR\\n        ) {\\n            return false;\\n        }\\n\\n        address nextTrove = _sortedTroves.getNext(_firstRedemptionHint);\\n        return\\n            nextTrove == address(0) || getCurrentICR(nextTrove, _price) < MCR;\\n    }\\n\\n    function _foundCurrentBorrower(\\n        address _firstRedemptionHint,\\n        RedemptionTotals memory totals,\\n        ContractsCache memory contractsCache\\n    ) internal view returns (address currentBorrower) {\\n        if (\\n            _isValidFirstRedemptionHint(\\n                contractsCache.sortedTroves,\\n                _firstRedemptionHint,\\n                totals.price\\n            )\\n        ) {\\n            currentBorrower = _firstRedemptionHint;\\n        } else {\\n            currentBorrower = contractsCache.sortedTroves.getLast();\\n            // Find the first trove with ICR >= MCR\\n            while (\\n                currentBorrower != address(0) &&\\n                getCurrentICR(currentBorrower, totals.price) < MCR\\n            ) {\\n                currentBorrower = contractsCache.sortedTroves.getPrev(\\n                    currentBorrower\\n                );\\n            }\\n        }\\n    }\\n\\n    function _loopThroughTroves(\\n        uint _maxIterations,\\n        address _upperPartialRedemptionHint,\\n        address _lowerPartialRedemptionHint,\\n        uint _partialRedemptionHintNICR,\\n        address currentBorrower,\\n        RedemptionTotals memory totals,\\n        ContractsCache memory contractsCache\\n    )\\n        internal\\n        returns (\\n            uint totalZKUSDToRedeem,\\n            uint totalETHDrawn,\\n            uint remainingZKUSD\\n        )\\n    {\\n        // Loop through the Troves starting from the one with lowest collateral ratio until _amount of ZKUSD is exchanged for collateral\\n        if (_maxIterations == 0) {\\n            _maxIterations = uint(-1);\\n        }\\n        while (\\n            currentBorrower != address(0) &&\\n            totals.remainingZKUSD > 0 &&\\n            _maxIterations > 0\\n        ) {\\n            _maxIterations--;\\n            // Save the address of the Trove preceding the current one, before potentially modifying the list\\n            address nextUserToCheck = contractsCache.sortedTroves.getPrev(\\n                currentBorrower\\n            );\\n\\n            _applyPendingRewards(\\n                contractsCache.activePool,\\n                contractsCache.defaultPool,\\n                currentBorrower\\n            );\\n\\n            SingleRedemptionValues\\n                memory singleRedemption = _redeemCollateralFromTrove(\\n                    contractsCache,\\n                    currentBorrower,\\n                    totals.remainingZKUSD,\\n                    totals.price,\\n                    _upperPartialRedemptionHint,\\n                    _lowerPartialRedemptionHint,\\n                    _partialRedemptionHintNICR\\n                );\\n\\n            if (singleRedemption.cancelledPartial) break; // Partial redemption was cancelled (out-of-date hint, or new net debt < minimum), therefore we could not redeem from the last Trove\\n\\n            totals.totalZKUSDToRedeem = totals.totalZKUSDToRedeem.add(\\n                singleRedemption.ZKUSDLot\\n            );\\n            totals.totalETHDrawn = totals.totalETHDrawn.add(\\n                singleRedemption.ETHLot\\n            );\\n\\n            totals.remainingZKUSD = totals.remainingZKUSD.sub(\\n                singleRedemption.ZKUSDLot\\n            );\\n            currentBorrower = nextUserToCheck;\\n        }\\n        require(\\n            totals.totalETHDrawn > 0,\\n            \\\"TroveManager: Unable to redeem any amount\\\"\\n        );\\n        return (\\n            totals.totalZKUSDToRedeem,\\n            totals.totalETHDrawn,\\n            totals.remainingZKUSD\\n        );\\n    }\\n\\n    function redeemCollateral(\\n        uint _ZKUSDamount,\\n        address _firstRedemptionHint,\\n        address _upperPartialRedemptionHint,\\n        address _lowerPartialRedemptionHint,\\n        uint _partialRedemptionHintNICR,\\n        uint _maxIterations,\\n        uint _maxFeePercentage,\\n        bytes[] calldata _updateData\\n    ) external payable override {\\n        ContractsCache memory contractsCache = ContractsCache(\\n            activePool,\\n            defaultPool,\\n            zkusdToken,\\n            zktStaking,\\n            sortedTroves,\\n            collSurplusPool,\\n            gasPoolAddress\\n        );\\n        RedemptionTotals memory totals;\\n\\n        _requireValidMaxFeePercentage(_maxFeePercentage);\\n        _requireAfterBootstrapPeriod();\\n        totals.price = _requireCallerHasPriceFeedFee(_updateData);\\n        _requireTCRoverMCR(totals.price);\\n        _requireAmountGreaterThanZero(_ZKUSDamount);\\n        _requireZKUSDBalanceCoversRedemption(\\n            contractsCache.zkusdToken,\\n            msg.sender,\\n            _ZKUSDamount\\n        );\\n\\n        totals.totalZKUSDSupplyAtStart = getEntireSystemDebt();\\n        // Confirm redeemer's balance is less than total ZKUSD supply\\n        assert(\\n            contractsCache.zkusdToken.balanceOf(msg.sender) <=\\n                totals.totalZKUSDSupplyAtStart\\n        );\\n\\n        totals.remainingZKUSD = _ZKUSDamount;\\n        address currentBorrower = _foundCurrentBorrower(\\n            _firstRedemptionHint,\\n            totals,\\n            contractsCache\\n        );\\n        (\\n            totals.totalZKUSDToRedeem,\\n            totals.totalETHDrawn,\\n            totals.remainingZKUSD\\n        ) = _loopThroughTroves(\\n            _maxIterations,\\n            _upperPartialRedemptionHint,\\n            _lowerPartialRedemptionHint,\\n            _partialRedemptionHintNICR,\\n            currentBorrower,\\n            totals,\\n            contractsCache\\n        );\\n\\n        // Decay the baseRate due to time passed, and then increase it according to the size of this redemption.\\n        // Use the saved total ZKUSD supply value, from before it was reduced by the redemption.\\n        _updateBaseRateFromRedemption(\\n            totals.totalETHDrawn,\\n            totals.price,\\n            totals.totalZKUSDSupplyAtStart\\n        );\\n\\n        // Calculate the ETH fee\\n        totals.ETHFee = _getRedemptionFee(totals.totalETHDrawn);\\n\\n        _requireUserAcceptsFee(\\n            totals.ETHFee,\\n            totals.totalETHDrawn,\\n            _maxFeePercentage\\n        );\\n\\n        // Send the ETH fee to the ZKT staking contract\\n        contractsCache.activePool.sendETH(\\n            address(contractsCache.zktStaking),\\n            totals.ETHFee\\n        );\\n        contractsCache.zktStaking.increaseF_ETH(totals.ETHFee);\\n\\n        totals.ETHToSendToRedeemer = totals.totalETHDrawn.sub(totals.ETHFee);\\n\\n        emit Redemption(\\n            _ZKUSDamount,\\n            totals.totalZKUSDToRedeem,\\n            totals.totalETHDrawn,\\n            totals.ETHFee\\n        );\\n\\n        // Burn the total ZKUSD that is cancelled with debt, and send the redeemed ETH to msg.sender\\n        contractsCache.zkusdToken.burn(msg.sender, totals.totalZKUSDToRedeem);\\n        // Update Active Pool ZKUSD, and send ETH to account\\n        contractsCache.activePool.decreaseZKUSDDebt(totals.totalZKUSDToRedeem);\\n        contractsCache.activePool.sendETH(\\n            msg.sender,\\n            totals.ETHToSendToRedeemer\\n        );\\n    }\\n\\n    // --- Helper functions ---\\n\\n    // Return the nominal collateral ratio (ICR) of a given Trove, without the price. Takes a trove's pending coll and debt rewards from redistributions into account.\\n    function getNominalICR(\\n        address _borrower\\n    ) public view override returns (uint) {\\n        (uint currentETH, uint currentZKUSDDebt) = _getCurrentTroveAmounts(\\n            _borrower\\n        );\\n\\n        uint NICR = LiquityMath._computeNominalCR(currentETH, currentZKUSDDebt);\\n        return NICR;\\n    }\\n\\n    // Return the current collateral ratio (ICR) of a given Trove. Takes a trove's pending coll and debt rewards from redistributions into account.\\n    function getCurrentICR(\\n        address _borrower,\\n        uint _price\\n    ) public view override returns (uint) {\\n        (uint currentETH, uint currentZKUSDDebt) = _getCurrentTroveAmounts(\\n            _borrower\\n        );\\n\\n        uint ICR = LiquityMath._computeCR(currentETH, currentZKUSDDebt, _price);\\n        return ICR;\\n    }\\n\\n    function _getCurrentTroveAmounts(\\n        address _borrower\\n    ) internal view returns (uint, uint) {\\n        uint pendingETHReward = getPendingETHReward(_borrower);\\n        uint pendingZKUSDDebtReward = getPendingZKUSDDebtReward(_borrower);\\n\\n        uint currentETH = Troves[_borrower].coll.add(pendingETHReward);\\n        uint currentZKUSDDebt = Troves[_borrower].debt.add(\\n            pendingZKUSDDebtReward\\n        );\\n\\n        return (currentETH, currentZKUSDDebt);\\n    }\\n\\n    function applyPendingRewards(address _borrower) external override {\\n        _requireCallerIsBorrowerOperations();\\n        return _applyPendingRewards(activePool, defaultPool, _borrower);\\n    }\\n\\n    // Add the borrowers's coll and debt rewards earned from redistributions, to their Trove\\n    function _applyPendingRewards(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        address _borrower\\n    ) internal {\\n        if (hasPendingRewards(_borrower)) {\\n            _requireTroveIsActive(_borrower);\\n\\n            // Compute pending rewards\\n            uint pendingETHReward = getPendingETHReward(_borrower);\\n            uint pendingZKUSDDebtReward = getPendingZKUSDDebtReward(_borrower);\\n\\n            // Apply pending rewards to trove's state\\n            Troves[_borrower].coll = Troves[_borrower].coll.add(\\n                pendingETHReward\\n            );\\n            Troves[_borrower].debt = Troves[_borrower].debt.add(\\n                pendingZKUSDDebtReward\\n            );\\n\\n            _updateTroveRewardSnapshots(_borrower);\\n\\n            // Transfer from DefaultPool to ActivePool\\n            _movePendingTroveRewardsToActivePool(\\n                _activePool,\\n                _defaultPool,\\n                pendingZKUSDDebtReward,\\n                pendingETHReward\\n            );\\n\\n            emit TroveUpdated(\\n                _borrower,\\n                Troves[_borrower].debt,\\n                Troves[_borrower].coll,\\n                Troves[_borrower].stake,\\n                TroveManagerOperation.applyPendingRewards\\n            );\\n        }\\n    }\\n\\n    // Update borrower's snapshots of L_ETH and L_ZKUSDDebt to reflect the current values\\n    function updateTroveRewardSnapshots(address _borrower) external override {\\n        _requireCallerIsBorrowerOperations();\\n        return _updateTroveRewardSnapshots(_borrower);\\n    }\\n\\n    function _updateTroveRewardSnapshots(address _borrower) internal {\\n        rewardSnapshots[_borrower].ETH = L_ETH;\\n        rewardSnapshots[_borrower].ZKUSDDebt = L_ZKUSDDebt;\\n        emit TroveSnapshotsUpdated(_borrower, L_ETH, L_ZKUSDDebt);\\n    }\\n\\n    // Get the borrower's pending accumulated ETH reward, earned by their stake\\n    function getPendingETHReward(\\n        address _borrower\\n    ) public view override returns (uint) {\\n        uint snapshotETH = rewardSnapshots[_borrower].ETH;\\n        uint rewardPerUnitStaked = L_ETH.sub(snapshotETH);\\n\\n        if (\\n            rewardPerUnitStaked == 0 ||\\n            Troves[_borrower].status != Status.active\\n        ) {\\n            return 0;\\n        }\\n\\n        uint stake = Troves[_borrower].stake;\\n\\n        uint pendingETHReward = stake.mul(rewardPerUnitStaked).div(\\n            DECIMAL_PRECISION\\n        );\\n\\n        return pendingETHReward;\\n    }\\n\\n    // Get the borrower's pending accumulated ZKUSD reward, earned by their stake\\n    function getPendingZKUSDDebtReward(\\n        address _borrower\\n    ) public view override returns (uint) {\\n        uint snapshotZKUSDDebt = rewardSnapshots[_borrower].ZKUSDDebt;\\n        uint rewardPerUnitStaked = L_ZKUSDDebt.sub(snapshotZKUSDDebt);\\n\\n        if (\\n            rewardPerUnitStaked == 0 ||\\n            Troves[_borrower].status != Status.active\\n        ) {\\n            return 0;\\n        }\\n\\n        uint stake = Troves[_borrower].stake;\\n\\n        uint pendingZKUSDDebtReward = stake.mul(rewardPerUnitStaked).div(\\n            DECIMAL_PRECISION\\n        );\\n\\n        return pendingZKUSDDebtReward;\\n    }\\n\\n    function hasPendingRewards(\\n        address _borrower\\n    ) public view override returns (bool) {\\n        /*\\n         * A Trove has pending rewards if its snapshot is less than the current rewards per-unit-staked sum:\\n         * this indicates that rewards have occured since the snapshot was made, and the user therefore has\\n         * pending rewards\\n         */\\n        if (Troves[_borrower].status != Status.active) {\\n            return false;\\n        }\\n\\n        return (rewardSnapshots[_borrower].ETH < L_ETH);\\n    }\\n\\n    // Return the Troves entire debt and coll, including pending rewards from redistributions.\\n    function getEntireDebtAndColl(\\n        address _borrower\\n    )\\n        public\\n        view\\n        override\\n        returns (\\n            uint debt,\\n            uint coll,\\n            uint pendingZKUSDDebtReward,\\n            uint pendingETHReward\\n        )\\n    {\\n        debt = Troves[_borrower].debt;\\n        coll = Troves[_borrower].coll;\\n\\n        pendingZKUSDDebtReward = getPendingZKUSDDebtReward(_borrower);\\n        pendingETHReward = getPendingETHReward(_borrower);\\n\\n        debt = debt.add(pendingZKUSDDebtReward);\\n        coll = coll.add(pendingETHReward);\\n    }\\n\\n    function removeStake(address _borrower) external override {\\n        _requireCallerIsBorrowerOperations();\\n        return _removeStake(_borrower);\\n    }\\n\\n    // Remove borrower's stake from the totalStakes sum, and set their stake to 0\\n    function _removeStake(address _borrower) internal {\\n        uint stake = Troves[_borrower].stake;\\n        totalStakes = totalStakes.sub(stake);\\n        Troves[_borrower].stake = 0;\\n    }\\n\\n    function updateStakeAndTotalStakes(\\n        address _borrower\\n    ) external override returns (uint) {\\n        _requireCallerIsBorrowerOperations();\\n        return _updateStakeAndTotalStakes(_borrower);\\n    }\\n\\n    // Update borrower's stake based on their latest collateral value\\n    function _updateStakeAndTotalStakes(\\n        address _borrower\\n    ) internal returns (uint) {\\n        uint newStake = _computeNewStake(Troves[_borrower].coll);\\n        uint oldStake = Troves[_borrower].stake;\\n        Troves[_borrower].stake = newStake;\\n\\n        totalStakes = totalStakes.sub(oldStake).add(newStake);\\n        emit TotalStakesUpdated(totalStakes);\\n\\n        return newStake;\\n    }\\n\\n    // Calculate a new stake based on the snapshots of the totalStakes and totalCollateral taken at the last liquidation\\n    function _computeNewStake(uint _coll) internal view returns (uint) {\\n        uint stake;\\n        if (totalCollateralSnapshot == 0) {\\n            stake = _coll;\\n        } else {\\n            assert(totalStakesSnapshot > 0);\\n            stake = _coll.mul(totalStakesSnapshot).div(totalCollateralSnapshot);\\n        }\\n        return stake;\\n    }\\n\\n    function _redistributeDebtAndColl(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        uint _debt,\\n        uint _coll\\n    ) internal {\\n        if (_debt == 0) {\\n            return;\\n        }\\n\\n        uint ETHNumerator = _coll.mul(DECIMAL_PRECISION).add(\\n            lastETHError_Redistribution\\n        );\\n        uint ZKUSDDebtNumerator = _debt.mul(DECIMAL_PRECISION).add(\\n            lastZKUSDDebtError_Redistribution\\n        );\\n\\n        // Get the per-unit-staked terms\\n        uint ETHRewardPerUnitStaked = ETHNumerator.div(totalStakes);\\n        uint ZKUSDDebtRewardPerUnitStaked = ZKUSDDebtNumerator.div(totalStakes);\\n\\n        lastETHError_Redistribution = ETHNumerator.sub(\\n            ETHRewardPerUnitStaked.mul(totalStakes)\\n        );\\n        lastZKUSDDebtError_Redistribution = ZKUSDDebtNumerator.sub(\\n            ZKUSDDebtRewardPerUnitStaked.mul(totalStakes)\\n        );\\n\\n        // Add per-unit-staked terms to the running totals\\n        L_ETH = L_ETH.add(ETHRewardPerUnitStaked);\\n        L_ZKUSDDebt = L_ZKUSDDebt.add(ZKUSDDebtRewardPerUnitStaked);\\n\\n        emit LTermsUpdated(L_ETH, L_ZKUSDDebt);\\n\\n        // Transfer coll and debt from ActivePool to DefaultPool\\n        _activePool.decreaseZKUSDDebt(_debt);\\n        _defaultPool.increaseZKUSDDebt(_debt);\\n        _activePool.sendETH(address(_defaultPool), _coll);\\n    }\\n\\n    function closeTrove(address _borrower) external override {\\n        _requireCallerIsBorrowerOperations();\\n        return _closeTrove(_borrower, Status.closedByOwner);\\n    }\\n\\n    function _closeTrove(address _borrower, Status closedStatus) internal {\\n        assert(\\n            closedStatus != Status.nonExistent && closedStatus != Status.active\\n        );\\n\\n        uint TroveOwnersArrayLength = TroveOwners.length;\\n        _requireMoreThanOneTroveInSystem(TroveOwnersArrayLength);\\n\\n        Troves[_borrower].status = closedStatus;\\n        Troves[_borrower].coll = 0;\\n        Troves[_borrower].debt = 0;\\n\\n        rewardSnapshots[_borrower].ETH = 0;\\n        rewardSnapshots[_borrower].ZKUSDDebt = 0;\\n\\n        _removeTroveOwner(_borrower, TroveOwnersArrayLength);\\n        sortedTroves.remove(_borrower);\\n    }\\n\\n    /*\\n     * Updates snapshots of system total stakes and total collateral, excluding a given collateral remainder from the calculation.\\n     * Used in a liquidation sequence.\\n     *\\n     * The calculation excludes a portion of collateral that is in the ActivePool:\\n     *\\n     * the total ETH gas compensation from the liquidation sequence\\n     *\\n     * The ETH as compensation must be excluded as it is always sent out at the very end of the liquidation sequence.\\n     */\\n    function _updateSystemSnapshots_excludeCollRemainder(\\n        IActivePool _activePool,\\n        uint _collRemainder\\n    ) internal {\\n        totalStakesSnapshot = totalStakes;\\n\\n        uint activeColl = _activePool.getETH();\\n        uint liquidatedColl = defaultPool.getETH();\\n        totalCollateralSnapshot = activeColl.sub(_collRemainder).add(\\n            liquidatedColl\\n        );\\n\\n        emit SystemSnapshotsUpdated(\\n            totalStakesSnapshot,\\n            totalCollateralSnapshot\\n        );\\n    }\\n\\n    // Push the owner's address to the Trove owners list, and record the corresponding array index on the Trove struct\\n    function addTroveOwnerToArray(\\n        address _borrower\\n    ) external override returns (uint index) {\\n        _requireCallerIsBorrowerOperations();\\n        return _addTroveOwnerToArray(_borrower);\\n    }\\n\\n    function _addTroveOwnerToArray(\\n        address _borrower\\n    ) internal returns (uint128 index) {\\n        /* Max array size is 2**128 - 1, i.e. ~3e30 troves. No risk of overflow, since troves have minimum ZKUSD\\n        debt of liquidation reserve plus MIN_NET_DEBT. 3e30 ZKUSD dwarfs the value of all wealth in the world ( which is < 1e15 USD). */\\n\\n        // Push the Troveowner to the array\\n        TroveOwners.push(_borrower);\\n\\n        // Record the index of the new Troveowner on their Trove struct\\n        index = uint128(TroveOwners.length.sub(1));\\n        Troves[_borrower].arrayIndex = index;\\n\\n        return index;\\n    }\\n\\n    /*\\n     * Remove a Trove owner from the TroveOwners array, not preserving array order. Removing owner 'B' does the following:\\n     * [A B C D E] => [A E C D], and updates E's Trove struct to point to its new array index.\\n     */\\n    function _removeTroveOwner(\\n        address _borrower,\\n        uint TroveOwnersArrayLength\\n    ) internal {\\n        Status troveStatus = Troves[_borrower].status;\\n        // It\\u2019s set in caller function `_closeTrove`\\n        assert(\\n            troveStatus != Status.nonExistent && troveStatus != Status.active\\n        );\\n\\n        uint128 index = Troves[_borrower].arrayIndex;\\n        uint length = TroveOwnersArrayLength;\\n        uint idxLast = length.sub(1);\\n\\n        assert(index <= idxLast);\\n\\n        address addressToMove = TroveOwners[idxLast];\\n\\n        TroveOwners[index] = addressToMove;\\n        Troves[addressToMove].arrayIndex = index;\\n        emit TroveIndexUpdated(addressToMove, index);\\n\\n        TroveOwners.pop();\\n    }\\n\\n    // --- Recovery Mode and TCR functions ---\\n\\n    function getTCR(uint _price) external view override returns (uint) {\\n        return _getTCR(_price);\\n    }\\n\\n    function checkRecoveryMode(\\n        uint _price\\n    ) external view override returns (bool) {\\n        return _checkRecoveryMode(_price);\\n    }\\n\\n    // Check whether or not the system *would be* in Recovery Mode, given an ETH:USD price, and the entire system coll and debt.\\n    function _checkPotentialRecoveryMode(\\n        uint _entireSystemColl,\\n        uint _entireSystemDebt,\\n        uint _price\\n    ) internal pure returns (bool) {\\n        uint TCR = LiquityMath._computeCR(\\n            _entireSystemColl,\\n            _entireSystemDebt,\\n            _price\\n        );\\n\\n        return TCR < CCR;\\n    }\\n\\n    // --- Redemption fee functions ---\\n\\n    /*\\n     * This function has two impacts on the baseRate state variable:\\n     * 1) decays the baseRate based on time passed since last redemption or ZKUSD borrowing operation.\\n     * then,\\n     * 2) increases the baseRate based on the amount redeemed, as a proportion of total supply\\n     */\\n    function _updateBaseRateFromRedemption(\\n        uint _ETHDrawn,\\n        uint _price,\\n        uint _totalZKUSDSupply\\n    ) internal returns (uint) {\\n        uint decayedBaseRate = _calcDecayedBaseRate();\\n\\n        /* Convert the drawn ETH back to ZKUSD at face value rate (1 ZKUSD:1 USD), in order to get\\n         * the fraction of total supply that was redeemed at face value. */\\n        uint redeemedZKUSDFraction = _ETHDrawn.mul(_price).div(\\n            _totalZKUSDSupply\\n        );\\n\\n        uint newBaseRate = decayedBaseRate.add(redeemedZKUSDFraction.div(BETA));\\n        newBaseRate = LiquityMath._min(newBaseRate, DECIMAL_PRECISION); // cap baseRate at a maximum of 100%\\n        //assert(newBaseRate <= DECIMAL_PRECISION); // This is already enforced in the line above\\n        assert(newBaseRate > 0); // Base rate is always non-zero after redemption\\n\\n        // Update the baseRate state variable\\n        baseRate = newBaseRate;\\n        emit BaseRateUpdated(newBaseRate);\\n\\n        _updateLastFeeOpTime();\\n\\n        return newBaseRate;\\n    }\\n\\n    function getRedemptionRate() public view override returns (uint) {\\n        return _calcRedemptionRate(baseRate);\\n    }\\n\\n    function getRedemptionRateWithDecay() public view override returns (uint) {\\n        return _calcRedemptionRate(_calcDecayedBaseRate());\\n    }\\n\\n    function _calcRedemptionRate(uint _baseRate) internal pure returns (uint) {\\n        return\\n            LiquityMath._min(\\n                REDEMPTION_FEE_FLOOR.add(_baseRate),\\n                DECIMAL_PRECISION // cap at a maximum of 100%\\n            );\\n    }\\n\\n    function _getRedemptionFee(uint _ETHDrawn) internal view returns (uint) {\\n        return _calcRedemptionFee(getRedemptionRate(), _ETHDrawn);\\n    }\\n\\n    function getRedemptionFeeWithDecay(\\n        uint _ETHDrawn\\n    ) external view override returns (uint) {\\n        return _calcRedemptionFee(getRedemptionRateWithDecay(), _ETHDrawn);\\n    }\\n\\n    function _calcRedemptionFee(\\n        uint _redemptionRate,\\n        uint _ETHDrawn\\n    ) internal pure returns (uint) {\\n        uint redemptionFee = _redemptionRate.mul(_ETHDrawn).div(\\n            DECIMAL_PRECISION\\n        );\\n        require(\\n            redemptionFee < _ETHDrawn,\\n            \\\"TroveManager: Fee would eat up all returned collateral\\\"\\n        );\\n        return redemptionFee;\\n    }\\n\\n    // --- Borrowing fee functions ---\\n\\n    function getBorrowingRate() public view override returns (uint) {\\n        return _calcBorrowingRate(baseRate);\\n    }\\n\\n    function getBorrowingRateWithDecay() public view override returns (uint) {\\n        return _calcBorrowingRate(_calcDecayedBaseRate());\\n    }\\n\\n    function _calcBorrowingRate(uint _baseRate) internal pure returns (uint) {\\n        return\\n            LiquityMath._min(\\n                BORROWING_FEE_FLOOR.add(_baseRate),\\n                MAX_BORROWING_FEE\\n            );\\n    }\\n\\n    function getBorrowingFee(\\n        uint _ZKUSDDebt\\n    ) external view override returns (uint) {\\n        return _calcBorrowingFee(getBorrowingRate(), _ZKUSDDebt);\\n    }\\n\\n    function getBorrowingFeeWithDecay(\\n        uint _ZKUSDDebt\\n    ) external view override returns (uint) {\\n        return _calcBorrowingFee(getBorrowingRateWithDecay(), _ZKUSDDebt);\\n    }\\n\\n    function _calcBorrowingFee(\\n        uint _borrowingRate,\\n        uint _ZKUSDDebt\\n    ) internal pure returns (uint) {\\n        return _borrowingRate.mul(_ZKUSDDebt).div(DECIMAL_PRECISION);\\n    }\\n\\n    // Updates the baseRate state variable based on time elapsed since the last redemption or ZKUSD borrowing operation.\\n    function decayBaseRateFromBorrowing() external override {\\n        _requireCallerIsBorrowerOperations();\\n\\n        uint decayedBaseRate = _calcDecayedBaseRate();\\n        assert(decayedBaseRate <= DECIMAL_PRECISION); // The baseRate can decay to 0\\n\\n        baseRate = decayedBaseRate;\\n        emit BaseRateUpdated(decayedBaseRate);\\n\\n        _updateLastFeeOpTime();\\n    }\\n\\n    // --- Internal fee functions ---\\n\\n    // Update the last fee operation time only if time passed >= decay interval. This prevents base rate griefing.\\n    function _updateLastFeeOpTime() internal {\\n        uint timePassed = block.timestamp.sub(lastFeeOperationTime);\\n\\n        if (timePassed >= SECONDS_IN_ONE_MINUTE) {\\n            lastFeeOperationTime = block.timestamp;\\n            emit LastFeeOpTimeUpdated(block.timestamp);\\n        }\\n    }\\n\\n    function _calcDecayedBaseRate() internal view returns (uint) {\\n        uint minutesPassed = _minutesPassedSinceLastFeeOp();\\n        uint decayFactor = LiquityMath._decPow(\\n            MINUTE_DECAY_FACTOR,\\n            minutesPassed\\n        );\\n\\n        return baseRate.mul(decayFactor).div(DECIMAL_PRECISION);\\n    }\\n\\n    function _minutesPassedSinceLastFeeOp() internal view returns (uint) {\\n        return\\n            (block.timestamp.sub(lastFeeOperationTime)).div(\\n                SECONDS_IN_ONE_MINUTE\\n            );\\n    }\\n\\n    // --- 'require' wrapper functions ---\\n\\n    function _requireCallerHasPriceFeedFee(\\n        bytes[] calldata _updateData\\n    ) internal returns (uint) {\\n        uint _fee = priceFeed.fetchUpdateFee(_updateData);\\n        return priceFeed.fetchPullPrice{value: _fee}(_fee, _updateData);\\n    }\\n\\n    function _requireCallerIsBorrowerOperations() internal view {\\n        require(\\n            msg.sender == borrowerOperationsAddress,\\n            \\\"TroveManager: Caller is not the BorrowerOperations contract\\\"\\n        );\\n    }\\n\\n    function _requireTroveIsActive(address _borrower) internal view {\\n        require(\\n            Troves[_borrower].status == Status.active,\\n            \\\"TroveManager: Trove does not exist or is closed\\\"\\n        );\\n    }\\n\\n    function _requireZKUSDBalanceCoversRedemption(\\n        IZKUSDToken _zkusdToken,\\n        address _redeemer,\\n        uint _amount\\n    ) internal view {\\n        require(\\n            _zkusdToken.balanceOf(_redeemer) >= _amount,\\n            \\\"TroveManager: Requested redemption amount must be <= user's ZKUSD token balance\\\"\\n        );\\n    }\\n\\n    function _requireMoreThanOneTroveInSystem(\\n        uint TroveOwnersArrayLength\\n    ) internal view {\\n        require(\\n            TroveOwnersArrayLength > 1 && sortedTroves.getSize() > 1,\\n            \\\"TroveManager: Only one trove in the system\\\"\\n        );\\n    }\\n\\n    function _requireAmountGreaterThanZero(uint _amount) internal pure {\\n        require(_amount > 0, \\\"TroveManager: Amount must be greater than zero\\\");\\n    }\\n\\n    function _requireTCRoverMCR(uint _price) internal view {\\n        require(\\n            _getTCR(_price) >= MCR,\\n            \\\"TroveManager: Cannot redeem when TCR < MCR\\\"\\n        );\\n    }\\n\\n    function _requireAfterBootstrapPeriod() internal view {\\n        uint systemDeploymentTime = zkToken.getDeploymentStartTime();\\n        require(\\n            block.timestamp >= systemDeploymentTime.add(BOOTSTRAP_PERIOD),\\n            \\\"TroveManager: Redemptions are not allowed during bootstrap phase\\\"\\n        );\\n    }\\n\\n    function _requireValidMaxFeePercentage(\\n        uint _maxFeePercentage\\n    ) internal pure {\\n        require(\\n            _maxFeePercentage >= REDEMPTION_FEE_FLOOR &&\\n                _maxFeePercentage <= DECIMAL_PRECISION,\\n            \\\"Max fee percentage must be between 0.5% and 100%\\\"\\n        );\\n    }\\n\\n    // --- Trove property getters ---\\n\\n    function getTroveStatus(\\n        address _borrower\\n    ) external view override returns (uint) {\\n        return uint(Troves[_borrower].status);\\n    }\\n\\n    function getTroveStake(\\n        address _borrower\\n    ) external view override returns (uint) {\\n        return Troves[_borrower].stake;\\n    }\\n\\n    function getTroveDebt(\\n        address _borrower\\n    ) external view override returns (uint) {\\n        return Troves[_borrower].debt;\\n    }\\n\\n    function getTroveColl(\\n        address _borrower\\n    ) external view override returns (uint) {\\n        return Troves[_borrower].coll;\\n    }\\n\\n    // --- Trove property setters, called by BorrowerOperations ---\\n\\n    function setTroveStatus(address _borrower, uint _num) external override {\\n        _requireCallerIsBorrowerOperations();\\n        Troves[_borrower].status = Status(_num);\\n    }\\n\\n    function increaseTroveColl(\\n        address _borrower,\\n        uint _collIncrease\\n    ) external override returns (uint) {\\n        _requireCallerIsBorrowerOperations();\\n        uint newColl = Troves[_borrower].coll.add(_collIncrease);\\n        Troves[_borrower].coll = newColl;\\n        return newColl;\\n    }\\n\\n    function decreaseTroveColl(\\n        address _borrower,\\n        uint _collDecrease\\n    ) external override returns (uint) {\\n        _requireCallerIsBorrowerOperations();\\n        uint newColl = Troves[_borrower].coll.sub(_collDecrease);\\n        Troves[_borrower].coll = newColl;\\n        return newColl;\\n    }\\n\\n    function increaseTroveDebt(\\n        address _borrower,\\n        uint _debtIncrease\\n    ) external override returns (uint) {\\n        _requireCallerIsBorrowerOperations();\\n        uint newDebt = Troves[_borrower].debt.add(_debtIncrease);\\n        Troves[_borrower].debt = newDebt;\\n        return newDebt;\\n    }\\n\\n    function decreaseTroveDebt(\\n        address _borrower,\\n        uint _debtDecrease\\n    ) external override returns (uint) {\\n        _requireCallerIsBorrowerOperations();\\n        uint newDebt = Troves[_borrower].debt.sub(_debtDecrease);\\n        Troves[_borrower].debt = newDebt;\\n        return newDebt;\\n    }\\n}\\n\",\"keccak256\":\"0x75008e583c32be84657ccad8fa15b9bfff151440bf9e2f10eba5c3cf18f137ff\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526802b5e3af16b18800006002556818650127cc3dc8000060035534801561002a57600080fd5b50600080546001600160a01b0319163390811782556040519091907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3615f69806200007a6000396000f3fe6080604052600436106104095760003560e01c8063795d26c311610215578063b91af97c11610124578063d3d6f843116100b1578063d3d6f84314610b5b578063d5b3563514610b7b578063d66a255314610b9b578063d9a7244414610bbb578063da8c229e14610bdb578063e0dba60f14610bfb578063e2ac77b014610c1b578063e34341ab14610c3b578063f36b242514610c50578063f92d34331461056a578063fe2ba84814610c6557610409565b8063b91af97c14610a4d578063bf9befb114610a7d578063c192645b14610a92578063c35bc55014610aa7578063c52861f214610abc578063c7b5548114610ad1578063cbd138ae14610ae6578063d0029b5114610b06578063d293c71014610b26578063d380a37c14610b4657610409565b806396d711ff116101a257806396d711ff146109645780639976cf45146109795780639dd233d214610999578063a20baee61461081d578063a3f4df7e146109ae578063ad1c3e62146109d0578063ae918754146109e3578063b0d8e181146109f8578063b7f8cf9b14610a18578063b82f263d14610a2d57610409565b8063795d26c31461087c578063797250e3146108915780637985c5e4146108a65780637d8c87aa146108c65780637f7dde4a146108db578063807d138d146108f057806382fe3eb914610905578063887105d3146109255780638da5cb5b1461093a5780638f32d59b1461094f57610409565b8063480cd5781161031c57806361ec893d116102a957806361ec893d1461074f578063631203b01461076457806364cee2601461078457806366ca4a21146107a45780636bf96eda146107b95780636ef64338146107cc57806372423c17146107fd57806372fe25aa1461081d578063741bef1a14610832578063756b253e14610847578063794e57241461086757610409565b8063480cd578146106465780634870dd9a1461066657806349eefeee1461067b5780634e443d9e146106905780635733d58f146106bd5780635d6b480f146106d25780635d8c9609146106f25780635dba4c4a146107125780635e2084d01461072757806360ac128f1461073c57610409565b8063240926691161039a578063240926691461055557806328d28b5b1461056a5780632b11551a1461057f57806335a3f707146105945780633cc74225146105a957806343712f5a146105be57806343833a7f146105d3578063438d641a146105f3578063472b286f14610613578063477d66cf1461062657610409565b8063048c661d1461040e578063071a7541146104395780630b0765571461045b57806312610e921461047d57806315d549f11461049d5780631673c79a146104bd57806318f2817a146104eb5780631bf435551461050b5780631f68f20a1461052057806321e3780114610535575b600080fd5b34801561041a57600080fd5b50610423610c85565b604051610430919061575d565b60405180910390f35b34801561044557600080fd5b5061044e610c94565b6040516104309190615e2c565b34801561046757600080fd5b5061047b610476366004615308565b610c99565b005b34801561048957600080fd5b5061044e6104983660046154a9565b610cc1565b3480156104a957600080fd5b5061044e6104b8366004615308565b610d19565b3480156104c957600080fd5b506104dd6104d8366004615308565b610d3d565b604051610430929190615e4f565b3480156104f757600080fd5b5061044e610506366004615308565b610d56565b34801561051757600080fd5b5061044e610d69565b34801561052c57600080fd5b5061044e610d6f565b34801561054157600080fd5b5061044e610550366004615308565b610d75565b34801561056157600080fd5b5061044e610d9f565b34801561057657600080fd5b5061044e610db2565b34801561058b57600080fd5b5061044e610dc3565b3480156105a057600080fd5b50610423610dd5565b3480156105b557600080fd5b50610423610de4565b3480156105ca57600080fd5b5061044e610df3565b3480156105df57600080fd5b5061044e6105ee366004615308565b610df9565b3480156105ff57600080fd5b5061047b61060e3660046155b3565b610ec2565b61047b6106213660046155e3565b610eff565b34801561063257600080fd5b5061044e6106413660046155b3565b611328565b34801561065257600080fd5b5061044e610661366004615308565b61133b565b34801561067257600080fd5b5061044e611359565b34801561068757600080fd5b5061044e61135e565b34801561069c57600080fd5b506106b06106ab3660046155b3565b611364565b6040516104309190615830565b3480156106c957600080fd5b5061044e61136f565b3480156106de57600080fd5b5061047b6106ed3660046154a9565b61137b565b3480156106fe57600080fd5b5061044e61070d366004615308565b6113c7565b34801561071e57600080fd5b5061047b6113f5565b34801561073357600080fd5b5061044e611460565b61047b61074a366004615684565b611466565b34801561075b57600080fd5b5061044e611784565b34801561077057600080fd5b5061044e61077f3660046155b3565b611789565b34801561079057600080fd5b5061044e61079f366004615308565b611796565b3480156107b057600080fd5b5061044e6117b4565b61047b6107c73660046154d4565b6117c6565b3480156107d857600080fd5b506107ec6107e7366004615308565b611a9f565b604051610430959493929190615e78565b34801561080957600080fd5b5061044e6108183660046154a9565b611ad9565b34801561082957600080fd5b5061044e611b36565b34801561083e57600080fd5b50610423611b42565b34801561085357600080fd5b506104236108623660046155b3565b611b51565b34801561087357600080fd5b5061044e611b78565b34801561088857600080fd5b5061044e611b84565b34801561089d57600080fd5b5061044e611ca3565b3480156108b257600080fd5b5061047b6108c1366004615340565b611ca9565b3480156108d257600080fd5b50610423612039565b3480156108e757600080fd5b50610423612048565b3480156108fc57600080fd5b5061044e612057565b34801561091157600080fd5b5061047b610920366004615308565b61205d565b34801561093157600080fd5b5061044e61206e565b34801561094657600080fd5b5061042361213c565b34801561095b57600080fd5b506106b061214b565b34801561097057600080fd5b5061044e61215c565b34801561098557600080fd5b5061044e6109943660046154a9565b612162565b3480156109a557600080fd5b5061044e612195565b3480156109ba57600080fd5b506109c361219b565b604051610430919061585d565b61047b6109de36600461541f565b6121c3565b3480156109ef57600080fd5b5061042361222d565b348015610a0457600080fd5b5061044e610a13366004615308565b61223c565b348015610a2457600080fd5b50610423612263565b348015610a3957600080fd5b5061044e610a483660046155b3565b612272565b348015610a5957600080fd5b50610a6d610a68366004615308565b61227d565b6040516104309493929190615eb8565b348015610a8957600080fd5b5061044e6122e1565b348015610a9e57600080fd5b5061044e6122e7565b348015610ab357600080fd5b5061044e6122ed565b348015610ac857600080fd5b5061044e6122f4565b348015610add57600080fd5b5061044e612306565b348015610af257600080fd5b5061047b610b01366004615308565b612312565b348015610b1257600080fd5b5061047b610b213660046155b3565b612325565b348015610b3257600080fd5b5061044e610b413660046154a9565b612359565b348015610b5257600080fd5b5061044e612378565b348015610b6757600080fd5b5061044e610b763660046154a9565b61237e565b348015610b8757600080fd5b5061044e610b963660046155b3565b6123b4565b348015610ba757600080fd5b5061044e610bb6366004615308565b6123c7565b348015610bc757600080fd5b50610423610bd63660046155b3565b6123e2565b348015610be757600080fd5b506106b0610bf6366004615308565b61240c565b348015610c0757600080fd5b5061047b610c16366004615471565b612421565b348015610c2757600080fd5b506106b0610c36366004615308565b6124a5565b348015610c4757600080fd5b50610423612503565b348015610c5c57600080fd5b5061044e612512565b348015610c7157600080fd5b5061047b610c80366004615308565b61251f565b6008546001600160a01b031681565b600281565b610ca1612530565b600454600554610cbe916001600160a01b0390811691168361255c565b50565b6000610ccb612530565b6001600160a01b038316600090815260116020526040812054610cf4908463ffffffff61266e16565b6001600160a01b03851660009081526011602052604090208190559150505b92915050565b6000610d23612530565b610d2c826126b7565b6001600160801b031690505b919050565b6017602052600090815260409020805460019091015482565b6000610d60612530565b610d1382612751565b60035481565b600f5481565b6001600160a01b03811660009081526011602052604081206003015460ff166004811115610d1357fe5b6064670de0b6b3a76400005b0460050281565b6103e8670de0b6b3a7640000610dab565b6000610dd0600f54612804565b905090565b600b546001600160a01b031681565b6005546001600160a01b031681565b60165481565b6001600160a01b0381166000908152601760205260408120600101546016548290610e2a908363ffffffff61266e16565b9050801580610e63575060016001600160a01b03851660009081526011602052604090206003015460ff166004811115610e6057fe5b14155b15610e7357600092505050610d38565b6001600160a01b03841660009081526011602052604081206002015490610eb8670de0b6b3a7640000610eac848663ffffffff61283a16565b9063ffffffff61287416565b9695505050505050565b3360009081526001602052604090205460ff16610efa5760405162461bcd60e51b8152600401610ef19061592e565b60405180910390fd5b600355565b610f0761512b565b506040805160e0810182526004546001600160a01b03908116825260055481166020830152600b54811692820192909252600d5482166060820152600e5482166080820152600a54821660a082015260095490911660c0820152610f69615167565b610f72856128b3565b610f7a6128ee565b610f84848461299f565b60c08201819052610f9490612ab7565b610f9d8b612ae7565b610fac8260400151338d612b07565b610fb4611b84565b60e0820181905260408084015190516370a0823160e01b81526001600160a01b03909116906370a0823190610fed90339060040161575d565b60206040518083038186803b15801561100557600080fd5b505afa158015611019573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103d91906155cb565b111561104557fe5b8a815260006110558b8385612ba3565b9050611066878b8b8b858789612cf4565b845260408401819052602084019190915260c083015160e084015161108c929190612e95565b5061109a8260400151612f42565b6060830181905260408301516110b1919088612f4f565b8251606080850151908401516040516364a197f360e01b81526001600160a01b03909316926364a197f3926110ea929091600401615771565b600060405180830381600087803b15801561110457600080fd5b505af1158015611118573d6000803e3d6000fd5b5050505082606001516001600160a01b0316631e3e2a1a83606001516040518263ffffffff1660e01b81526004016111509190615e2c565b600060405180830381600087803b15801561116a57600080fd5b505af115801561117e573d6000803e3d6000fd5b50505050606082015160408301516111959161266e565b8260800181815250507f43a3f4082a4dbc33d78e317d2497d3a730bc7fc3574159dcea1056e62e5d9ad88c8360200151846040015185606001516040516111df9493929190615eb8565b60405180910390a182604001516001600160a01b0316639dc29fac3384602001516040518363ffffffff1660e01b815260040161121d929190615771565b600060405180830381600087803b15801561123757600080fd5b505af115801561124b573d6000803e3d6000fd5b5050845160208501516040516305af902160e31b81526001600160a01b039092169350632d7c8108925061128191600401615e2c565b600060405180830381600087803b15801561129b57600080fd5b505af11580156112af573d6000803e3d6000fd5b5050845160808501516040516364a197f360e01b81526001600160a01b0390921693506364a197f392506112e891339190600401615771565b600060405180830381600087803b15801561130257600080fd5b505af1158015611316573d6000803e3d6000fd5b50505050505050505050505050505050565b6000610d136113356117b4565b83612f8f565b6001600160a01b031660009081526011602052604090206001015490565b60c881565b60185490565b6000610d1382612fad565b6714d1120d7b16000081565b611383612530565b80600481111561138f57fe5b6001600160a01b0383166000908152601160205260409020600301805460ff191660018360048111156113be57fe5b02179055505050565b6001600160a01b0381166000908152601760205260408120546015548290610e2a908363ffffffff61266e16565b6113fd612530565b6000611407612fca565b9050670de0b6b3a764000081111561141b57fe5b600f8190556040517fc454ee9b76c52f782a256af821b857ca6e125d1e3333bcede402fec2bed9600c90611450908390615e2c565b60405180910390a1610cbe61300e565b601a5481565b61146e61512b565b506040805160e0810182526004546001600160a01b03908116825260055481166020830152600092820183905260608201839052600e548116608083015260a0820183905260c08201929092526008549091166114c96151ac565b6114d16151dd565b6114db868661299f565b826000018181525050826001600160a01b031663dbd1e2666040518163ffffffff1660e01b815260040160206040518083038186803b15801561151d57600080fd5b505afa158015611531573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155591906155cb565b6020830152815161156590612fad565b158015604084015261158c5761158584836000015184602001518a61306e565b90506115ac565b6115a984600001518560200151846000015185602001518b613423565b90505b60008160200151116115d05760405162461bcd60e51b8152600401610ef190615d9b565b608081015160a082015160405163335525ad60e01b81526001600160a01b0386169263335525ad9261160492600401615e4f565b600060405180830381600087803b15801561161e57600080fd5b505af1158015611632573d6000803e3d6000fd5b50505050611652846000015185602001518360c001518460e00151613561565b610100810151156116c9578351600a546101008301516040516364a197f360e01b81526001600160a01b03938416936364a197f39361169693911691600401615771565b600060405180830381600087803b1580156116b057600080fd5b505af11580156116c4573d6000803e3d6000fd5b505050505b6116db846000015182604001516137c4565b60208101516060830152610100810151604082015182516117139291611707919063ffffffff61266e16565b9063ffffffff61266e16565b608083018190526060808401516040808501519285015190517f4152c73dd2614c4f9fc35e8c9cf16013cd588c75b49a4c1673ecffdcbcda94039461175b9490929091615eb8565b60405180910390a161177b84600001513383606001518460400151613925565b50505050505050565b603c81565b6000610d13611335612512565b6001600160a01b031660009081526011602052604090206002015490565b6000610dd06117c1612fca565b6139f8565b82516117e45760405162461bcd60e51b8152600401610ef190615b9b565b6004546005546008546001600160a01b039283169291821691166118066151ac565b61180e6151dd565b611818878761299f565b826000018181525050826001600160a01b031663dbd1e2666040518163ffffffff1660e01b815260040160206040518083038186803b15801561185a57600080fd5b505afa15801561186e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189291906155cb565b602083015281516118a290612fad565b15801560408401526118ca576118c38585846000015185602001518c613a1f565b90506118e2565b6118df8585846000015185602001518c613c4f565b90505b60008160200151116119065760405162461bcd60e51b8152600401610ef190615d9b565b608081015160a082015160405163335525ad60e01b81526001600160a01b0386169263335525ad9261193a92600401615e4f565b600060405180830381600087803b15801561195457600080fd5b505af1158015611968573d6000803e3d6000fd5b5050505061198085858360c001518460e00151613561565b610100810151156119f757600a546101008201516040516364a197f360e01b81526001600160a01b03888116936364a197f3936119c4939290911691600401615771565b600060405180830381600087803b1580156119de57600080fd5b505af11580156119f2573d6000803e3d6000fd5b505050505b611a058582604001516137c4565b6020810151606083015261010081015160408201518251611a319291611707919063ffffffff61266e16565b608083018190526060808401516040808501519285015190517f4152c73dd2614c4f9fc35e8c9cf16013cd588c75b49a4c1673ecffdcbcda940394611a799490929091615eb8565b60405180910390a1611a95853383606001518460400151613925565b5050505050505050565b60116020526000908152604090208054600182015460028301546003909301549192909160ff81169061010090046001600160801b031685565b6000611ae3612530565b6001600160a01b038316600090815260116020526040812060010154611b0f908463ffffffff613d1716565b6001600160a01b038516600090815260116020526040902060010181905591505092915050565b670de0b6b3a764000081565b6006546001600160a01b031681565b60188181548110611b5e57fe5b6000918252602090912001546001600160a01b0316905081565b670f43fc2c04ee000081565b600480546040805163512a9ebb60e01b8152905160009384936001600160a01b03169263512a9ebb9281830192602092829003018186803b158015611bc857600080fd5b505afa158015611bdc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c0091906155cb565b90506000600560009054906101000a90046001600160a01b03166001600160a01b031663512a9ebb6040518163ffffffff1660e01b815260040160206040518083038186803b158015611c5257600080fd5b505afa158015611c66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c8a91906155cb565b9050611c9c828263ffffffff613d1716565b9250505090565b60195481565b611cb161214b565b611ccd5760405162461bcd60e51b8152600401610ef190615a96565b611cd68b613d3c565b611cdf8a613d3c565b611ce889613d3c565b611cf188613d3c565b611cfa87613d3c565b611d0386613d3c565b611d0c85613d3c565b611d1584613d3c565b611d1e83613d3c565b611d2782613d3c565b611d3081613d3c565b600780546001600160a01b03199081166001600160a01b038e8116919091179092556004805482168d84161790556005805482168c84161790556008805482168b84161790556009805482168a8416179055600a80548216898416179055600680548216888416179055600b80548216878416179055600e80548216868416179055600c80548216858416179055600d80549091169183169190911790556040517f3ca631ffcd2a9b5d9ae18543fc82f58eb4ca33af9e6ab01b7a8e95331e6ed98590611dfe908d9061575d565b60405180910390a17f78f058b189175430c48dc02699e3a0031ea4ff781536dc2fab847de4babdd8828a604051611e35919061575d565b60405180910390a17f5ee0cae2f063ed938bb55046f6a932fb6ae792bf43624806bb90abe68a50be9b89604051611e6c919061575d565b60405180910390a17f82966d27eea39b038ee0fa30cd16532bb24f6e65d31cb58fb227aa5766cdcc7f88604051611ea3919061575d565b60405180910390a17fcfb07d791fcafc032b35837b50eb84b74df518cf4cc287e8084f47630fa70fa087604051611eda919061575d565b60405180910390a17fe67f36a6e961157d6eff83b91f3af5a62131ceb6f04954ef74f51c1c05e7f88d86604051611f11919061575d565b60405180910390a17f8c537274438aa850a330284665d81a85dd38267d09e4050d416bfc94142db26485604051611f48919061575d565b60405180910390a17fbce04ccd812fbb02ec2145498f813470d7b7587b19477428388fe8201a15213184604051611f7f919061575d565b60405180910390a17f65f4cf077bc01e4742eb5ad98326f6e95b63548ea24b17f8d5e823111fe7880083604051611fb6919061575d565b60405180910390a17ff55325269d355f8306353e57757c17459a2218cc11a6e53d0f6ee0c8c16a5e2482604051611fed919061575d565b60405180910390a17f468634f5d5d4ec87457506a98d964db31fea0d63fc80a14ba75267970253ac1481604051612024919061575d565b60405180910390a15050505050505050505050565b600c546001600160a01b031681565b6004546001600160a01b031681565b60135481565b612065612530565b610cbe81613d85565b6004805460408051630a7b61df60e11b8152905160009384936001600160a01b0316926314f6c3be9281830192602092829003018186803b1580156120b257600080fd5b505afa1580156120c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ea91906155cb565b90506000600560009054906101000a90046001600160a01b03166001600160a01b03166314f6c3be6040518163ffffffff1660e01b815260040160206040518083038186803b158015611c5257600080fd5b6000546001600160a01b031690565b6000546001600160a01b0316331490565b60145481565b600061216c612530565b6001600160a01b038316600090815260116020526040812054610cf4908463ffffffff613d1716565b60155481565b6040518060400160405280600c81526020016b2a3937bb32a6b0b730b3b2b960a11b81525081565b6121cc83613de2565b6040805160018082528183019092526060916020808301908036833701905050905083816000815181106121fc57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506122278184846117c6565b50505050565b600e546001600160a01b031681565b600080600061224a84613e2b565b91509150600061225a8383613eb1565b95945050505050565b6007546001600160a01b031681565b6000610d1382613ee6565b6001600160a01b038116600090815260116020526040812080546001909101549091806122a985610df9565b91506122b4856113c7565b90506122c6848363ffffffff613d1716565b93506122d8838263ffffffff613d1716565b92509193509193565b60125481565b60025481565b6212750081565b6000610dd0612301612fca565b612804565b670ddd4b8c6c7d70d881565b61231a612530565b610cbe816002613f0a565b3360009081526001602052604090205460ff166123545760405162461bcd60e51b8152600401610ef19061592e565b600255565b600080600061236785613e2b565b915091506000610eb8838387614016565b60105481565b6000612388612530565b6001600160a01b038316600090815260116020526040812060010154611b0f908463ffffffff61266e16565b6000610d136123c16122f4565b83614046565b6001600160a01b031660009081526011602052604090205490565b6000601882815481106123f157fe5b6000918252602090912001546001600160a01b031692915050565b60016020526000908152604090205460ff1681565b61242961214b565b6124455760405162461bcd60e51b8152600401610ef190615a96565b6001600160a01b03821660008181526001602052604090819020805460ff1916841515179055517f4c97694570a07277810af7e5669ffd5f6a2d6b74b6e9a274b8b870fd5114cf8790612499908490615830565b60405180910390a25050565b600060016001600160a01b03831660009081526011602052604090206003015460ff1660048111156124d357fe5b146124e057506000610d38565b506015546001600160a01b03821660009081526017602052604090205410919050565b600d546001600160a01b031681565b6000610dd0600f546139f8565b612527612530565b610cbe81614086565b6007546001600160a01b0316331461255a5760405162461bcd60e51b8152600401610ef190615b40565b565b612565816124a5565b156126695761257381613de2565b600061257e826113c7565b9050600061258b83610df9565b6001600160a01b0384166000908152601160205260409020600101549091506125ba908363ffffffff613d1716565b6001600160a01b03841660009081526011602052604090206001810191909155546125eb908263ffffffff613d1716565b6001600160a01b03841660009081526011602052604090205561260d83613d85565b612619858583856140d6565b6001600160a01b038316600081815260116020526040808220805460018201546002909201549251600080516020615f3d8339815191529461265e949293929161583b565b60405180910390a250505b505050565b60006126b083836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506141be565b9392505050565b601880546001808201835560008381527fb13d2d76d1f4b7be834882e410b3e3a8afaf69f83600ae24db354391d2378d2e90920180546001600160a01b0319166001600160a01b03861617905591549091612712919061266e565b6001600160a01b039290921660009081526011602052604090206003018054610100600160881b0319166101006001600160801b038516021790555090565b6001600160a01b0381166000908152601160205260408120600101548190612778906141ea565b6001600160a01b0384166000908152601160205260409020600201805490829055601254919250906127c29083906127b6908463ffffffff61266e16565b9063ffffffff613d1716565b60128190556040517f6bac5e0eb3c44eb03a60ab11ec3a2c051771616aecadbcfff2630aabae520382916127f591615e2c565b60405180910390a15092915050565b6000610d1361282c836103e8670de0b6b3a76400005b04600502613d1790919063ffffffff16565b670de0b6b3a7640000614226565b60008261284957506000610d13565b8282028284828161285657fe5b04146126b05760405162461bcd60e51b8152600401610ef190615a55565b60006126b083836040518060400160405280601a815260200179536166654d6174683a206469766973696f6e206279207a65726f60301b81525061423c565b6611c37937e0800081108015906128d25750670de0b6b3a76400008111155b610cbe5760405162461bcd60e51b8152600401610ef190615cca565b600c5460408051631e425be160e11b815290516000926001600160a01b031691633c84b7c2916004808301926020929190829003018186803b15801561293357600080fd5b505afa158015612947573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061296b91906155cb565b9050612980816212750063ffffffff613d1716565b421015610cbe5760405162461bcd60e51b8152600401610ef1906159f7565b6006546040516341e7dc0b60e01b815260009182916001600160a01b03909116906341e7dc0b906129d6908790879060040161581c565b60206040518083038186803b1580156129ee57600080fd5b505afa158015612a02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a2691906155cb565b600654604051630ab04c1d60e11b81529192506001600160a01b031690631560983a908390612a5d90829089908990600401615e35565b6020604051808303818588803b158015612a7657600080fd5b505af1158015612a8a573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190612aaf91906155cb565b949350505050565b670f43fc2c04ee0000612ac982613ee6565b1015610cbe5760405162461bcd60e51b8152600401610ef190615d1a565b60008111610cbe5760405162461bcd60e51b8152600401610ef190615bf1565b6040516370a0823160e01b815281906001600160a01b038516906370a0823190612b3590869060040161575d565b60206040518083038186803b158015612b4d57600080fd5b505afa158015612b61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b8591906155cb565b10156126695760405162461bcd60e51b8152600401610ef190615acb565b6000612bb88260800151858560c00151614273565b15612bc45750826126b0565b81608001516001600160a01b0316634d6228316040518163ffffffff1660e01b815260040160206040518083038186803b158015612c0157600080fd5b505afa158015612c15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c399190615324565b90505b6001600160a01b03811615801590612c685750670f43fc2c04ee0000612c66828560c00151612359565b105b156126b05781608001516001600160a01b031663b72703ac826040518263ffffffff1660e01b8152600401612c9d919061575d565b60206040518083038186803b158015612cb557600080fd5b505afa158015612cc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ced9190615324565b9050612c3c565b6000808089612d035760001999505b6001600160a01b03861615801590612d1b5750845115155b8015612d27575060008a115b15612e55576080840151604051632dc9c0eb60e21b8152600019909b019a6000916001600160a01b03169063b72703ac90612d66908a9060040161575d565b60206040518083038186803b158015612d7e57600080fd5b505afa158015612d92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612db69190615324565b9050612dcb856000015186602001518961255c565b612dd3615229565b612dea868989600001518a60c001518f8f8f6143db565b9050806040015115612dfd575050612e55565b80516020880151612e139163ffffffff613d1716565b6020808901919091528101516040880151612e339163ffffffff613d1716565b604088015280518751612e4b9163ffffffff61266e16565b8752509550612d03565b6000856040015111612e795760405162461bcd60e51b8152600401610ef1906158b0565b5050506020820151604083015183519750975097945050505050565b600080612ea0612fca565b90506000612eb884610eac888863ffffffff61283a16565b90506000612edd612ed083600263ffffffff61287416565b849063ffffffff613d1716565b9050612ef181670de0b6b3a7640000614226565b905060008111612efd57fe5b600f8190556040517fc454ee9b76c52f782a256af821b857ca6e125d1e3333bcede402fec2bed9600c90612f32908390615e2c565b60405180910390a1610eb861300e565b6000610d136123c1610dc3565b6000612f6d83610eac86670de0b6b3a764000063ffffffff61283a16565b9050818111156122275760405162461bcd60e51b8152600401610ef190615d64565b60006126b0670de0b6b3a7640000610eac858563ffffffff61283a16565b600080612fb983613ee6565b6714d1120d7b160000119392505050565b600080612fd5614633565b90506000612feb670ddd4b8c6c7d70d88361464f565b9050611c9c670de0b6b3a7640000610eac83600f5461283a90919063ffffffff16565b60006130256010544261266e90919063ffffffff16565b9050603c8110610cbe574260108190556040517f860f8d2f0c74dd487e89e2883e3b25b8159ce1e1b3433a291cba7b82c508f3bc9161306391615e2c565b60405180910390a150565b6130766151dd565b61307e61524c565b6130866151dd565b84825260006080830152613098611b84565b60a08301526130a561206e565b8260c001818152505086608001516001600160a01b0316634d6228316040518163ffffffff1660e01b815260040160206040518083038186803b1580156130eb57600080fd5b505afa1580156130ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131239190615324565b82606001906001600160a01b031690816001600160a01b031681525050600087608001516001600160a01b0316631e2231436040518163ffffffff1660e01b815260040160206040518083038186803b15801561317f57600080fd5b505afa158015613193573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131b79190615324565b6000602085015290505b8483602001511080156131ea5750806001600160a01b031683606001516001600160a01b031614155b156134185760808801516060840151604051632dc9c0eb60e21b81526000926001600160a01b03169163b72703ac91613226919060040161575d565b60206040518083038186803b15801561323e57600080fd5b505afa158015613252573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132769190615324565b9050613286846060015189612359565b6040850152608084015161338a57670f43fc2c04ee00008460400151101580156132af57508351155b156132ba5750613418565b60006132cf8560c001518660a001518b614016565b8a5160208c01516060880151604089015189519495506132f094868f6146fa565b6080810151865191955061330a919063ffffffff61266e16565b8552608084015160a08601516133259163ffffffff61266e16565b8560a001818152505061335a84610100015161170786604001516117078860a001518a60c0015161266e90919063ffffffff16565b60c086015261336986856149ce565b955061337e8560c001518660a001518b614ae5565b156080860152506133fa565b836080015180156133a65750670f43fc2c04ee00008460400151105b156133f4576133c789600001518a6020015186606001518760000151614b06565b608081015185519194506133e1919063ffffffff61266e16565b84526133ed85846149ce565b94506133fa565b50613418565b6001600160a01b0316606084015260208301805160010190526131c1565b505050949350505050565b61342b6151dd565b61343361524c565b61343b6151dd565b600e54858352600060208401526001600160a01b03165b848360200151101561355557806001600160a01b0316634d6228316040518163ffffffff1660e01b815260040160206040518083038186803b15801561349757600080fd5b505afa1580156134ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134cf9190615324565b6001600160a01b0316606084018190526134e99088612359565b60408401819052670f43fc2c04ee0000111561354057613513898985606001518660000151614b06565b6080810151845191935061352d919063ffffffff61266e16565b835261353984836149ce565b9350613545565b613555565b6020830180516001019052613452565b50505095945050505050565b8161356b57612227565b60195460009061358d906127b684670de0b6b3a764000063ffffffff61283a16565b905060006135b2601a546127b6670de0b6b3a76400008761283a90919063ffffffff16565b905060006135cb6012548461287490919063ffffffff16565b905060006135e46012548461287490919063ffffffff16565b905061360b6135fe6012548461283a90919063ffffffff16565b859063ffffffff61266e16565b6019556012546136339061362690839063ffffffff61283a16565b849063ffffffff61266e16565b601a55601554613649908363ffffffff613d1716565b60155560165461365f908263ffffffff613d1716565b60168190556015546040517f9f8bc8ab0daf5bceef75ecfd2085d1fcc6548c657ea970d9a23a60610d0737e3926136969291615e4f565b60405180910390a16040516305af902160e31b81526001600160a01b03891690632d7c8108906136ca908990600401615e2c565b600060405180830381600087803b1580156136e457600080fd5b505af11580156136f8573d6000803e3d6000fd5b5050604051636b05e97760e01b81526001600160a01b038a169250636b05e9779150613728908990600401615e2c565b600060405180830381600087803b15801561374257600080fd5b505af1158015613756573d6000803e3d6000fd5b50506040516364a197f360e01b81526001600160a01b038b1692506364a197f39150613788908a908990600401615771565b600060405180830381600087803b1580156137a257600080fd5b505af11580156137b6573d6000803e3d6000fd5b505050505050505050505050565b6012546013819055506000826001600160a01b03166314f6c3be6040518163ffffffff1660e01b815260040160206040518083038186803b15801561380857600080fd5b505afa15801561381c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061384091906155cb565b90506000600560009054906101000a90046001600160a01b03166001600160a01b03166314f6c3be6040518163ffffffff1660e01b815260040160206040518083038186803b15801561389257600080fd5b505afa1580156138a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138ca91906155cb565b90506138e0816127b6848663ffffffff61266e16565b60148190556013546040517f51bf4c63ec3cba9d03d43238abbdd979dd91bd16d9895c74ceea9118c7baaf60926139179291615e4f565b60405180910390a150505050565b811561399657600b54600954604051631062c15f60e11b81526001600160a01b03928316926320c582be92613963929116908790879060040161578a565b600060405180830381600087803b15801561397d57600080fd5b505af1158015613991573d6000803e3d6000fd5b505050505b8015612227576040516364a197f360e01b81526001600160a01b038516906364a197f3906139ca9086908590600401615771565b600060405180830381600087803b1580156139e457600080fd5b505af1158015611a95573d6000803e3d6000fd5b6000610d13613a12836103e8670de0b6b3a764000061281a565b66b1a2bc2ec50000614226565b613a276151dd565b613a2f61524c565b613a376151dd565b84825260006080830152613a49611b84565b60a0830152613a5661206e565b60c0830152600060208301525b835182602001511015613c445783826020015181518110613a8057fe5b6020908102919091018101516001600160a01b03166060840181905260009081526011909152604090206003015460019060ff166004811115613abf57fe5b14613ac957613c34565b613ad7826060015187612359565b60408301526080820151613bd657670f43fc2c04ee0000826040015110158015613b0057508151155b15613b0a57613c34565b6000613b1f8360c001518460a0015189614016565b9050613b3c8989856060015186604001518760000151868d6146fa565b60808101518451919350613b56919063ffffffff61266e16565b8352608082015160a0840151613b719163ffffffff61266e16565b8360a0018181525050613ba682610100015161170784604001516117078660a001518860c0015161266e90919063ffffffff16565b60c0840152613bb584836149ce565b9350613bca8360c001518460a0015189614ae5565b15608084015250613c34565b81608001518015613bf25750670f43fc2c04ee00008260400151105b15613c3457613c0b888884606001518560000151614b06565b60808101518351919250613c25919063ffffffff61266e16565b8252613c3183826149ce565b92505b6020820180516001019052613a63565b505095945050505050565b613c576151dd565b613c5f61524c565b613c676151dd565b848252600060208301525b835182602001511015613c445783826020015181518110613c8f57fe5b60209081029190910101516001600160a01b031660608301819052613cb49087612359565b60408301819052670f43fc2c04ee00001115613d0757613cde888884606001518560000151614b06565b60808101518351919250613cf8919063ffffffff61266e16565b8252613d0483826149ce565b92505b6020820180516001019052613c72565b6000828201838110156126b05760405162461bcd60e51b8152600401610ef1906158f9565b6001600160a01b038116613d625760405162461bcd60e51b8152600401610ef190615976565b803b80613d815760405162461bcd60e51b8152600401610ef190615c3f565b5050565b601580546001600160a01b038316600090815260176020526040908190209182556016546001909201829055915491517fc3d426bcfc672bd74f6fae61c225e06f556f80dad48af8a4631b295030a7ad3d926130639285926157fb565b60016001600160a01b03821660009081526011602052604090206003015460ff166004811115613e0e57fe5b14610cbe5760405162461bcd60e51b8152600401610ef190615ddd565b6000806000613e39846113c7565b90506000613e4685610df9565b6001600160a01b03861660009081526011602052604081206001015491925090613e76908463ffffffff613d1716565b6001600160a01b03871660009081526011602052604081205491925090613ea3908463ffffffff613d1716565b919550909350505050915091565b60008115613edd57613ed682610eac8568056bc75e2d6310000063ffffffff61283a16565b9050610d13565b50600019610d13565b600080613ef161206e565b90506000613efd611b84565b9050612aaf828286614016565b6000816004811115613f1857fe5b14158015613f3257506001816004811115613f2f57fe5b14155b613f3857fe5b601854613f4481614c31565b6001600160a01b0383166000908152601160205260409020600301805483919060ff19166001836004811115613f7657fe5b02179055506001600160a01b0383166000908152601160209081526040808320600180820185905590849055601790925282208281550155613fb88382614cd7565b600e54604051631484968760e11b81526001600160a01b03909116906329092d0e90613fe890869060040161575d565b600060405180830381600087803b15801561400257600080fd5b505af115801561177b573d6000803e3d6000fd5b6000821561403d57600061403484610eac878663ffffffff61283a16565b91506126b09050565b506000196126b0565b600080614065670de0b6b3a7640000610eac868663ffffffff61283a16565b90508281106126b05760405162461bcd60e51b8152600401610ef190615c74565b6001600160a01b0381166000908152601160205260409020600201546012546140b5908263ffffffff61266e16565b601255506001600160a01b0316600090815260116020526040812060020155565b6040516305af902160e31b81526001600160a01b03841690632d7c810890614102908590600401615e2c565b600060405180830381600087803b15801561411c57600080fd5b505af1158015614130573d6000803e3d6000fd5b5050604051636b05e97760e01b81526001600160a01b0387169250636b05e9779150614160908590600401615e2c565b600060405180830381600087803b15801561417a57600080fd5b505af115801561418e573d6000803e3d6000fd5b505060405163be41205f60e01b81526001600160a01b038616925063be41205f91506139ca908490600401615e2c565b600081848411156141e25760405162461bcd60e51b8152600401610ef1919061585d565b505050900390565b600080601454600014156141ff575081610d13565b60006013541161420b57fe5b6126b0601454610eac6013548661283a90919063ffffffff16565b600081831061423557816126b0565b5090919050565b6000818361425d5760405162461bcd60e51b8152600401610ef1919061585d565b50600083858161426957fe5b0495945050505050565b60006001600160a01b03831615806143045750604051630bb7c8fd60e31b81526001600160a01b03851690635dbe47e8906142b290869060040161575d565b60206040518083038186803b1580156142ca57600080fd5b505afa1580156142de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143029190615597565b155b8061431f5750670f43fc2c04ee000061431d8484612359565b105b1561432c575060006126b0565b60405163765e015960e01b81526000906001600160a01b0386169063765e01599061435b90879060040161575d565b60206040518083038186803b15801561437357600080fd5b505afa158015614387573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143ab9190615324565b90506001600160a01b038116158061225a5750670f43fc2c04ee00006143d18285612359565b1095945050505050565b6143e3615229565b6002546001600160a01b0388166000908152601160205260409020546144199188916144149163ffffffff61266e16565b614226565b80825261443a908690610eac90670de0b6b3a764000063ffffffff61283a16565b60208083019190915281516001600160a01b03891660009081526011909252604082205461446d9163ffffffff61266e16565b6020808401516001600160a01b038b1660009081526011909252604082206001015492935090916144a39163ffffffff61266e16565b905060025482141561450e576144b889614086565b6144c3896004613f0a565b6144d18a8a60025484614e78565b886001600160a01b0316600080516020615f3d83398151915260008060006003604051614501949392919061583b565b60405180910390a2614625565b600061451a8284613eb1565b90508481141580614534575060035461453284614fdb565b105b156145485750506001604083015250614628565b8a608001516001600160a01b0316632be212608b838a8a6040518563ffffffff1660e01b815260040161457e94939291906157d0565b600060405180830381600087803b15801561459857600080fd5b505af11580156145ac573d6000803e3d6000fd5b5050506001600160a01b038b166000908152601160205260409020848155600101839055506145da8a612751565b506001600160a01b038a1660008181526011602052604090819020600201549051600080516020615f3d8339815191529161461b918791879160039061583b565b60405180910390a2505b50505b979650505050505050565b6000610dd0603c610eac6010544261266e90919063ffffffff16565b6000631f54050082111561466557631f54050091505b816146795750670de0b6b3a7640000610d13565b670de0b6b3a764000083835b60018111156146f057600281066146ba576146a08283614ff2565b91506146b381600263ffffffff61287416565b90506146eb565b6146c48284614ff2565b92506146d08283614ff2565b91506146e86002610eac83600163ffffffff61266e16565b90505b614685565b610eb88284614ff2565b6147026151dd565b61470a615294565b60185460011061471a5750614628565b6147238761227d565b6040850152602084810191909152840181905290835261474290615025565b60408301819052600254606084015260208301516147659163ffffffff61266e16565b8152670de0b6b3a764000086116148305761478a8989836020015184604001516140d6565b61479387614086565b60006080830181905260a0830152815160c0830152805160e08301526147ba876003613f0a565b815160208301516040516001600160a01b038a1692600080516020615f1d833981519152926147eb92600290615e5d565b60405180910390a2866001600160a01b0316600080516020615f3d83398151915260008060006002604051614823949392919061583b565b60405180910390a26149c2565b670de0b6b3a76400008611801561484e5750670f43fc2c04ee000086105b1561489e576148678989836020015184604001516140d6565b61487087614086565b8151815161487f91908761502c565b60e086015260c085015260a084015260808301526147ba876003613f0a565b670f43fc2c04ee000086101580156148b557508386105b80156148c2575081518510155b156149b1576148db8989836020015184604001516140d6565b846148e257fe5b6148eb87614086565b6148fe8260000151836020015185615098565b915061490b876003613f0a565b6101008201511561498057600a54610100830151604051633f10abab60e01b81526001600160a01b0390921691633f10abab9161494d918b9190600401615771565b600060405180830381600087803b15801561496757600080fd5b505af115801561497b573d6000803e3d6000fd5b505050505b815160a08301516040516001600160a01b038a1692600080516020615f1d833981519152926147eb92600290615e5d565b6149b96151dd565b91506146289050565b50979650505050505050565b6149d66151dd565b604080830151908401516149ef9163ffffffff613d1716565b604082015260608083015190840151614a0d9163ffffffff613d1716565b606082015281516020840151614a289163ffffffff613d1716565b6020808301919091528201518351614a459163ffffffff613d1716565b815260808083015190840151614a609163ffffffff613d1716565b608082015260a08083015190840151614a7e9163ffffffff613d1716565b60a082015260c08083015190840151614a9c9163ffffffff613d1716565b60c082015260e08083015190840151614aba9163ffffffff613d1716565b60e08201526101008083015190840151614ad99163ffffffff613d1716565b61010082015292915050565b600080614af3858585614016565b6714d1120d7b1600001195945050505050565b614b0e6151dd565b614b16615294565b614b1f8461227d565b60408501908152602085810192835286019290925291845290519051614b499188918891906140d6565b614b5284614086565b614b5f8260200151615025565b6040830181905260025460608401526020830151600091614b86919063ffffffff61266e16565b9050614b978360000151828661502c565b60e087015260c086015260a08501526080840152614bb6856003613f0a565b825160208401516040516001600160a01b03881692600080516020615f1d83398151915292614be792600190615e5d565b60405180910390a2846001600160a01b0316600080516020615f3d83398151915260008060006001604051614c1f949392919061583b565b60405180910390a25050949350505050565b600181118015614cbb5750600e546040805163de8fa43160e01b815290516001926001600160a01b03169163de8fa431916004808301926020929190829003018186803b158015614c8157600080fd5b505afa158015614c95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614cb991906155cb565b115b610cbe5760405162461bcd60e51b8152600401610ef1906159ad565b6001600160a01b03821660009081526011602052604081206003015460ff1690816004811115614d0357fe5b14158015614d1d57506001816004811115614d1a57fe5b14155b614d2357fe5b6001600160a01b03831660009081526011602052604081206003015461010090046001600160801b0316908390614d5b82600161266e565b905080836001600160801b03161115614d7057fe5b600060188281548110614d7f57fe5b600091825260209091200154601880546001600160a01b03909216925082916001600160801b038716908110614db157fe5b600091825260208083209190910180546001600160a01b0319166001600160a01b03948516179055918316815260119091526040908190206003018054610100600160881b0319166101006001600160801b03881602179055517f02b04ae5f7be9ca7c103293a2aa15f3c339d15d6eda53b721fef7b0e609c831a90614e3a90839087906157ae565b60405180910390a16018805480614e4d57fe5b600082815260209020810160001990810180546001600160a01b031916905501905550505050505050565b6040808501516009549151632770a7eb60e21b81526001600160a01b0391821692639dc29fac92614eb0929116908690600401615771565b600060405180830381600087803b158015614eca57600080fd5b505af1158015614ede573d6000803e3d6000fd5b505085516040516305af902160e31b81526001600160a01b039091169250632d7c81089150614f11908590600401615e2c565b600060405180830381600087803b158015614f2b57600080fd5b505af1158015614f3f573d6000803e3d6000fd5b505050508360a001516001600160a01b0316633f10abab84836040518363ffffffff1660e01b8152600401614f75929190615771565b600060405180830381600087803b158015614f8f57600080fd5b505af1158015614fa3573d6000803e3d6000fd5b5050855160a08701516040516364a197f360e01b81526001600160a01b0390921693506364a197f392506139ca918590600401615771565b6000610d136002548361266e90919063ffffffff16565b600080615005848463ffffffff61283a16565b9050612aaf670de0b6b3a7640000610eac836706f05b59d3b20000613d17565b60c8900490565b60008080808415615082576150418786614226565b935061505787610eac888763ffffffff61283a16565b9250615069878563ffffffff61266e16565b915061507b868463ffffffff61266e16565b905061508f565b5060009250829150859050845b93509350935093565b6150a06151dd565b8381526020810183905260006150c883610eac87670f43fc2c04ee000063ffffffff61283a16565b90506150d381615025565b604083018190526002546060840152608083018690526150fa90829063ffffffff61266e16565b60a083015261510f848263ffffffff61266e16565b61010083015250600060c0820181905260e08201529392505050565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915290565b60405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518060a00160405280600081526020016000815260200160001515815260200160008152602001600081525090565b6040518061012001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604051806060016040528060008152602001600081526020016000151581525090565b6040518060e0016040528060008152602001600081526020016000815260200160006001600160a01b0316815260200160001515815260200160008152602001600081525090565b60405180606001604052806000815260200160008152602001600081525090565b8035610d1381615ef9565b60008083601f8401126152d1578081fd5b5081356001600160401b038111156152e7578182fd5b602083019150836020808302850101111561530157600080fd5b9250929050565b600060208284031215615319578081fd5b81356126b081615ef9565b600060208284031215615335578081fd5b81516126b081615ef9565b60008060008060008060008060008060006101608c8e031215615361578687fd5b8b3561536c81615ef9565b9a5060208c013561537c81615ef9565b995060408c013561538c81615ef9565b985060608c013561539c81615ef9565b975060808c01356153ac81615ef9565b965060a08c01356153bc81615ef9565b955060c08c01356153cc81615ef9565b945060e08c01356153dc81615ef9565b93506101008c01356153ed81615ef9565b92506153fd8d6101208e016152b5565b915061540d8d6101408e016152b5565b90509295989b509295989b9093969950565b600080600060408486031215615433578283fd5b833561543e81615ef9565b925060208401356001600160401b03811115615458578283fd5b615464868287016152c0565b9497909650939450505050565b60008060408385031215615483578182fd5b823561548e81615ef9565b9150602083013561549e81615f0e565b809150509250929050565b600080604083850312156154bb578182fd5b82356154c681615ef9565b946020939093013593505050565b6000806000604084860312156154e8578283fd5b83356001600160401b03808211156154fe578485fd5b81860187601f82011261550f578586fd5b803592508183111561551f578586fd5b602080840261552f828201615ed3565b8581528281019084840183860185018d1015615549578a8bfd5b8a95505b878610156155735761555f8d826152b5565b83526001959095019491840191840161554d565b50985050508701359250508082111561558a578384fd5b50615464868287016152c0565b6000602082840312156155a8578081fd5b81516126b081615f0e565b6000602082840312156155c4578081fd5b5035919050565b6000602082840312156155dc578081fd5b5051919050565b60008060008060008060008060006101008a8c031215615601578485fd5b8935985060208a013561561381615ef9565b975060408a013561562381615ef9565b965060608a013561563381615ef9565b955060808a0135945060a08a0135935060c08a0135925060e08a01356001600160401b03811115615662578283fd5b61566e8c828d016152c0565b8194508093505050509295985092959850929598565b600080600060408486031215615698578081fd5b8335925060208401356001600160401b03811115615458578182fd5b818352602080840193600091908185020181018584845b878110156157425782840389528135601e198836030181126156eb578687fd5b87018035906001600160401b03821115615703578788fd5b813603891315615711578788fd5b818652818782018888013750848101860187905298850198601f01601f1916909301840192908401906001016156cb565b5091979650505050505050565b6004811061575957fe5b9052565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b039290921682526001600160801b0316602082015260400190565b6001600160a01b03948516815260208101939093529083166040830152909116606082015260800190565b6001600160a01b039390931683526020830191909152604082015260600190565b600060208252612aaf6020830184866156b4565b901515815260200190565b84815260208101849052604081018390526080810161225a606083018461574f565b6000602080835283518082850152825b818110156158895785810183015185820160400152820161586d565b8181111561589a5783604083870101525b50601f01601f1916929092016040019392505050565b60208082526029908201527f54726f76654d616e616765723a20556e61626c6520746f2072656465656d20616040820152681b9e48185b5bdd5b9d60ba1b606082015260800190565b6020808252601b908201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b604082015260600190565b60208082526028908201527f436f6e74726f6c6c61626c653a2043616c6c6572206973206e6f74206120636f604082015267373a3937b63632b960c11b606082015260800190565b6020808252601e908201527f4163636f756e742063616e6e6f74206265207a65726f20616464726573730000604082015260600190565b6020808252602a908201527f54726f76654d616e616765723a204f6e6c79206f6e652074726f766520696e206040820152697468652073797374656d60b01b606082015260800190565b602080825260409082018190527f54726f76654d616e616765723a20526564656d7074696f6e7320617265206e6f908201527f7420616c6c6f77656420647572696e6720626f6f747374726170207068617365606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252604f908201527f54726f76654d616e616765723a2052657175657374656420726564656d70746960408201527f6f6e20616d6f756e74206d757374206265203c3d20757365722773205a4b555360608201526e4420746f6b656e2062616c616e636560881b608082015260a00190565b6020808252603b908201527f54726f76654d616e616765723a2043616c6c6572206973206e6f74207468652060408201527a109bdc9c9bddd95c93dc195c985d1a5bdb9cc818dbdb9d1c9858dd602a1b606082015260800190565b60208082526036908201527f54726f76654d616e616765723a2043616c6c646174612061646472657373206160408201527572726179206d757374206e6f7420626520656d70747960501b606082015260800190565b6020808252602e908201527f54726f76654d616e616765723a20416d6f756e74206d7573742062652067726560408201526d61746572207468616e207a65726f60901b606082015260800190565b6020808252818101527f4163636f756e7420636f64652073697a652063616e6e6f74206265207a65726f604082015260600190565b60208082526036908201527f54726f76654d616e616765723a2046656520776f756c642065617420757020616040820152751b1b081c995d1d5c9b99590818dbdb1b185d195c985b60521b606082015260800190565b60208082526030908201527f4d6178206665652070657263656e74616765206d75737420626520626574776560408201526f656e20302e352520616e64203130302560801b606082015260800190565b6020808252602a908201527f54726f76654d616e616765723a2043616e6e6f742072656465656d207768656e604082015269102a21a9101e1026a1a960b11b606082015260800190565b6020808252601d908201527f4665652065786365656465642070726f7669646564206d6178696d756d000000604082015260600190565b60208082526022908201527f54726f76654d616e616765723a206e6f7468696e6720746f206c697175696461604082015261746560f01b606082015260800190565b6020808252602f908201527f54726f76654d616e616765723a2054726f766520646f6573206e6f742065786960408201526e1cdd081bdc881a5cc818db1bdcd959608a1b606082015260800190565b90815260200190565b60008482526040602083015261225a6040830184866156b4565b918252602082015260400190565b8381526020810183905260608101612aaf604083018461574f565b858152602081018590526040810184905260a0810160058410615e9757fe5b60608201939093526001600160801b03919091166080909101529392505050565b93845260208401929092526040830152606082015260800190565b6040518181016001600160401b0381118282101715615ef157600080fd5b604052919050565b6001600160a01b0381168114610cbe57600080fd5b8015158114610cbe57600080fdfeea67486ed7ebe3eea8ab3390efd4a3c8aae48be5bea27df104a8af786c408434c3770d654ed33aeea6bf11ac8ef05d02a6a04ed4686dd2f624d853bbec43cc8ba164736f6c634300060b000a",
  "deployedBytecode": "0x6080604052600436106104095760003560e01c8063795d26c311610215578063b91af97c11610124578063d3d6f843116100b1578063d3d6f84314610b5b578063d5b3563514610b7b578063d66a255314610b9b578063d9a7244414610bbb578063da8c229e14610bdb578063e0dba60f14610bfb578063e2ac77b014610c1b578063e34341ab14610c3b578063f36b242514610c50578063f92d34331461056a578063fe2ba84814610c6557610409565b8063b91af97c14610a4d578063bf9befb114610a7d578063c192645b14610a92578063c35bc55014610aa7578063c52861f214610abc578063c7b5548114610ad1578063cbd138ae14610ae6578063d0029b5114610b06578063d293c71014610b26578063d380a37c14610b4657610409565b806396d711ff116101a257806396d711ff146109645780639976cf45146109795780639dd233d214610999578063a20baee61461081d578063a3f4df7e146109ae578063ad1c3e62146109d0578063ae918754146109e3578063b0d8e181146109f8578063b7f8cf9b14610a18578063b82f263d14610a2d57610409565b8063795d26c31461087c578063797250e3146108915780637985c5e4146108a65780637d8c87aa146108c65780637f7dde4a146108db578063807d138d146108f057806382fe3eb914610905578063887105d3146109255780638da5cb5b1461093a5780638f32d59b1461094f57610409565b8063480cd5781161031c57806361ec893d116102a957806361ec893d1461074f578063631203b01461076457806364cee2601461078457806366ca4a21146107a45780636bf96eda146107b95780636ef64338146107cc57806372423c17146107fd57806372fe25aa1461081d578063741bef1a14610832578063756b253e14610847578063794e57241461086757610409565b8063480cd578146106465780634870dd9a1461066657806349eefeee1461067b5780634e443d9e146106905780635733d58f146106bd5780635d6b480f146106d25780635d8c9609146106f25780635dba4c4a146107125780635e2084d01461072757806360ac128f1461073c57610409565b8063240926691161039a578063240926691461055557806328d28b5b1461056a5780632b11551a1461057f57806335a3f707146105945780633cc74225146105a957806343712f5a146105be57806343833a7f146105d3578063438d641a146105f3578063472b286f14610613578063477d66cf1461062657610409565b8063048c661d1461040e578063071a7541146104395780630b0765571461045b57806312610e921461047d57806315d549f11461049d5780631673c79a146104bd57806318f2817a146104eb5780631bf435551461050b5780631f68f20a1461052057806321e3780114610535575b600080fd5b34801561041a57600080fd5b50610423610c85565b604051610430919061575d565b60405180910390f35b34801561044557600080fd5b5061044e610c94565b6040516104309190615e2c565b34801561046757600080fd5b5061047b610476366004615308565b610c99565b005b34801561048957600080fd5b5061044e6104983660046154a9565b610cc1565b3480156104a957600080fd5b5061044e6104b8366004615308565b610d19565b3480156104c957600080fd5b506104dd6104d8366004615308565b610d3d565b604051610430929190615e4f565b3480156104f757600080fd5b5061044e610506366004615308565b610d56565b34801561051757600080fd5b5061044e610d69565b34801561052c57600080fd5b5061044e610d6f565b34801561054157600080fd5b5061044e610550366004615308565b610d75565b34801561056157600080fd5b5061044e610d9f565b34801561057657600080fd5b5061044e610db2565b34801561058b57600080fd5b5061044e610dc3565b3480156105a057600080fd5b50610423610dd5565b3480156105b557600080fd5b50610423610de4565b3480156105ca57600080fd5b5061044e610df3565b3480156105df57600080fd5b5061044e6105ee366004615308565b610df9565b3480156105ff57600080fd5b5061047b61060e3660046155b3565b610ec2565b61047b6106213660046155e3565b610eff565b34801561063257600080fd5b5061044e6106413660046155b3565b611328565b34801561065257600080fd5b5061044e610661366004615308565b61133b565b34801561067257600080fd5b5061044e611359565b34801561068757600080fd5b5061044e61135e565b34801561069c57600080fd5b506106b06106ab3660046155b3565b611364565b6040516104309190615830565b3480156106c957600080fd5b5061044e61136f565b3480156106de57600080fd5b5061047b6106ed3660046154a9565b61137b565b3480156106fe57600080fd5b5061044e61070d366004615308565b6113c7565b34801561071e57600080fd5b5061047b6113f5565b34801561073357600080fd5b5061044e611460565b61047b61074a366004615684565b611466565b34801561075b57600080fd5b5061044e611784565b34801561077057600080fd5b5061044e61077f3660046155b3565b611789565b34801561079057600080fd5b5061044e61079f366004615308565b611796565b3480156107b057600080fd5b5061044e6117b4565b61047b6107c73660046154d4565b6117c6565b3480156107d857600080fd5b506107ec6107e7366004615308565b611a9f565b604051610430959493929190615e78565b34801561080957600080fd5b5061044e6108183660046154a9565b611ad9565b34801561082957600080fd5b5061044e611b36565b34801561083e57600080fd5b50610423611b42565b34801561085357600080fd5b506104236108623660046155b3565b611b51565b34801561087357600080fd5b5061044e611b78565b34801561088857600080fd5b5061044e611b84565b34801561089d57600080fd5b5061044e611ca3565b3480156108b257600080fd5b5061047b6108c1366004615340565b611ca9565b3480156108d257600080fd5b50610423612039565b3480156108e757600080fd5b50610423612048565b3480156108fc57600080fd5b5061044e612057565b34801561091157600080fd5b5061047b610920366004615308565b61205d565b34801561093157600080fd5b5061044e61206e565b34801561094657600080fd5b5061042361213c565b34801561095b57600080fd5b506106b061214b565b34801561097057600080fd5b5061044e61215c565b34801561098557600080fd5b5061044e6109943660046154a9565b612162565b3480156109a557600080fd5b5061044e612195565b3480156109ba57600080fd5b506109c361219b565b604051610430919061585d565b61047b6109de36600461541f565b6121c3565b3480156109ef57600080fd5b5061042361222d565b348015610a0457600080fd5b5061044e610a13366004615308565b61223c565b348015610a2457600080fd5b50610423612263565b348015610a3957600080fd5b5061044e610a483660046155b3565b612272565b348015610a5957600080fd5b50610a6d610a68366004615308565b61227d565b6040516104309493929190615eb8565b348015610a8957600080fd5b5061044e6122e1565b348015610a9e57600080fd5b5061044e6122e7565b348015610ab357600080fd5b5061044e6122ed565b348015610ac857600080fd5b5061044e6122f4565b348015610add57600080fd5b5061044e612306565b348015610af257600080fd5b5061047b610b01366004615308565b612312565b348015610b1257600080fd5b5061047b610b213660046155b3565b612325565b348015610b3257600080fd5b5061044e610b413660046154a9565b612359565b348015610b5257600080fd5b5061044e612378565b348015610b6757600080fd5b5061044e610b763660046154a9565b61237e565b348015610b8757600080fd5b5061044e610b963660046155b3565b6123b4565b348015610ba757600080fd5b5061044e610bb6366004615308565b6123c7565b348015610bc757600080fd5b50610423610bd63660046155b3565b6123e2565b348015610be757600080fd5b506106b0610bf6366004615308565b61240c565b348015610c0757600080fd5b5061047b610c16366004615471565b612421565b348015610c2757600080fd5b506106b0610c36366004615308565b6124a5565b348015610c4757600080fd5b50610423612503565b348015610c5c57600080fd5b5061044e612512565b348015610c7157600080fd5b5061047b610c80366004615308565b61251f565b6008546001600160a01b031681565b600281565b610ca1612530565b600454600554610cbe916001600160a01b0390811691168361255c565b50565b6000610ccb612530565b6001600160a01b038316600090815260116020526040812054610cf4908463ffffffff61266e16565b6001600160a01b03851660009081526011602052604090208190559150505b92915050565b6000610d23612530565b610d2c826126b7565b6001600160801b031690505b919050565b6017602052600090815260409020805460019091015482565b6000610d60612530565b610d1382612751565b60035481565b600f5481565b6001600160a01b03811660009081526011602052604081206003015460ff166004811115610d1357fe5b6064670de0b6b3a76400005b0460050281565b6103e8670de0b6b3a7640000610dab565b6000610dd0600f54612804565b905090565b600b546001600160a01b031681565b6005546001600160a01b031681565b60165481565b6001600160a01b0381166000908152601760205260408120600101546016548290610e2a908363ffffffff61266e16565b9050801580610e63575060016001600160a01b03851660009081526011602052604090206003015460ff166004811115610e6057fe5b14155b15610e7357600092505050610d38565b6001600160a01b03841660009081526011602052604081206002015490610eb8670de0b6b3a7640000610eac848663ffffffff61283a16565b9063ffffffff61287416565b9695505050505050565b3360009081526001602052604090205460ff16610efa5760405162461bcd60e51b8152600401610ef19061592e565b60405180910390fd5b600355565b610f0761512b565b506040805160e0810182526004546001600160a01b03908116825260055481166020830152600b54811692820192909252600d5482166060820152600e5482166080820152600a54821660a082015260095490911660c0820152610f69615167565b610f72856128b3565b610f7a6128ee565b610f84848461299f565b60c08201819052610f9490612ab7565b610f9d8b612ae7565b610fac8260400151338d612b07565b610fb4611b84565b60e0820181905260408084015190516370a0823160e01b81526001600160a01b03909116906370a0823190610fed90339060040161575d565b60206040518083038186803b15801561100557600080fd5b505afa158015611019573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103d91906155cb565b111561104557fe5b8a815260006110558b8385612ba3565b9050611066878b8b8b858789612cf4565b845260408401819052602084019190915260c083015160e084015161108c929190612e95565b5061109a8260400151612f42565b6060830181905260408301516110b1919088612f4f565b8251606080850151908401516040516364a197f360e01b81526001600160a01b03909316926364a197f3926110ea929091600401615771565b600060405180830381600087803b15801561110457600080fd5b505af1158015611118573d6000803e3d6000fd5b5050505082606001516001600160a01b0316631e3e2a1a83606001516040518263ffffffff1660e01b81526004016111509190615e2c565b600060405180830381600087803b15801561116a57600080fd5b505af115801561117e573d6000803e3d6000fd5b50505050606082015160408301516111959161266e565b8260800181815250507f43a3f4082a4dbc33d78e317d2497d3a730bc7fc3574159dcea1056e62e5d9ad88c8360200151846040015185606001516040516111df9493929190615eb8565b60405180910390a182604001516001600160a01b0316639dc29fac3384602001516040518363ffffffff1660e01b815260040161121d929190615771565b600060405180830381600087803b15801561123757600080fd5b505af115801561124b573d6000803e3d6000fd5b5050845160208501516040516305af902160e31b81526001600160a01b039092169350632d7c8108925061128191600401615e2c565b600060405180830381600087803b15801561129b57600080fd5b505af11580156112af573d6000803e3d6000fd5b5050845160808501516040516364a197f360e01b81526001600160a01b0390921693506364a197f392506112e891339190600401615771565b600060405180830381600087803b15801561130257600080fd5b505af1158015611316573d6000803e3d6000fd5b50505050505050505050505050505050565b6000610d136113356117b4565b83612f8f565b6001600160a01b031660009081526011602052604090206001015490565b60c881565b60185490565b6000610d1382612fad565b6714d1120d7b16000081565b611383612530565b80600481111561138f57fe5b6001600160a01b0383166000908152601160205260409020600301805460ff191660018360048111156113be57fe5b02179055505050565b6001600160a01b0381166000908152601760205260408120546015548290610e2a908363ffffffff61266e16565b6113fd612530565b6000611407612fca565b9050670de0b6b3a764000081111561141b57fe5b600f8190556040517fc454ee9b76c52f782a256af821b857ca6e125d1e3333bcede402fec2bed9600c90611450908390615e2c565b60405180910390a1610cbe61300e565b601a5481565b61146e61512b565b506040805160e0810182526004546001600160a01b03908116825260055481166020830152600092820183905260608201839052600e548116608083015260a0820183905260c08201929092526008549091166114c96151ac565b6114d16151dd565b6114db868661299f565b826000018181525050826001600160a01b031663dbd1e2666040518163ffffffff1660e01b815260040160206040518083038186803b15801561151d57600080fd5b505afa158015611531573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155591906155cb565b6020830152815161156590612fad565b158015604084015261158c5761158584836000015184602001518a61306e565b90506115ac565b6115a984600001518560200151846000015185602001518b613423565b90505b60008160200151116115d05760405162461bcd60e51b8152600401610ef190615d9b565b608081015160a082015160405163335525ad60e01b81526001600160a01b0386169263335525ad9261160492600401615e4f565b600060405180830381600087803b15801561161e57600080fd5b505af1158015611632573d6000803e3d6000fd5b50505050611652846000015185602001518360c001518460e00151613561565b610100810151156116c9578351600a546101008301516040516364a197f360e01b81526001600160a01b03938416936364a197f39361169693911691600401615771565b600060405180830381600087803b1580156116b057600080fd5b505af11580156116c4573d6000803e3d6000fd5b505050505b6116db846000015182604001516137c4565b60208101516060830152610100810151604082015182516117139291611707919063ffffffff61266e16565b9063ffffffff61266e16565b608083018190526060808401516040808501519285015190517f4152c73dd2614c4f9fc35e8c9cf16013cd588c75b49a4c1673ecffdcbcda94039461175b9490929091615eb8565b60405180910390a161177b84600001513383606001518460400151613925565b50505050505050565b603c81565b6000610d13611335612512565b6001600160a01b031660009081526011602052604090206002015490565b6000610dd06117c1612fca565b6139f8565b82516117e45760405162461bcd60e51b8152600401610ef190615b9b565b6004546005546008546001600160a01b039283169291821691166118066151ac565b61180e6151dd565b611818878761299f565b826000018181525050826001600160a01b031663dbd1e2666040518163ffffffff1660e01b815260040160206040518083038186803b15801561185a57600080fd5b505afa15801561186e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189291906155cb565b602083015281516118a290612fad565b15801560408401526118ca576118c38585846000015185602001518c613a1f565b90506118e2565b6118df8585846000015185602001518c613c4f565b90505b60008160200151116119065760405162461bcd60e51b8152600401610ef190615d9b565b608081015160a082015160405163335525ad60e01b81526001600160a01b0386169263335525ad9261193a92600401615e4f565b600060405180830381600087803b15801561195457600080fd5b505af1158015611968573d6000803e3d6000fd5b5050505061198085858360c001518460e00151613561565b610100810151156119f757600a546101008201516040516364a197f360e01b81526001600160a01b03888116936364a197f3936119c4939290911691600401615771565b600060405180830381600087803b1580156119de57600080fd5b505af11580156119f2573d6000803e3d6000fd5b505050505b611a058582604001516137c4565b6020810151606083015261010081015160408201518251611a319291611707919063ffffffff61266e16565b608083018190526060808401516040808501519285015190517f4152c73dd2614c4f9fc35e8c9cf16013cd588c75b49a4c1673ecffdcbcda940394611a799490929091615eb8565b60405180910390a1611a95853383606001518460400151613925565b5050505050505050565b60116020526000908152604090208054600182015460028301546003909301549192909160ff81169061010090046001600160801b031685565b6000611ae3612530565b6001600160a01b038316600090815260116020526040812060010154611b0f908463ffffffff613d1716565b6001600160a01b038516600090815260116020526040902060010181905591505092915050565b670de0b6b3a764000081565b6006546001600160a01b031681565b60188181548110611b5e57fe5b6000918252602090912001546001600160a01b0316905081565b670f43fc2c04ee000081565b600480546040805163512a9ebb60e01b8152905160009384936001600160a01b03169263512a9ebb9281830192602092829003018186803b158015611bc857600080fd5b505afa158015611bdc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c0091906155cb565b90506000600560009054906101000a90046001600160a01b03166001600160a01b031663512a9ebb6040518163ffffffff1660e01b815260040160206040518083038186803b158015611c5257600080fd5b505afa158015611c66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c8a91906155cb565b9050611c9c828263ffffffff613d1716565b9250505090565b60195481565b611cb161214b565b611ccd5760405162461bcd60e51b8152600401610ef190615a96565b611cd68b613d3c565b611cdf8a613d3c565b611ce889613d3c565b611cf188613d3c565b611cfa87613d3c565b611d0386613d3c565b611d0c85613d3c565b611d1584613d3c565b611d1e83613d3c565b611d2782613d3c565b611d3081613d3c565b600780546001600160a01b03199081166001600160a01b038e8116919091179092556004805482168d84161790556005805482168c84161790556008805482168b84161790556009805482168a8416179055600a80548216898416179055600680548216888416179055600b80548216878416179055600e80548216868416179055600c80548216858416179055600d80549091169183169190911790556040517f3ca631ffcd2a9b5d9ae18543fc82f58eb4ca33af9e6ab01b7a8e95331e6ed98590611dfe908d9061575d565b60405180910390a17f78f058b189175430c48dc02699e3a0031ea4ff781536dc2fab847de4babdd8828a604051611e35919061575d565b60405180910390a17f5ee0cae2f063ed938bb55046f6a932fb6ae792bf43624806bb90abe68a50be9b89604051611e6c919061575d565b60405180910390a17f82966d27eea39b038ee0fa30cd16532bb24f6e65d31cb58fb227aa5766cdcc7f88604051611ea3919061575d565b60405180910390a17fcfb07d791fcafc032b35837b50eb84b74df518cf4cc287e8084f47630fa70fa087604051611eda919061575d565b60405180910390a17fe67f36a6e961157d6eff83b91f3af5a62131ceb6f04954ef74f51c1c05e7f88d86604051611f11919061575d565b60405180910390a17f8c537274438aa850a330284665d81a85dd38267d09e4050d416bfc94142db26485604051611f48919061575d565b60405180910390a17fbce04ccd812fbb02ec2145498f813470d7b7587b19477428388fe8201a15213184604051611f7f919061575d565b60405180910390a17f65f4cf077bc01e4742eb5ad98326f6e95b63548ea24b17f8d5e823111fe7880083604051611fb6919061575d565b60405180910390a17ff55325269d355f8306353e57757c17459a2218cc11a6e53d0f6ee0c8c16a5e2482604051611fed919061575d565b60405180910390a17f468634f5d5d4ec87457506a98d964db31fea0d63fc80a14ba75267970253ac1481604051612024919061575d565b60405180910390a15050505050505050505050565b600c546001600160a01b031681565b6004546001600160a01b031681565b60135481565b612065612530565b610cbe81613d85565b6004805460408051630a7b61df60e11b8152905160009384936001600160a01b0316926314f6c3be9281830192602092829003018186803b1580156120b257600080fd5b505afa1580156120c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ea91906155cb565b90506000600560009054906101000a90046001600160a01b03166001600160a01b03166314f6c3be6040518163ffffffff1660e01b815260040160206040518083038186803b158015611c5257600080fd5b6000546001600160a01b031690565b6000546001600160a01b0316331490565b60145481565b600061216c612530565b6001600160a01b038316600090815260116020526040812054610cf4908463ffffffff613d1716565b60155481565b6040518060400160405280600c81526020016b2a3937bb32a6b0b730b3b2b960a11b81525081565b6121cc83613de2565b6040805160018082528183019092526060916020808301908036833701905050905083816000815181106121fc57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506122278184846117c6565b50505050565b600e546001600160a01b031681565b600080600061224a84613e2b565b91509150600061225a8383613eb1565b95945050505050565b6007546001600160a01b031681565b6000610d1382613ee6565b6001600160a01b038116600090815260116020526040812080546001909101549091806122a985610df9565b91506122b4856113c7565b90506122c6848363ffffffff613d1716565b93506122d8838263ffffffff613d1716565b92509193509193565b60125481565b60025481565b6212750081565b6000610dd0612301612fca565b612804565b670ddd4b8c6c7d70d881565b61231a612530565b610cbe816002613f0a565b3360009081526001602052604090205460ff166123545760405162461bcd60e51b8152600401610ef19061592e565b600255565b600080600061236785613e2b565b915091506000610eb8838387614016565b60105481565b6000612388612530565b6001600160a01b038316600090815260116020526040812060010154611b0f908463ffffffff61266e16565b6000610d136123c16122f4565b83614046565b6001600160a01b031660009081526011602052604090205490565b6000601882815481106123f157fe5b6000918252602090912001546001600160a01b031692915050565b60016020526000908152604090205460ff1681565b61242961214b565b6124455760405162461bcd60e51b8152600401610ef190615a96565b6001600160a01b03821660008181526001602052604090819020805460ff1916841515179055517f4c97694570a07277810af7e5669ffd5f6a2d6b74b6e9a274b8b870fd5114cf8790612499908490615830565b60405180910390a25050565b600060016001600160a01b03831660009081526011602052604090206003015460ff1660048111156124d357fe5b146124e057506000610d38565b506015546001600160a01b03821660009081526017602052604090205410919050565b600d546001600160a01b031681565b6000610dd0600f546139f8565b612527612530565b610cbe81614086565b6007546001600160a01b0316331461255a5760405162461bcd60e51b8152600401610ef190615b40565b565b612565816124a5565b156126695761257381613de2565b600061257e826113c7565b9050600061258b83610df9565b6001600160a01b0384166000908152601160205260409020600101549091506125ba908363ffffffff613d1716565b6001600160a01b03841660009081526011602052604090206001810191909155546125eb908263ffffffff613d1716565b6001600160a01b03841660009081526011602052604090205561260d83613d85565b612619858583856140d6565b6001600160a01b038316600081815260116020526040808220805460018201546002909201549251600080516020615f3d8339815191529461265e949293929161583b565b60405180910390a250505b505050565b60006126b083836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506141be565b9392505050565b601880546001808201835560008381527fb13d2d76d1f4b7be834882e410b3e3a8afaf69f83600ae24db354391d2378d2e90920180546001600160a01b0319166001600160a01b03861617905591549091612712919061266e565b6001600160a01b039290921660009081526011602052604090206003018054610100600160881b0319166101006001600160801b038516021790555090565b6001600160a01b0381166000908152601160205260408120600101548190612778906141ea565b6001600160a01b0384166000908152601160205260409020600201805490829055601254919250906127c29083906127b6908463ffffffff61266e16565b9063ffffffff613d1716565b60128190556040517f6bac5e0eb3c44eb03a60ab11ec3a2c051771616aecadbcfff2630aabae520382916127f591615e2c565b60405180910390a15092915050565b6000610d1361282c836103e8670de0b6b3a76400005b04600502613d1790919063ffffffff16565b670de0b6b3a7640000614226565b60008261284957506000610d13565b8282028284828161285657fe5b04146126b05760405162461bcd60e51b8152600401610ef190615a55565b60006126b083836040518060400160405280601a815260200179536166654d6174683a206469766973696f6e206279207a65726f60301b81525061423c565b6611c37937e0800081108015906128d25750670de0b6b3a76400008111155b610cbe5760405162461bcd60e51b8152600401610ef190615cca565b600c5460408051631e425be160e11b815290516000926001600160a01b031691633c84b7c2916004808301926020929190829003018186803b15801561293357600080fd5b505afa158015612947573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061296b91906155cb565b9050612980816212750063ffffffff613d1716565b421015610cbe5760405162461bcd60e51b8152600401610ef1906159f7565b6006546040516341e7dc0b60e01b815260009182916001600160a01b03909116906341e7dc0b906129d6908790879060040161581c565b60206040518083038186803b1580156129ee57600080fd5b505afa158015612a02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a2691906155cb565b600654604051630ab04c1d60e11b81529192506001600160a01b031690631560983a908390612a5d90829089908990600401615e35565b6020604051808303818588803b158015612a7657600080fd5b505af1158015612a8a573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190612aaf91906155cb565b949350505050565b670f43fc2c04ee0000612ac982613ee6565b1015610cbe5760405162461bcd60e51b8152600401610ef190615d1a565b60008111610cbe5760405162461bcd60e51b8152600401610ef190615bf1565b6040516370a0823160e01b815281906001600160a01b038516906370a0823190612b3590869060040161575d565b60206040518083038186803b158015612b4d57600080fd5b505afa158015612b61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b8591906155cb565b10156126695760405162461bcd60e51b8152600401610ef190615acb565b6000612bb88260800151858560c00151614273565b15612bc45750826126b0565b81608001516001600160a01b0316634d6228316040518163ffffffff1660e01b815260040160206040518083038186803b158015612c0157600080fd5b505afa158015612c15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c399190615324565b90505b6001600160a01b03811615801590612c685750670f43fc2c04ee0000612c66828560c00151612359565b105b156126b05781608001516001600160a01b031663b72703ac826040518263ffffffff1660e01b8152600401612c9d919061575d565b60206040518083038186803b158015612cb557600080fd5b505afa158015612cc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ced9190615324565b9050612c3c565b6000808089612d035760001999505b6001600160a01b03861615801590612d1b5750845115155b8015612d27575060008a115b15612e55576080840151604051632dc9c0eb60e21b8152600019909b019a6000916001600160a01b03169063b72703ac90612d66908a9060040161575d565b60206040518083038186803b158015612d7e57600080fd5b505afa158015612d92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612db69190615324565b9050612dcb856000015186602001518961255c565b612dd3615229565b612dea868989600001518a60c001518f8f8f6143db565b9050806040015115612dfd575050612e55565b80516020880151612e139163ffffffff613d1716565b6020808901919091528101516040880151612e339163ffffffff613d1716565b604088015280518751612e4b9163ffffffff61266e16565b8752509550612d03565b6000856040015111612e795760405162461bcd60e51b8152600401610ef1906158b0565b5050506020820151604083015183519750975097945050505050565b600080612ea0612fca565b90506000612eb884610eac888863ffffffff61283a16565b90506000612edd612ed083600263ffffffff61287416565b849063ffffffff613d1716565b9050612ef181670de0b6b3a7640000614226565b905060008111612efd57fe5b600f8190556040517fc454ee9b76c52f782a256af821b857ca6e125d1e3333bcede402fec2bed9600c90612f32908390615e2c565b60405180910390a1610eb861300e565b6000610d136123c1610dc3565b6000612f6d83610eac86670de0b6b3a764000063ffffffff61283a16565b9050818111156122275760405162461bcd60e51b8152600401610ef190615d64565b60006126b0670de0b6b3a7640000610eac858563ffffffff61283a16565b600080612fb983613ee6565b6714d1120d7b160000119392505050565b600080612fd5614633565b90506000612feb670ddd4b8c6c7d70d88361464f565b9050611c9c670de0b6b3a7640000610eac83600f5461283a90919063ffffffff16565b60006130256010544261266e90919063ffffffff16565b9050603c8110610cbe574260108190556040517f860f8d2f0c74dd487e89e2883e3b25b8159ce1e1b3433a291cba7b82c508f3bc9161306391615e2c565b60405180910390a150565b6130766151dd565b61307e61524c565b6130866151dd565b84825260006080830152613098611b84565b60a08301526130a561206e565b8260c001818152505086608001516001600160a01b0316634d6228316040518163ffffffff1660e01b815260040160206040518083038186803b1580156130eb57600080fd5b505afa1580156130ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131239190615324565b82606001906001600160a01b031690816001600160a01b031681525050600087608001516001600160a01b0316631e2231436040518163ffffffff1660e01b815260040160206040518083038186803b15801561317f57600080fd5b505afa158015613193573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131b79190615324565b6000602085015290505b8483602001511080156131ea5750806001600160a01b031683606001516001600160a01b031614155b156134185760808801516060840151604051632dc9c0eb60e21b81526000926001600160a01b03169163b72703ac91613226919060040161575d565b60206040518083038186803b15801561323e57600080fd5b505afa158015613252573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132769190615324565b9050613286846060015189612359565b6040850152608084015161338a57670f43fc2c04ee00008460400151101580156132af57508351155b156132ba5750613418565b60006132cf8560c001518660a001518b614016565b8a5160208c01516060880151604089015189519495506132f094868f6146fa565b6080810151865191955061330a919063ffffffff61266e16565b8552608084015160a08601516133259163ffffffff61266e16565b8560a001818152505061335a84610100015161170786604001516117078860a001518a60c0015161266e90919063ffffffff16565b60c086015261336986856149ce565b955061337e8560c001518660a001518b614ae5565b156080860152506133fa565b836080015180156133a65750670f43fc2c04ee00008460400151105b156133f4576133c789600001518a6020015186606001518760000151614b06565b608081015185519194506133e1919063ffffffff61266e16565b84526133ed85846149ce565b94506133fa565b50613418565b6001600160a01b0316606084015260208301805160010190526131c1565b505050949350505050565b61342b6151dd565b61343361524c565b61343b6151dd565b600e54858352600060208401526001600160a01b03165b848360200151101561355557806001600160a01b0316634d6228316040518163ffffffff1660e01b815260040160206040518083038186803b15801561349757600080fd5b505afa1580156134ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134cf9190615324565b6001600160a01b0316606084018190526134e99088612359565b60408401819052670f43fc2c04ee0000111561354057613513898985606001518660000151614b06565b6080810151845191935061352d919063ffffffff61266e16565b835261353984836149ce565b9350613545565b613555565b6020830180516001019052613452565b50505095945050505050565b8161356b57612227565b60195460009061358d906127b684670de0b6b3a764000063ffffffff61283a16565b905060006135b2601a546127b6670de0b6b3a76400008761283a90919063ffffffff16565b905060006135cb6012548461287490919063ffffffff16565b905060006135e46012548461287490919063ffffffff16565b905061360b6135fe6012548461283a90919063ffffffff16565b859063ffffffff61266e16565b6019556012546136339061362690839063ffffffff61283a16565b849063ffffffff61266e16565b601a55601554613649908363ffffffff613d1716565b60155560165461365f908263ffffffff613d1716565b60168190556015546040517f9f8bc8ab0daf5bceef75ecfd2085d1fcc6548c657ea970d9a23a60610d0737e3926136969291615e4f565b60405180910390a16040516305af902160e31b81526001600160a01b03891690632d7c8108906136ca908990600401615e2c565b600060405180830381600087803b1580156136e457600080fd5b505af11580156136f8573d6000803e3d6000fd5b5050604051636b05e97760e01b81526001600160a01b038a169250636b05e9779150613728908990600401615e2c565b600060405180830381600087803b15801561374257600080fd5b505af1158015613756573d6000803e3d6000fd5b50506040516364a197f360e01b81526001600160a01b038b1692506364a197f39150613788908a908990600401615771565b600060405180830381600087803b1580156137a257600080fd5b505af11580156137b6573d6000803e3d6000fd5b505050505050505050505050565b6012546013819055506000826001600160a01b03166314f6c3be6040518163ffffffff1660e01b815260040160206040518083038186803b15801561380857600080fd5b505afa15801561381c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061384091906155cb565b90506000600560009054906101000a90046001600160a01b03166001600160a01b03166314f6c3be6040518163ffffffff1660e01b815260040160206040518083038186803b15801561389257600080fd5b505afa1580156138a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138ca91906155cb565b90506138e0816127b6848663ffffffff61266e16565b60148190556013546040517f51bf4c63ec3cba9d03d43238abbdd979dd91bd16d9895c74ceea9118c7baaf60926139179291615e4f565b60405180910390a150505050565b811561399657600b54600954604051631062c15f60e11b81526001600160a01b03928316926320c582be92613963929116908790879060040161578a565b600060405180830381600087803b15801561397d57600080fd5b505af1158015613991573d6000803e3d6000fd5b505050505b8015612227576040516364a197f360e01b81526001600160a01b038516906364a197f3906139ca9086908590600401615771565b600060405180830381600087803b1580156139e457600080fd5b505af1158015611a95573d6000803e3d6000fd5b6000610d13613a12836103e8670de0b6b3a764000061281a565b66b1a2bc2ec50000614226565b613a276151dd565b613a2f61524c565b613a376151dd565b84825260006080830152613a49611b84565b60a0830152613a5661206e565b60c0830152600060208301525b835182602001511015613c445783826020015181518110613a8057fe5b6020908102919091018101516001600160a01b03166060840181905260009081526011909152604090206003015460019060ff166004811115613abf57fe5b14613ac957613c34565b613ad7826060015187612359565b60408301526080820151613bd657670f43fc2c04ee0000826040015110158015613b0057508151155b15613b0a57613c34565b6000613b1f8360c001518460a0015189614016565b9050613b3c8989856060015186604001518760000151868d6146fa565b60808101518451919350613b56919063ffffffff61266e16565b8352608082015160a0840151613b719163ffffffff61266e16565b8360a0018181525050613ba682610100015161170784604001516117078660a001518860c0015161266e90919063ffffffff16565b60c0840152613bb584836149ce565b9350613bca8360c001518460a0015189614ae5565b15608084015250613c34565b81608001518015613bf25750670f43fc2c04ee00008260400151105b15613c3457613c0b888884606001518560000151614b06565b60808101518351919250613c25919063ffffffff61266e16565b8252613c3183826149ce565b92505b6020820180516001019052613a63565b505095945050505050565b613c576151dd565b613c5f61524c565b613c676151dd565b848252600060208301525b835182602001511015613c445783826020015181518110613c8f57fe5b60209081029190910101516001600160a01b031660608301819052613cb49087612359565b60408301819052670f43fc2c04ee00001115613d0757613cde888884606001518560000151614b06565b60808101518351919250613cf8919063ffffffff61266e16565b8252613d0483826149ce565b92505b6020820180516001019052613c72565b6000828201838110156126b05760405162461bcd60e51b8152600401610ef1906158f9565b6001600160a01b038116613d625760405162461bcd60e51b8152600401610ef190615976565b803b80613d815760405162461bcd60e51b8152600401610ef190615c3f565b5050565b601580546001600160a01b038316600090815260176020526040908190209182556016546001909201829055915491517fc3d426bcfc672bd74f6fae61c225e06f556f80dad48af8a4631b295030a7ad3d926130639285926157fb565b60016001600160a01b03821660009081526011602052604090206003015460ff166004811115613e0e57fe5b14610cbe5760405162461bcd60e51b8152600401610ef190615ddd565b6000806000613e39846113c7565b90506000613e4685610df9565b6001600160a01b03861660009081526011602052604081206001015491925090613e76908463ffffffff613d1716565b6001600160a01b03871660009081526011602052604081205491925090613ea3908463ffffffff613d1716565b919550909350505050915091565b60008115613edd57613ed682610eac8568056bc75e2d6310000063ffffffff61283a16565b9050610d13565b50600019610d13565b600080613ef161206e565b90506000613efd611b84565b9050612aaf828286614016565b6000816004811115613f1857fe5b14158015613f3257506001816004811115613f2f57fe5b14155b613f3857fe5b601854613f4481614c31565b6001600160a01b0383166000908152601160205260409020600301805483919060ff19166001836004811115613f7657fe5b02179055506001600160a01b0383166000908152601160209081526040808320600180820185905590849055601790925282208281550155613fb88382614cd7565b600e54604051631484968760e11b81526001600160a01b03909116906329092d0e90613fe890869060040161575d565b600060405180830381600087803b15801561400257600080fd5b505af115801561177b573d6000803e3d6000fd5b6000821561403d57600061403484610eac878663ffffffff61283a16565b91506126b09050565b506000196126b0565b600080614065670de0b6b3a7640000610eac868663ffffffff61283a16565b90508281106126b05760405162461bcd60e51b8152600401610ef190615c74565b6001600160a01b0381166000908152601160205260409020600201546012546140b5908263ffffffff61266e16565b601255506001600160a01b0316600090815260116020526040812060020155565b6040516305af902160e31b81526001600160a01b03841690632d7c810890614102908590600401615e2c565b600060405180830381600087803b15801561411c57600080fd5b505af1158015614130573d6000803e3d6000fd5b5050604051636b05e97760e01b81526001600160a01b0387169250636b05e9779150614160908590600401615e2c565b600060405180830381600087803b15801561417a57600080fd5b505af115801561418e573d6000803e3d6000fd5b505060405163be41205f60e01b81526001600160a01b038616925063be41205f91506139ca908490600401615e2c565b600081848411156141e25760405162461bcd60e51b8152600401610ef1919061585d565b505050900390565b600080601454600014156141ff575081610d13565b60006013541161420b57fe5b6126b0601454610eac6013548661283a90919063ffffffff16565b600081831061423557816126b0565b5090919050565b6000818361425d5760405162461bcd60e51b8152600401610ef1919061585d565b50600083858161426957fe5b0495945050505050565b60006001600160a01b03831615806143045750604051630bb7c8fd60e31b81526001600160a01b03851690635dbe47e8906142b290869060040161575d565b60206040518083038186803b1580156142ca57600080fd5b505afa1580156142de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143029190615597565b155b8061431f5750670f43fc2c04ee000061431d8484612359565b105b1561432c575060006126b0565b60405163765e015960e01b81526000906001600160a01b0386169063765e01599061435b90879060040161575d565b60206040518083038186803b15801561437357600080fd5b505afa158015614387573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143ab9190615324565b90506001600160a01b038116158061225a5750670f43fc2c04ee00006143d18285612359565b1095945050505050565b6143e3615229565b6002546001600160a01b0388166000908152601160205260409020546144199188916144149163ffffffff61266e16565b614226565b80825261443a908690610eac90670de0b6b3a764000063ffffffff61283a16565b60208083019190915281516001600160a01b03891660009081526011909252604082205461446d9163ffffffff61266e16565b6020808401516001600160a01b038b1660009081526011909252604082206001015492935090916144a39163ffffffff61266e16565b905060025482141561450e576144b889614086565b6144c3896004613f0a565b6144d18a8a60025484614e78565b886001600160a01b0316600080516020615f3d83398151915260008060006003604051614501949392919061583b565b60405180910390a2614625565b600061451a8284613eb1565b90508481141580614534575060035461453284614fdb565b105b156145485750506001604083015250614628565b8a608001516001600160a01b0316632be212608b838a8a6040518563ffffffff1660e01b815260040161457e94939291906157d0565b600060405180830381600087803b15801561459857600080fd5b505af11580156145ac573d6000803e3d6000fd5b5050506001600160a01b038b166000908152601160205260409020848155600101839055506145da8a612751565b506001600160a01b038a1660008181526011602052604090819020600201549051600080516020615f3d8339815191529161461b918791879160039061583b565b60405180910390a2505b50505b979650505050505050565b6000610dd0603c610eac6010544261266e90919063ffffffff16565b6000631f54050082111561466557631f54050091505b816146795750670de0b6b3a7640000610d13565b670de0b6b3a764000083835b60018111156146f057600281066146ba576146a08283614ff2565b91506146b381600263ffffffff61287416565b90506146eb565b6146c48284614ff2565b92506146d08283614ff2565b91506146e86002610eac83600163ffffffff61266e16565b90505b614685565b610eb88284614ff2565b6147026151dd565b61470a615294565b60185460011061471a5750614628565b6147238761227d565b6040850152602084810191909152840181905290835261474290615025565b60408301819052600254606084015260208301516147659163ffffffff61266e16565b8152670de0b6b3a764000086116148305761478a8989836020015184604001516140d6565b61479387614086565b60006080830181905260a0830152815160c0830152805160e08301526147ba876003613f0a565b815160208301516040516001600160a01b038a1692600080516020615f1d833981519152926147eb92600290615e5d565b60405180910390a2866001600160a01b0316600080516020615f3d83398151915260008060006002604051614823949392919061583b565b60405180910390a26149c2565b670de0b6b3a76400008611801561484e5750670f43fc2c04ee000086105b1561489e576148678989836020015184604001516140d6565b61487087614086565b8151815161487f91908761502c565b60e086015260c085015260a084015260808301526147ba876003613f0a565b670f43fc2c04ee000086101580156148b557508386105b80156148c2575081518510155b156149b1576148db8989836020015184604001516140d6565b846148e257fe5b6148eb87614086565b6148fe8260000151836020015185615098565b915061490b876003613f0a565b6101008201511561498057600a54610100830151604051633f10abab60e01b81526001600160a01b0390921691633f10abab9161494d918b9190600401615771565b600060405180830381600087803b15801561496757600080fd5b505af115801561497b573d6000803e3d6000fd5b505050505b815160a08301516040516001600160a01b038a1692600080516020615f1d833981519152926147eb92600290615e5d565b6149b96151dd565b91506146289050565b50979650505050505050565b6149d66151dd565b604080830151908401516149ef9163ffffffff613d1716565b604082015260608083015190840151614a0d9163ffffffff613d1716565b606082015281516020840151614a289163ffffffff613d1716565b6020808301919091528201518351614a459163ffffffff613d1716565b815260808083015190840151614a609163ffffffff613d1716565b608082015260a08083015190840151614a7e9163ffffffff613d1716565b60a082015260c08083015190840151614a9c9163ffffffff613d1716565b60c082015260e08083015190840151614aba9163ffffffff613d1716565b60e08201526101008083015190840151614ad99163ffffffff613d1716565b61010082015292915050565b600080614af3858585614016565b6714d1120d7b1600001195945050505050565b614b0e6151dd565b614b16615294565b614b1f8461227d565b60408501908152602085810192835286019290925291845290519051614b499188918891906140d6565b614b5284614086565b614b5f8260200151615025565b6040830181905260025460608401526020830151600091614b86919063ffffffff61266e16565b9050614b978360000151828661502c565b60e087015260c086015260a08501526080840152614bb6856003613f0a565b825160208401516040516001600160a01b03881692600080516020615f1d83398151915292614be792600190615e5d565b60405180910390a2846001600160a01b0316600080516020615f3d83398151915260008060006001604051614c1f949392919061583b565b60405180910390a25050949350505050565b600181118015614cbb5750600e546040805163de8fa43160e01b815290516001926001600160a01b03169163de8fa431916004808301926020929190829003018186803b158015614c8157600080fd5b505afa158015614c95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614cb991906155cb565b115b610cbe5760405162461bcd60e51b8152600401610ef1906159ad565b6001600160a01b03821660009081526011602052604081206003015460ff1690816004811115614d0357fe5b14158015614d1d57506001816004811115614d1a57fe5b14155b614d2357fe5b6001600160a01b03831660009081526011602052604081206003015461010090046001600160801b0316908390614d5b82600161266e565b905080836001600160801b03161115614d7057fe5b600060188281548110614d7f57fe5b600091825260209091200154601880546001600160a01b03909216925082916001600160801b038716908110614db157fe5b600091825260208083209190910180546001600160a01b0319166001600160a01b03948516179055918316815260119091526040908190206003018054610100600160881b0319166101006001600160801b03881602179055517f02b04ae5f7be9ca7c103293a2aa15f3c339d15d6eda53b721fef7b0e609c831a90614e3a90839087906157ae565b60405180910390a16018805480614e4d57fe5b600082815260209020810160001990810180546001600160a01b031916905501905550505050505050565b6040808501516009549151632770a7eb60e21b81526001600160a01b0391821692639dc29fac92614eb0929116908690600401615771565b600060405180830381600087803b158015614eca57600080fd5b505af1158015614ede573d6000803e3d6000fd5b505085516040516305af902160e31b81526001600160a01b039091169250632d7c81089150614f11908590600401615e2c565b600060405180830381600087803b158015614f2b57600080fd5b505af1158015614f3f573d6000803e3d6000fd5b505050508360a001516001600160a01b0316633f10abab84836040518363ffffffff1660e01b8152600401614f75929190615771565b600060405180830381600087803b158015614f8f57600080fd5b505af1158015614fa3573d6000803e3d6000fd5b5050855160a08701516040516364a197f360e01b81526001600160a01b0390921693506364a197f392506139ca918590600401615771565b6000610d136002548361266e90919063ffffffff16565b600080615005848463ffffffff61283a16565b9050612aaf670de0b6b3a7640000610eac836706f05b59d3b20000613d17565b60c8900490565b60008080808415615082576150418786614226565b935061505787610eac888763ffffffff61283a16565b9250615069878563ffffffff61266e16565b915061507b868463ffffffff61266e16565b905061508f565b5060009250829150859050845b93509350935093565b6150a06151dd565b8381526020810183905260006150c883610eac87670f43fc2c04ee000063ffffffff61283a16565b90506150d381615025565b604083018190526002546060840152608083018690526150fa90829063ffffffff61266e16565b60a083015261510f848263ffffffff61266e16565b61010083015250600060c0820181905260e08201529392505050565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915290565b60405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518060a00160405280600081526020016000815260200160001515815260200160008152602001600081525090565b6040518061012001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604051806060016040528060008152602001600081526020016000151581525090565b6040518060e0016040528060008152602001600081526020016000815260200160006001600160a01b0316815260200160001515815260200160008152602001600081525090565b60405180606001604052806000815260200160008152602001600081525090565b8035610d1381615ef9565b60008083601f8401126152d1578081fd5b5081356001600160401b038111156152e7578182fd5b602083019150836020808302850101111561530157600080fd5b9250929050565b600060208284031215615319578081fd5b81356126b081615ef9565b600060208284031215615335578081fd5b81516126b081615ef9565b60008060008060008060008060008060006101608c8e031215615361578687fd5b8b3561536c81615ef9565b9a5060208c013561537c81615ef9565b995060408c013561538c81615ef9565b985060608c013561539c81615ef9565b975060808c01356153ac81615ef9565b965060a08c01356153bc81615ef9565b955060c08c01356153cc81615ef9565b945060e08c01356153dc81615ef9565b93506101008c01356153ed81615ef9565b92506153fd8d6101208e016152b5565b915061540d8d6101408e016152b5565b90509295989b509295989b9093969950565b600080600060408486031215615433578283fd5b833561543e81615ef9565b925060208401356001600160401b03811115615458578283fd5b615464868287016152c0565b9497909650939450505050565b60008060408385031215615483578182fd5b823561548e81615ef9565b9150602083013561549e81615f0e565b809150509250929050565b600080604083850312156154bb578182fd5b82356154c681615ef9565b946020939093013593505050565b6000806000604084860312156154e8578283fd5b83356001600160401b03808211156154fe578485fd5b81860187601f82011261550f578586fd5b803592508183111561551f578586fd5b602080840261552f828201615ed3565b8581528281019084840183860185018d1015615549578a8bfd5b8a95505b878610156155735761555f8d826152b5565b83526001959095019491840191840161554d565b50985050508701359250508082111561558a578384fd5b50615464868287016152c0565b6000602082840312156155a8578081fd5b81516126b081615f0e565b6000602082840312156155c4578081fd5b5035919050565b6000602082840312156155dc578081fd5b5051919050565b60008060008060008060008060006101008a8c031215615601578485fd5b8935985060208a013561561381615ef9565b975060408a013561562381615ef9565b965060608a013561563381615ef9565b955060808a0135945060a08a0135935060c08a0135925060e08a01356001600160401b03811115615662578283fd5b61566e8c828d016152c0565b8194508093505050509295985092959850929598565b600080600060408486031215615698578081fd5b8335925060208401356001600160401b03811115615458578182fd5b818352602080840193600091908185020181018584845b878110156157425782840389528135601e198836030181126156eb578687fd5b87018035906001600160401b03821115615703578788fd5b813603891315615711578788fd5b818652818782018888013750848101860187905298850198601f01601f1916909301840192908401906001016156cb565b5091979650505050505050565b6004811061575957fe5b9052565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b039290921682526001600160801b0316602082015260400190565b6001600160a01b03948516815260208101939093529083166040830152909116606082015260800190565b6001600160a01b039390931683526020830191909152604082015260600190565b600060208252612aaf6020830184866156b4565b901515815260200190565b84815260208101849052604081018390526080810161225a606083018461574f565b6000602080835283518082850152825b818110156158895785810183015185820160400152820161586d565b8181111561589a5783604083870101525b50601f01601f1916929092016040019392505050565b60208082526029908201527f54726f76654d616e616765723a20556e61626c6520746f2072656465656d20616040820152681b9e48185b5bdd5b9d60ba1b606082015260800190565b6020808252601b908201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b604082015260600190565b60208082526028908201527f436f6e74726f6c6c61626c653a2043616c6c6572206973206e6f74206120636f604082015267373a3937b63632b960c11b606082015260800190565b6020808252601e908201527f4163636f756e742063616e6e6f74206265207a65726f20616464726573730000604082015260600190565b6020808252602a908201527f54726f76654d616e616765723a204f6e6c79206f6e652074726f766520696e206040820152697468652073797374656d60b01b606082015260800190565b602080825260409082018190527f54726f76654d616e616765723a20526564656d7074696f6e7320617265206e6f908201527f7420616c6c6f77656420647572696e6720626f6f747374726170207068617365606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252604f908201527f54726f76654d616e616765723a2052657175657374656420726564656d70746960408201527f6f6e20616d6f756e74206d757374206265203c3d20757365722773205a4b555360608201526e4420746f6b656e2062616c616e636560881b608082015260a00190565b6020808252603b908201527f54726f76654d616e616765723a2043616c6c6572206973206e6f74207468652060408201527a109bdc9c9bddd95c93dc195c985d1a5bdb9cc818dbdb9d1c9858dd602a1b606082015260800190565b60208082526036908201527f54726f76654d616e616765723a2043616c6c646174612061646472657373206160408201527572726179206d757374206e6f7420626520656d70747960501b606082015260800190565b6020808252602e908201527f54726f76654d616e616765723a20416d6f756e74206d7573742062652067726560408201526d61746572207468616e207a65726f60901b606082015260800190565b6020808252818101527f4163636f756e7420636f64652073697a652063616e6e6f74206265207a65726f604082015260600190565b60208082526036908201527f54726f76654d616e616765723a2046656520776f756c642065617420757020616040820152751b1b081c995d1d5c9b99590818dbdb1b185d195c985b60521b606082015260800190565b60208082526030908201527f4d6178206665652070657263656e74616765206d75737420626520626574776560408201526f656e20302e352520616e64203130302560801b606082015260800190565b6020808252602a908201527f54726f76654d616e616765723a2043616e6e6f742072656465656d207768656e604082015269102a21a9101e1026a1a960b11b606082015260800190565b6020808252601d908201527f4665652065786365656465642070726f7669646564206d6178696d756d000000604082015260600190565b60208082526022908201527f54726f76654d616e616765723a206e6f7468696e6720746f206c697175696461604082015261746560f01b606082015260800190565b6020808252602f908201527f54726f76654d616e616765723a2054726f766520646f6573206e6f742065786960408201526e1cdd081bdc881a5cc818db1bdcd959608a1b606082015260800190565b90815260200190565b60008482526040602083015261225a6040830184866156b4565b918252602082015260400190565b8381526020810183905260608101612aaf604083018461574f565b858152602081018590526040810184905260a0810160058410615e9757fe5b60608201939093526001600160801b03919091166080909101529392505050565b93845260208401929092526040830152606082015260800190565b6040518181016001600160401b0381118282101715615ef157600080fd5b604052919050565b6001600160a01b0381168114610cbe57600080fd5b8015158114610cbe57600080fdfeea67486ed7ebe3eea8ab3390efd4a3c8aae48be5bea27df104a8af786c408434c3770d654ed33aeea6bf11ac8ef05d02a6a04ed4686dd2f624d853bbec43cc8ba164736f6c634300060b000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "isOwner()": {
        "details": "Returns true if the caller is the current owner."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4382,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3137,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "controllers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3856,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "ZKUSD_GAS_COMPENSATION",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 3859,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "MIN_NET_DEBT",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 3872,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "activePool",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IActivePool)15165"
      },
      {
        "astId": 3874,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "defaultPool",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IDefaultPool)15481"
      },
      {
        "astId": 3877,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "priceFeed",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IPriceFeed)15606"
      },
      {
        "astId": 25735,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "borrowerOperationsAddress",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 25738,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "stabilityPool",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IStabilityPool)16121"
      },
      {
        "astId": 25740,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "gasPoolAddress",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 25742,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "collSurplusPool",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(ICollSurplusPool)15424"
      },
      {
        "astId": 25745,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "zkusdToken",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(IZKUSDToken)16792"
      },
      {
        "astId": 25748,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "zkToken",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(IZKToken)16733"
      },
      {
        "astId": 25751,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "zktStaking",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(IZKTStaking)16695"
      },
      {
        "astId": 25753,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "sortedTroves",
        "offset": 0,
        "slot": "14",
        "type": "t_contract(ISortedTroves)15885"
      },
      {
        "astId": 25783,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "baseRate",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 25785,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "lastFeeOperationTime",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 25806,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "Troves",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_struct(Trove)25802_storage)"
      },
      {
        "astId": 25808,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "totalStakes",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 25810,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "totalStakesSnapshot",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 25812,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "totalCollateralSnapshot",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 25814,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "L_ETH",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 25816,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "L_ZKUSDDebt",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      },
      {
        "astId": 25820,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "rewardSnapshots",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_address,t_struct(RewardSnapshot)25825_storage)"
      },
      {
        "astId": 25828,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "TroveOwners",
        "offset": 0,
        "slot": "24",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 25830,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "lastETHError_Redistribution",
        "offset": 0,
        "slot": "25",
        "type": "t_uint256"
      },
      {
        "astId": 25832,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "lastZKUSDDebtError_Redistribution",
        "offset": 0,
        "slot": "26",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IActivePool)15165": {
        "encoding": "inplace",
        "label": "contract IActivePool",
        "numberOfBytes": "20"
      },
      "t_contract(ICollSurplusPool)15424": {
        "encoding": "inplace",
        "label": "contract ICollSurplusPool",
        "numberOfBytes": "20"
      },
      "t_contract(IDefaultPool)15481": {
        "encoding": "inplace",
        "label": "contract IDefaultPool",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceFeed)15606": {
        "encoding": "inplace",
        "label": "contract IPriceFeed",
        "numberOfBytes": "20"
      },
      "t_contract(ISortedTroves)15885": {
        "encoding": "inplace",
        "label": "contract ISortedTroves",
        "numberOfBytes": "20"
      },
      "t_contract(IStabilityPool)16121": {
        "encoding": "inplace",
        "label": "contract IStabilityPool",
        "numberOfBytes": "20"
      },
      "t_contract(IZKTStaking)16695": {
        "encoding": "inplace",
        "label": "contract IZKTStaking",
        "numberOfBytes": "20"
      },
      "t_contract(IZKToken)16733": {
        "encoding": "inplace",
        "label": "contract IZKToken",
        "numberOfBytes": "20"
      },
      "t_contract(IZKUSDToken)16792": {
        "encoding": "inplace",
        "label": "contract IZKUSDToken",
        "numberOfBytes": "20"
      },
      "t_enum(Status)25791": {
        "encoding": "inplace",
        "label": "enum TroveManager.Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(RewardSnapshot)25825_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct TroveManager.RewardSnapshot)",
        "numberOfBytes": "32",
        "value": "t_struct(RewardSnapshot)25825_storage"
      },
      "t_mapping(t_address,t_struct(Trove)25802_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct TroveManager.Trove)",
        "numberOfBytes": "32",
        "value": "t_struct(Trove)25802_storage"
      },
      "t_struct(RewardSnapshot)25825_storage": {
        "encoding": "inplace",
        "label": "struct TroveManager.RewardSnapshot",
        "members": [
          {
            "astId": 25822,
            "contract": "contracts/TroveManager.sol:TroveManager",
            "label": "ETH",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 25824,
            "contract": "contracts/TroveManager.sol:TroveManager",
            "label": "ZKUSDDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Trove)25802_storage": {
        "encoding": "inplace",
        "label": "struct TroveManager.Trove",
        "members": [
          {
            "astId": 25793,
            "contract": "contracts/TroveManager.sol:TroveManager",
            "label": "debt",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 25795,
            "contract": "contracts/TroveManager.sol:TroveManager",
            "label": "coll",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 25797,
            "contract": "contracts/TroveManager.sol:TroveManager",
            "label": "stake",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 25799,
            "contract": "contracts/TroveManager.sol:TroveManager",
            "label": "status",
            "offset": 0,
            "slot": "3",
            "type": "t_enum(Status)25791"
          },
          {
            "astId": 25801,
            "contract": "contracts/TroveManager.sol:TroveManager",
            "label": "arrayIndex",
            "offset": 1,
            "slot": "3",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}