{
  "address": "0x88892E1f52aEBbb2DE0f692F5d128Cf5B98aFFf6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract TroveManager",
          "name": "_troveManager",
          "type": "address"
        },
        {
          "internalType": "contract ISortedTroves",
          "name": "_sortedTroves",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "_startIdx",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "_count",
          "type": "uint256"
        }
      ],
      "name": "getMultipleSortedTroves",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "debt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "coll",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "snapshotETH",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "snapshotZKUSDDebt",
              "type": "uint256"
            }
          ],
          "internalType": "struct MultiTroveGetter.CombinedTroveData[]",
          "name": "_troves",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sortedTroves",
      "outputs": [
        {
          "internalType": "contract ISortedTroves",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "troveManager",
      "outputs": [
        {
          "internalType": "contract TroveManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0cfc423dbaa3538959ba77659908d743dd79e36f02639752be8d33edf7d5ec6d",
  "receipt": {
    "to": null,
    "from": "0x88762203C68C8B0b2dD4855AcA764b225e1b1E2E",
    "contractAddress": "0x88892E1f52aEBbb2DE0f692F5d128Cf5B98aFFf6",
    "transactionIndex": 27,
    "gasUsed": "709412",
    "logsBloom": "0x
    "blockHash": "0xd7748810b8f4a54b59ac99affdc79460e2f00a6122ad77ca339e00c2a76a9303",
    "transactionHash": "0x0cfc423dbaa3538959ba77659908d743dd79e36f02639752be8d33edf7d5ec6d",
    "logs": [],
    "blockNumber": 861767,
    "cumulativeGasUsed": "3373230",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE06F4754e94E2b6A462E616Ca3Ec78c6f4674A61",
    "0xa42d52149Fbf58F10a1456CED86039494FB048A9"
  ],
  "numDeployments": 1,
  "solcInputHash": "ffe83ff5afde0d06d4b6b8e37e72100d",
  "metadata": "{\"compiler\":{\"version\":\"0.6.11+commit.5ef660b1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract TroveManager\",\"name\":\"_troveManager\",\"type\":\"address\"},{\"internalType\":\"contract ISortedTroves\",\"name\":\"_sortedTroves\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_startIdx\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"getMultipleSortedTroves\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coll\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"snapshotETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"snapshotZKUSDDebt\",\"type\":\"uint256\"}],\"internalType\":\"struct MultiTroveGetter.CombinedTroveData[]\",\"name\":\"_troves\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sortedTroves\",\"outputs\":[{\"internalType\":\"contract ISortedTroves\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"troveManager\",\"outputs\":[{\"internalType\":\"contract TroveManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MultiTroveGetter.sol\":\"MultiTroveGetter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":50},\"remappings\":[]},\"sources\":{\"contracts/Dependencies/BaseMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.11;\\n\\ncontract BaseMath {\\n    uint public constant DECIMAL_PRECISION = 1e18;\\n}\\n\",\"keccak256\":\"0xedb38df2955774c113e04392c6188ee3e1d3e2814db5bd0a32a76d0a70a54b72\",\"license\":\"MIT\"},\"contracts/Dependencies/CheckContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\ncontract CheckContract {\\n    /**\\n     * Check that the account is an already deployed non-destroyed contract.\\n     * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol#L12\\n     */\\n    function checkContract(address _account) internal view {\\n        require(_account != address(0), \\\"Account cannot be zero address\\\");\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(_account)\\n        }\\n        require(size > 0, \\\"Account code size cannot be zero\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x5cb0f0f94c7c5b8ca01b92ae6448066d13dce5d054e97f1e5a99b5e8bec7cf86\",\"license\":\"MIT\"},\"contracts/Dependencies/Controllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\ncontract Controllable is Ownable {\\n    mapping(address => bool) public controllers;\\n\\n    event ControllerChanged(address indexed controller, bool enabled);\\n\\n    modifier onlyController() {\\n        require(\\n            controllers[msg.sender],\\n            \\\"Controllable: Caller is not a controller\\\"\\n        );\\n        _;\\n    }\\n\\n    function setController(address controller, bool enabled) public onlyOwner {\\n        controllers[controller] = enabled;\\n        emit ControllerChanged(controller, enabled);\\n    }\\n}\\n\",\"keccak256\":\"0x4c068a36fad13b6a89e293a592cc0aab572cb358f65ad2b47f6eafba83c80e36\",\"license\":\"MIT\"},\"contracts/Dependencies/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\n/**\\n * Based on the OpenZeppelin IER20 interface:\\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\\n *\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    function increaseAllowance(\\n        address spender,\\n        uint256 addedValue\\n    ) external returns (bool);\\n\\n    function decreaseAllowance(\\n        address spender,\\n        uint256 subtractedValue\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0x3e47d40e3564300383968dec19ae471645a52766b43b2bd28cd5ec8eaa051d45\",\"license\":\"MIT\"},\"contracts/Dependencies/IERC2612.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\n/**\\n * @dev Interface of the ERC2612 standard as defined in the EIP.\\n *\\n * Adds the {permit} method, which can be used to change one's\\n * {IERC20-allowance} without having to send a transaction, by signing a\\n * message. This allows users to spend tokens without having to hold Ether.\\n *\\n * See https://eips.ethereum.org/EIPS/eip-2612.\\n *\\n * Code adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2237/\\n */\\ninterface IERC2612 {\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over `owner`'s tokens,\\n     * given `owner`'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current ERC2612 nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases `owner`'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     *\\n     * `owner` can limit the time a Permit is valid for by setting `deadline` to\\n     * a value in the near future. The deadline argument can be set to uint(-1) to\\n     * create Permits that effectively never expire.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function version() external view returns (string memory);\\n\\n    function permitTypeHash() external view returns (bytes32);\\n\\n    function domainSeparator() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb4822b28b9d205de5eb2d58a8a0690f314cabf67f3ff55d5a87bbf8ba721f79f\",\"license\":\"MIT\"},\"contracts/Dependencies/LiquityBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\nimport \\\"./BaseMath.sol\\\";\\nimport \\\"./LiquityMath.sol\\\";\\nimport \\\"../Interfaces/IActivePool.sol\\\";\\nimport \\\"../Interfaces/IDefaultPool.sol\\\";\\nimport \\\"../Interfaces/IPriceFeed.sol\\\";\\nimport \\\"../Interfaces/ILiquityBase.sol\\\";\\nimport \\\"./Controllable.sol\\\";\\n\\n/*\\n * Base contract for TroveManager, BorrowerOperations and StabilityPool. Contains global system constants and\\n * common functions.\\n */\\ncontract LiquityBase is BaseMath, ILiquityBase, Controllable {\\n    using SafeMath for uint;\\n\\n    uint public constant _100pct = 1000000000000000000; // 1e18 == 100%\\n\\n    // Minimum collateral ratio for individual troves\\n    uint public constant MCR = 1100000000000000000; // 110%\\n\\n    // Critical system collateral ratio. If the system's total collateral ratio (TCR) falls below the CCR, Recovery Mode is triggered.\\n    uint public constant CCR = 1500000000000000000; // 150%\\n\\n    // Amount of ZKUSD to be locked in gas pool on opening troves\\n    // adjust when need to close last trove\\n    uint public ZKUSD_GAS_COMPENSATION = 50e18;\\n\\n    // Minimum amount of net ZKUSD debt a trove must have\\n    // adjust when need to close last trove\\n    uint public MIN_NET_DEBT = 450e18;\\n    // uint constant public MIN_NET_DEBT = 0;\\n\\n    uint public constant PERCENT_DIVISOR = 200; // dividing by 200 yields 0.5%\\n\\n    uint public constant BORROWING_FEE_FLOOR = (DECIMAL_PRECISION / 1000) * 5; // 0.5%\\n\\n    IActivePool public activePool;\\n\\n    IDefaultPool public defaultPool;\\n\\n    IPriceFeed public override priceFeed;\\n\\n    function setMinNetDebt(uint _minNetDebt) external onlyController {\\n        MIN_NET_DEBT = _minNetDebt;\\n    }\\n\\n    function setGasCompensation(uint _gasCompensation) external onlyController {\\n        ZKUSD_GAS_COMPENSATION = _gasCompensation;\\n    }\\n\\n    // --- Gas compensation functions ---\\n\\n    // Returns the composite debt (drawn debt + gas compensation) of a trove, for the purpose of ICR calculation\\n    function _getCompositeDebt(uint _debt) internal view returns (uint) {\\n        return _debt.add(ZKUSD_GAS_COMPENSATION);\\n    }\\n\\n    function _getNetDebt(uint _debt) internal view returns (uint) {\\n        return _debt.sub(ZKUSD_GAS_COMPENSATION);\\n    }\\n\\n    // Return the amount of ETH to be drawn from a trove's collateral and sent as gas compensation.\\n    function _getCollGasCompensation(\\n        uint _entireColl\\n    ) internal pure returns (uint) {\\n        return _entireColl / PERCENT_DIVISOR;\\n    }\\n\\n    function getEntireSystemColl() public view returns (uint entireSystemColl) {\\n        uint activeColl = activePool.getETH();\\n        uint liquidatedColl = defaultPool.getETH();\\n\\n        return activeColl.add(liquidatedColl);\\n    }\\n\\n    function getEntireSystemDebt() public view returns (uint entireSystemDebt) {\\n        uint activeDebt = activePool.getZKUSDDebt();\\n        uint closedDebt = defaultPool.getZKUSDDebt();\\n\\n        return activeDebt.add(closedDebt);\\n    }\\n\\n    function _getTCR(uint _price) internal view returns (uint TCR) {\\n        uint entireSystemColl = getEntireSystemColl();\\n        uint entireSystemDebt = getEntireSystemDebt();\\n\\n        TCR = LiquityMath._computeCR(\\n            entireSystemColl,\\n            entireSystemDebt,\\n            _price\\n        );\\n\\n        return TCR;\\n    }\\n\\n    function _checkRecoveryMode(uint _price) internal view returns (bool) {\\n        uint TCR = _getTCR(_price);\\n\\n        return TCR < CCR;\\n    }\\n\\n    function _requireUserAcceptsFee(\\n        uint _fee,\\n        uint _amount,\\n        uint _maxFeePercentage\\n    ) internal pure {\\n        uint feePercentage = _fee.mul(DECIMAL_PRECISION).div(_amount);\\n        require(\\n            feePercentage <= _maxFeePercentage,\\n            \\\"Fee exceeded provided maximum\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x26dbc8dc5a14e92240c7ed1b33d0684e89a2846efb69db176c8f838e1e6d13b5\",\"license\":\"MIT\"},\"contracts/Dependencies/LiquityMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./console.sol\\\";\\n\\nlibrary LiquityMath {\\n    using SafeMath for uint;\\n\\n    uint internal constant DECIMAL_PRECISION = 1e18;\\n\\n    /* Precision for Nominal ICR (independent of price). Rationale for the value:\\n     *\\n     * - Making it \\u201ctoo high\\u201d could lead to overflows.\\n     * - Making it \\u201ctoo low\\u201d could lead to an ICR equal to zero, due to truncation from Solidity floor division.\\n     *\\n     * This value of 1e20 is chosen for safety: the NICR will only overflow for numerator > ~1e39 ETH,\\n     * and will only truncate to 0 if the denominator is at least 1e20 times greater than the numerator.\\n     *\\n     */\\n    uint internal constant NICR_PRECISION = 1e20;\\n\\n    function _min(uint _a, uint _b) internal pure returns (uint) {\\n        return (_a < _b) ? _a : _b;\\n    }\\n\\n    function _max(uint _a, uint _b) internal pure returns (uint) {\\n        return (_a >= _b) ? _a : _b;\\n    }\\n\\n    /*\\n     * Multiply two decimal numbers and use normal rounding rules:\\n     * -round product up if 19'th mantissa digit >= 5\\n     * -round product down if 19'th mantissa digit < 5\\n     *\\n     * Used only inside the exponentiation, _decPow().\\n     */\\n    function decMul(uint x, uint y) internal pure returns (uint decProd) {\\n        uint prod_xy = x.mul(y);\\n\\n        decProd = prod_xy.add(DECIMAL_PRECISION / 2).div(DECIMAL_PRECISION);\\n    }\\n\\n    /*\\n     * _decPow: Exponentiation function for 18-digit decimal base, and integer exponent n.\\n     *\\n     * Uses the efficient \\\"exponentiation by squaring\\\" algorithm. O(log(n)) complexity.\\n     *\\n     * Called by two functions that represent time in units of minutes:\\n     * 1) TroveManager._calcDecayedBaseRate\\n     * 2) CommunityIssuance._getCumulativeIssuanceFraction\\n     *\\n     * The exponent is capped to avoid reverting due to overflow. The cap 525600000 equals\\n     * \\\"minutes in 1000 years\\\": 60 * 24 * 365 * 1000\\n     *\\n     * If a period of > 1000 years is ever used as an exponent in either of the above functions, the result will be\\n     * negligibly different from just passing the cap, since:\\n     *\\n     * In function 1), the decayed base rate will be 0 for 1000 years or > 1000 years\\n     * In function 2), the difference in tokens issued at 1000 years and any time > 1000 years, will be negligible\\n     */\\n    function _decPow(uint _base, uint _minutes) internal pure returns (uint) {\\n        if (_minutes > 525600000) {\\n            _minutes = 525600000;\\n        } // cap to avoid overflow\\n\\n        if (_minutes == 0) {\\n            return DECIMAL_PRECISION;\\n        }\\n\\n        uint y = DECIMAL_PRECISION;\\n        uint x = _base;\\n        uint n = _minutes;\\n\\n        // Exponentiation-by-squaring\\n        while (n > 1) {\\n            if (n % 2 == 0) {\\n                x = decMul(x, x);\\n                n = n.div(2);\\n            } else {\\n                // if (n % 2 != 0)\\n                y = decMul(x, y);\\n                x = decMul(x, x);\\n                n = (n.sub(1)).div(2);\\n            }\\n        }\\n\\n        return decMul(x, y);\\n    }\\n\\n    function _getAbsoluteDifference(\\n        uint _a,\\n        uint _b\\n    ) internal pure returns (uint) {\\n        return (_a >= _b) ? _a.sub(_b) : _b.sub(_a);\\n    }\\n\\n    function _computeNominalCR(\\n        uint _coll,\\n        uint _debt\\n    ) internal pure returns (uint) {\\n        if (_debt > 0) {\\n            return _coll.mul(NICR_PRECISION).div(_debt);\\n        }\\n        // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n        else {\\n            // if (_debt == 0)\\n            return 2 ** 256 - 1;\\n        }\\n    }\\n\\n    function _computeCR(\\n        uint _coll,\\n        uint _debt,\\n        uint _price\\n    ) internal pure returns (uint) {\\n        if (_debt > 0) {\\n            uint newCollRatio = _coll.mul(_price).div(_debt);\\n\\n            return newCollRatio;\\n        }\\n        // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n        else {\\n            // if (_debt == 0)\\n            return 2 ** 256 - 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeb122176b1348d2617ed7bf7c3b962a664841b9d8b75a52e23601661ed651c1f\",\"license\":\"MIT\"},\"contracts/Dependencies/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\n/**\\n * Based on OpenZeppelin's Ownable contract:\\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\\n *\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() internal {\\n        _owner = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return msg.sender == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     *\\n     * NOTE: This function is not safe, as it doesn\\u2019t check owner is calling it.\\n     * Make sure you check it before calling it.\\n     */\\n    function _renounceOwnership() internal {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n}\\n\",\"keccak256\":\"0xde881d9dc03f7c4fdef3bd8e22288ada00f87dccd8071d927cbd1078452b265b\",\"license\":\"MIT\"},\"contracts/Dependencies/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\n/**\\n * Based on OpenZeppelin's SafeMath:\\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/SafeMath.sol\\n *\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x1bca79004f4eae2412520cd8dffddd575e28a5f1e73240011fe41c1b38938263\",\"license\":\"MIT\"},\"contracts/Dependencies/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\n// Buidler's helper contract for console logging\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n    function log() internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log()\\\")\\n        );\\n        ignored;\\n    }\\n\\n    function logInt(int p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(int)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logUint(uint p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logString(string memory p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBool(bool p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logAddress(address p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes(bytes memory p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logByte(bytes1 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(byte)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes1(bytes1 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes1)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes2(bytes2 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes2)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes3(bytes3 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes3)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes4(bytes4 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes4)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes5(bytes5 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes5)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes6(bytes6 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes6)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes7(bytes7 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes7)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes8(bytes8 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes8)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes9(bytes9 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes9)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes10(bytes10 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes10)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes11(bytes11 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes11)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes12(bytes12 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes12)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes13(bytes13 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes13)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes14(bytes14 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes14)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes15(bytes15 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes15)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes16(bytes16 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes16)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes17(bytes17 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes17)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes18(bytes18 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes18)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes19(bytes19 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes19)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes20(bytes20 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes20)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes21(bytes21 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes21)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes22(bytes22 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes22)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes23(bytes23 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes23)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes24(bytes24 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes24)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes25(bytes25 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes25)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes26(bytes26 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes26)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes27(bytes27 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes27)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes28(bytes28 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes28)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes29(bytes29 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes29)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes30(bytes30 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes30)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes31(bytes31 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes31)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes32(bytes32 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes32)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, string memory p1) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, uint p1) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, string memory p1) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, bool p1) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, address p1) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, string memory p1) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, string memory p1) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, address p1) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, uint p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, bool p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, address p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, string memory p1, address p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, uint p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, bool p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, address p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, uint p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, string memory p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, bool p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, address p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, uint p1, address p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, address p1, uint p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, uint p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, bool p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, address p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, uint p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, uint p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, uint p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, string memory p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, bool p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, address p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, string memory p1, uint p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, uint p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, address p1, uint p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, address p1, address p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        uint p0,\\n        uint p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, address p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, address p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, address p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, address p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        uint p0,\\n        string memory p1,\\n        uint p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        uint p0,\\n        string memory p1,\\n        string memory p2,\\n        uint p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        uint p0,\\n        string memory p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        uint p0,\\n        string memory p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        uint p0,\\n        string memory p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        uint p0,\\n        string memory p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, string memory p1, address p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        uint p0,\\n        string memory p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, string memory p1, address p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        uint p0,\\n        string memory p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        uint p0,\\n        bool p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, address p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, address p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, address p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, address p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, uint p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, uint p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, uint p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, uint p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, string memory p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        uint p0,\\n        address p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, string memory p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        uint p0,\\n        address p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, bool p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, bool p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, bool p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, bool p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, address p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        uint p0,\\n        address p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, address p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, address p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint p1,\\n        uint p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint p1,\\n        string memory p2,\\n        uint p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, uint p1, address p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, uint p1, address p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        uint p2,\\n        uint p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        uint p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        uint p2,\\n        bool p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        uint p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2,\\n        uint p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        bool p2,\\n        uint p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        address p2,\\n        uint p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        uint p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        string memory p2,\\n        uint p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, address p1, uint p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        uint p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, address p1, uint p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        uint p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        string memory p2,\\n        uint p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        address p2,\\n        uint p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, address p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, address p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, address p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, address p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        uint p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        string memory p2,\\n        uint p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, uint p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, uint p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, uint p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, uint p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, uint p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, uint p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, uint p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, uint p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, string memory p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        uint p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, string memory p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        uint p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, bool p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, bool p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, bool p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, bool p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, address p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        uint p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, address p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, address p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, string memory p1, uint p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        uint p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, string memory p1, uint p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        uint p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        string memory p2,\\n        uint p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        address p2,\\n        uint p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, uint p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, uint p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, uint p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, uint p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, address p1, uint p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        uint p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, address p1, uint p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, address p1, uint p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        string memory p2,\\n        uint p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, address p1, address p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n}\\n\",\"keccak256\":\"0xa8fd2dde0b73d2b0d4bbf1049d5fdb943868bb090abaf161947d2a80b1bd0e4b\",\"license\":\"MIT\"},\"contracts/Interfaces/IActivePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\nimport \\\"./IPool.sol\\\";\\n\\ninterface IActivePool is IPool {\\n    // --- Events ---\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolZKUSDDebtUpdated(uint _ZKUSDDebt);\\n    event ActivePoolETHBalanceUpdated(uint _ETH);\\n\\n    // --- Functions ---\\n    function sendETH(address _account, uint _amount) external;\\n}\\n\",\"keccak256\":\"0xe19be4181014505b9bec0dedf6ea23499b8f152eb1854a0510cba056d973823f\",\"license\":\"MIT\"},\"contracts/Interfaces/IBorrowerOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\n// Common interface for the Trove Manager.\\ninterface IBorrowerOperations {\\n    // --- Events ---\\n\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolAddressChanged(address _activePoolAddress);\\n    event DefaultPoolAddressChanged(address _defaultPoolAddress);\\n    event StabilityPoolAddressChanged(address _stabilityPoolAddress);\\n    event GasPoolAddressChanged(address _gasPoolAddress);\\n    event CollSurplusPoolAddressChanged(address _collSurplusPoolAddress);\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\n    event SortedTrovesAddressChanged(address _sortedTrovesAddress);\\n    event ZKUSDTokenAddressChanged(address _zkusdTokenAddress);\\n    event ZKTStakingAddressChanged(address _zktStakingAddress);\\n\\n    event TroveCreated(address indexed _borrower, uint arrayIndex);\\n    event TroveUpdated(\\n        address indexed _borrower,\\n        uint _debt,\\n        uint _coll,\\n        uint stake,\\n        uint8 operation\\n    );\\n    event ZKUSDBorrowingFeePaid(address indexed _borrower, uint _ZKUSDFee);\\n\\n    // --- Functions ---\\n\\n    function setAddresses(\\n        address _troveManagerAddress,\\n        address _activePoolAddress,\\n        address _defaultPoolAddress,\\n        address _stabilityPoolAddress,\\n        address _gasPoolAddress,\\n        address _collSurplusPoolAddress,\\n        address _priceFeedAddress,\\n        address _sortedTrovesAddress,\\n        address _zkusdTokenAddress,\\n        address _zktStakingAddress\\n    ) external;\\n\\n    function openTrove(\\n        uint _maxFee,\\n        uint _ZKUSDAmount,\\n        address _upperHint,\\n        address _lowerHint,\\n        bytes[] calldata _updateData\\n    ) external payable;\\n\\n    function addColl(\\n        address _upperHint,\\n        address _lowerHint,\\n        bytes[] calldata _updateData\\n    ) external payable;\\n\\n    function moveETHGainToTrove(\\n        address _user,\\n        address _upperHint,\\n        address _lowerHint,\\n        bytes[] calldata _updateData\\n    ) external payable;\\n\\n    function withdrawColl(\\n        uint _amount,\\n        address _upperHint,\\n        address _lowerHint,\\n        bytes[] calldata _updateData\\n    ) external payable;\\n\\n    function withdrawZKUSD(\\n        uint _maxFee,\\n        uint _amount,\\n        address _upperHint,\\n        address _lowerHint,\\n        bytes[] calldata _updateData\\n    ) external payable;\\n\\n    function repayZKUSD(\\n        uint _amount,\\n        address _upperHint,\\n        address _lowerHint,\\n        bytes[] calldata _updateData\\n    ) external payable;\\n\\n    function closeTrove(bytes[] calldata _updateData) external payable;\\n\\n    function adjustTrove(\\n        uint _maxFee,\\n        uint _collWithdrawal,\\n        uint _debtChange,\\n        bool isDebtIncrease,\\n        address _upperHint,\\n        address _lowerHint,\\n        bytes[] calldata _updateData\\n    ) external payable;\\n\\n    function claimCollateral() external;\\n\\n    function getCompositeDebt(uint _debt) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x6df264aacc88847231ebaf0632ab769faede4bc6801702cf70356440843aa636\",\"license\":\"MIT\"},\"contracts/Interfaces/ICollSurplusPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\ninterface ICollSurplusPool {\\n    // --- Events ---\\n\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n\\n    event CollBalanceUpdated(address indexed _account, uint _newBalance);\\n    event EtherSent(address _to, uint _amount);\\n\\n    // --- Contract setters ---\\n\\n    function setAddresses(\\n        address _borrowerOperationsAddress,\\n        address _troveManagerAddress,\\n        address _activePoolAddress\\n    ) external;\\n\\n    function getETH() external view returns (uint);\\n\\n    function getCollateral(address _account) external view returns (uint);\\n\\n    function accountSurplus(address _account, uint _amount) external;\\n\\n    function claimColl(address _account) external;\\n}\\n\",\"keccak256\":\"0x1b3d7f6e8b74991ea8a6437fc0f736c48646f84f7026f69842b6e436262c2d24\",\"license\":\"MIT\"},\"contracts/Interfaces/IDefaultPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\nimport \\\"./IPool.sol\\\";\\n\\ninterface IDefaultPool is IPool {\\n    // --- Events ---\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event DefaultPoolZKUSDDebtUpdated(uint _ZKUSDDebt);\\n    event DefaultPoolETHBalanceUpdated(uint _ETH);\\n\\n    // --- Functions ---\\n    function sendETHToActivePool(uint _amount) external;\\n}\\n\",\"keccak256\":\"0xe6738093082df33d09ca2a1c69cffce58668ef1f97b28d734bfcde5daeab5ef2\",\"license\":\"MIT\"},\"contracts/Interfaces/ILiquityBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\nimport \\\"./IPriceFeed.sol\\\";\\n\\ninterface ILiquityBase {\\n    function priceFeed() external view returns (IPriceFeed);\\n}\\n\",\"keccak256\":\"0xe5664f10e955ae7452671d39d948171a2d7cabea55532dc8abd603a2e0cf4e1e\",\"license\":\"MIT\"},\"contracts/Interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\n// Common interface for the Pools.\\ninterface IPool {\\n    // --- Events ---\\n\\n    event ETHBalanceUpdated(uint _newBalance);\\n    event ZKUSDBalanceUpdated(uint _newBalance);\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n    event DefaultPoolAddressChanged(address _newDefaultPoolAddress);\\n    event StabilityPoolAddressChanged(address _newStabilityPoolAddress);\\n    event EtherSent(address _to, uint _amount);\\n\\n    // --- Functions ---\\n\\n    function getETH() external view returns (uint);\\n\\n    function getZKUSDDebt() external view returns (uint);\\n\\n    function increaseZKUSDDebt(uint _amount) external;\\n\\n    function decreaseZKUSDDebt(uint _amount) external;\\n}\\n\",\"keccak256\":\"0x91c4a9dfa5d962cbf37acb1b16dd829ba8e0558be932f433b08e10689b840f45\",\"license\":\"MIT\"},\"contracts/Interfaces/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\ninterface IPriceFeed {\\n    // --- Events ---\\n    event LastGoodPriceUpdated(uint _lastGoodPrice);\\n\\n    // --- Function ---\\n    function fetchPrice() external returns (uint);\\n\\n    function fetchPullPrice(\\n        uint fee,\\n        bytes[] calldata updateData\\n    ) external payable returns (uint);\\n\\n    function fetchUpdateFee(\\n        bytes[] calldata updateData\\n    ) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xd075538be5175dcd41e8308b44e037d078af7d9eccc526e23614a73dd2e8682d\",\"license\":\"MIT\"},\"contracts/Interfaces/ISortedTroves.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\n// Common interface for the SortedTroves Doubly Linked List.\\ninterface ISortedTroves {\\n    // --- Events ---\\n\\n    event SortedTrovesAddressChanged(address _sortedDoublyLLAddress);\\n    event BorrowerOperationsAddressChanged(address _borrowerOperationsAddress);\\n    event NodeAdded(address _id, address _prevId, address _nextId, uint _NICR);\\n    event NodeRemoved(address _id);\\n    event UpdateLink(address _head, address _tail, uint256 _currentSize);\\n\\n    // --- Functions ---\\n\\n    function setParams(\\n        uint256 _size,\\n        address _TroveManagerAddress,\\n        address _borrowerOperationsAddress\\n    ) external;\\n\\n    function insert(\\n        address _id,\\n        uint256 _ICR,\\n        address _prevId,\\n        address _nextId\\n    ) external;\\n\\n    function remove(address _id) external;\\n\\n    function reInsert(\\n        address _id,\\n        uint256 _newICR,\\n        address _prevId,\\n        address _nextId\\n    ) external;\\n\\n    function contains(address _id) external view returns (bool);\\n\\n    function isFull() external view returns (bool);\\n\\n    function isEmpty() external view returns (bool);\\n\\n    function getSize() external view returns (uint256);\\n\\n    function getMaxSize() external view returns (uint256);\\n\\n    function getFirst() external view returns (address);\\n\\n    function getLast() external view returns (address);\\n\\n    function getNext(address _id) external view returns (address);\\n\\n    function getPrev(address _id) external view returns (address);\\n\\n    function validInsertPosition(\\n        uint256 _ICR,\\n        address _prevId,\\n        address _nextId\\n    ) external view returns (bool);\\n\\n    function findInsertPosition(\\n        uint256 _ICR,\\n        address _prevId,\\n        address _nextId\\n    ) external view returns (address, address);\\n}\\n\",\"keccak256\":\"0x40fa13e2b9a7e1e2f11ec26626662b42e332a69bcd70582ccbbf9ab504308a77\",\"license\":\"MIT\"},\"contracts/Interfaces/IStabilityPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\n/*\\n * The Stability Pool holds ZKUSD tokens deposited by Stability Pool depositors.\\n *\\n * When a trove is liquidated, then depending on system conditions, some of its ZKUSD debt gets offset with\\n * ZKUSD in the Stability Pool:  that is, the offset debt evaporates, and an equal amount of ZKUSD tokens in the Stability Pool is burned.\\n *\\n * Thus, a liquidation causes each depositor to receive a ZKUSD loss, in proportion to their deposit as a share of total deposits.\\n * They also receive an ETH gain, as the ETH collateral of the liquidated trove is distributed among Stability depositors,\\n * in the same proportion.\\n *\\n * When a liquidation occurs, it depletes every deposit by the same fraction: for example, a liquidation that depletes 40%\\n * of the total ZKUSD in the Stability Pool, depletes 40% of each deposit.\\n *\\n * A deposit that has experienced a series of liquidations is termed a \\\"compounded deposit\\\": each liquidation depletes the deposit,\\n * multiplying it by some factor in range ]0,1[\\n *\\n * Please see the implementation spec in the proof document, which closely follows on from the compounded deposit / ETH gain derivations:\\n * https://github.com/liquity/liquity/blob/master/papers/Scalable_Reward_Distribution_with_Compounding_Stakes.pdf\\n *\\n * --- ZKT ISSUANCE TO STABILITY POOL DEPOSITORS ---\\n *\\n * An ZKT issuance event occurs at every deposit operation, and every liquidation.\\n *\\n * Each deposit is tagged with the address of the front end through which it was made.\\n *\\n * All deposits earn a share of the issued ZKT in proportion to the deposit as a share of total deposits. The ZKT earned\\n * by a given deposit, is split between the depositor and the front end through which the deposit was made, based on the front end's kickbackRate.\\n *\\n * Please see the system Readme for an overview:\\n * https://github.com/liquity/dev/blob/main/README.md#zkt-issuance-to-stability-providers\\n */\\ninterface IStabilityPool {\\n    // --- Events ---\\n\\n    event StabilityPoolETHBalanceUpdated(uint _newBalance);\\n    event StabilityPoolZKUSDBalanceUpdated(uint _newBalance);\\n\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n    event DefaultPoolAddressChanged(address _newDefaultPoolAddress);\\n    event ZKUSDTokenAddressChanged(address _newZKUSDTokenAddress);\\n    event SortedTrovesAddressChanged(address _newSortedTrovesAddress);\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\n    event CommunityIssuanceAddressChanged(address _newCommunityIssuanceAddress);\\n\\n    event P_Updated(uint _P);\\n    event S_Updated(uint _S, uint128 _epoch, uint128 _scale);\\n    event G_Updated(uint _G, uint128 _epoch, uint128 _scale);\\n    event EpochUpdated(uint128 _currentEpoch);\\n    event ScaleUpdated(uint128 _currentScale);\\n\\n    event FrontEndRegistered(address indexed _frontEnd, uint _kickbackRate);\\n    event FrontEndTagSet(address indexed _depositor, address indexed _frontEnd);\\n\\n    event DepositSnapshotUpdated(\\n        address indexed _depositor,\\n        uint _P,\\n        uint _S,\\n        uint _G\\n    );\\n    event FrontEndSnapshotUpdated(address indexed _frontEnd, uint _P, uint _G);\\n    event UserDepositChanged(address indexed _depositor, uint _newDeposit);\\n    event FrontEndStakeChanged(\\n        address indexed _frontEnd,\\n        uint _newFrontEndStake,\\n        address _depositor\\n    );\\n\\n    event ETHGainWithdrawn(\\n        address indexed _depositor,\\n        uint _ETH,\\n        uint _ZKUSDLoss\\n    );\\n    event ZKTPaidToDepositor(address indexed _depositor, uint _ZKT);\\n    event ZKTPaidToFrontEnd(address indexed _frontEnd, uint _ZKT);\\n    event EtherSent(address _to, uint _amount);\\n\\n    // --- Functions ---\\n\\n    /*\\n     * Called only once on init, to set addresses of other Liquity contracts\\n     * Callable only by owner, renounces ownership at the end\\n     */\\n    function setAddresses(\\n        address _borrowerOperationsAddress,\\n        address _troveManagerAddress,\\n        address _activePoolAddress,\\n        address _zkusdTokenAddress,\\n        address _sortedTrovesAddress,\\n        address _priceFeedAddress,\\n        address _communityIssuanceAddress,\\n        address _treasuryAddress\\n    ) external;\\n\\n    /*\\n     * Initial checks:\\n     * - Frontend is registered or zero address\\n     * - Sender is not a registered frontend\\n     * - _amount is not zero\\n     * ---\\n     * - Triggers a ZKT issuance, based on time passed since the last issuance. The ZKT issuance is shared between *all* depositors and front ends\\n     * - Tags the deposit with the provided front end tag param, if it's a new deposit\\n     * - Sends depositor's accumulated gains (ZKT, ETH) to depositor\\n     * - Sends the tagged front end's accumulated ZKT gains to the tagged front end\\n     * - Increases deposit and tagged front end's stake, and takes new snapshots for each.\\n     */\\n    function provideToSP(uint _amount) external;\\n\\n    /*\\n     * Initial checks:\\n     * - _amount is zero or there are no under collateralized troves left in the system\\n     * - User has a non zero deposit\\n     * ---\\n     * - Triggers a ZKT issuance, based on time passed since the last issuance. The ZKT issuance is shared between *all* depositors and front ends\\n     * - Removes the deposit's front end tag if it is a full withdrawal\\n     * - Sends all depositor's accumulated gains (ZKT, ETH) to depositor\\n     * - Sends the tagged front end's accumulated ZKT gains to the tagged front end\\n     * - Decreases deposit and tagged front end's stake, and takes new snapshots for each.\\n     *\\n     * If _amount > userDeposit, the user withdraws all of their compounded deposit.\\n     */\\n    function withdrawFromSP(\\n        uint _amount,\\n        bytes[] calldata _updateData\\n    ) external payable;\\n\\n    /*\\n     * Initial checks:\\n     * - User has a non zero deposit\\n     * - User has an open trove\\n     * - User has some ETH gain\\n     * ---\\n     * - Triggers a ZKT issuance, based on time passed since the last issuance. The ZKT issuance is shared between *all* depositors and front ends\\n     * - Sends all depositor's ZKT gain to  depositor\\n     * - Sends all tagged front end's ZKT gain to the tagged front end\\n     * - Transfers the depositor's entire ETH gain from the Stability Pool to the caller's trove\\n     * - Leaves their compounded deposit in the Stability Pool\\n     * - Updates snapshots for deposit and tagged front end stake\\n     */\\n    function withdrawETHGainToTrove(\\n        address _upperHint,\\n        address _lowerHint,\\n        bytes[] calldata _updateData\\n    ) external payable;\\n\\n    /*\\n     * Initial checks:\\n     * - Caller is TroveManager\\n     * ---\\n     * Cancels out the specified debt against the ZKUSD contained in the Stability Pool (as far as possible)\\n     * and transfers the Trove's ETH collateral from ActivePool to StabilityPool.\\n     * Only called by liquidation functions in the TroveManager.\\n     */\\n    function offset(uint _debt, uint _coll) external;\\n\\n    /*\\n     * Returns the total amount of ETH held by the pool, accounted in an internal variable instead of `balance`,\\n     * to exclude edge cases like ETH received from a self-destruct.\\n     */\\n    function getETH() external view returns (uint);\\n\\n    /*\\n     * Returns ZKUSD held in the pool. Changes when users deposit/withdraw, and when Trove debt is offset.\\n     */\\n    function getTotalZKUSDDeposits() external view returns (uint);\\n\\n    /*\\n     * Calculates the ETH gain earned by the deposit since its last snapshots were taken.\\n     */\\n    function getDepositorETHGain(\\n        address _depositor\\n    ) external view returns (uint);\\n\\n    /*\\n     * Calculate the ZKT gain earned by a deposit since its last snapshots were taken.\\n     * If not tagged with a front end, the depositor gets a 100% cut of what their deposit earned.\\n     * Otherwise, their cut of the deposit's earnings is equal to the kickbackRate, set by the front end through\\n     * which they made their deposit.\\n     */\\n    function getDepositorZKTGain(\\n        address _depositor\\n    ) external view returns (uint);\\n\\n    /*\\n     * Return the ZKT gain earned by the front end.\\n     */\\n    function getFrontEndZKTGain(address _frontEnd) external view returns (uint);\\n\\n    /*\\n     * Return the user's compounded deposit.\\n     */\\n    function getCompoundedZKUSDDeposit(\\n        address _depositor\\n    ) external view returns (uint);\\n\\n    /*\\n     * Return the front end's compounded stake.\\n     *\\n     * The front end's compounded stake is equal to the sum of its depositors' compounded deposits.\\n     */\\n    function getCompoundedFrontEndStake(\\n        address _frontEnd\\n    ) external view returns (uint);\\n\\n    /*\\n     * Fallback function\\n     * Only callable by Active Pool, it just accounts for ETH received\\n     * receive() external payable;\\n     */\\n}\\n\",\"keccak256\":\"0xaa8963d29d489774f2652796b03479e97f5fdb8b3eb62cbd1f55303c6a2b590b\",\"license\":\"MIT\"},\"contracts/Interfaces/ITroveManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ILiquityBase.sol\\\";\\nimport \\\"./IStabilityPool.sol\\\";\\nimport \\\"./IZKUSDToken.sol\\\";\\nimport \\\"./IZKToken.sol\\\";\\nimport \\\"./IZKTStaking.sol\\\";\\n\\n// Common interface for the Trove Manager.\\ninterface ITroveManager is ILiquityBase {\\n    // --- Events ---\\n\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\n    event ZKUSDTokenAddressChanged(address _newZKUSDTokenAddress);\\n    event ActivePoolAddressChanged(address _activePoolAddress);\\n    event DefaultPoolAddressChanged(address _defaultPoolAddress);\\n    event StabilityPoolAddressChanged(address _stabilityPoolAddress);\\n    event GasPoolAddressChanged(address _gasPoolAddress);\\n    event CollSurplusPoolAddressChanged(address _collSurplusPoolAddress);\\n    event SortedTrovesAddressChanged(address _sortedTrovesAddress);\\n    event ZKTokenAddressChanged(address _zkTokenAddress);\\n    event ZKTStakingAddressChanged(address _zktStakingAddress);\\n\\n    event Liquidation(\\n        uint _liquidatedDebt,\\n        uint _liquidatedColl,\\n        uint _collGasCompensation,\\n        uint _ZKUSDGasCompensation\\n    );\\n    event Redemption(\\n        uint _attemptedZKUSDAmount,\\n        uint _actualZKUSDAmount,\\n        uint _ETHSent,\\n        uint _ETHFee\\n    );\\n    event TroveUpdated(\\n        address indexed _borrower,\\n        uint _debt,\\n        uint _coll,\\n        uint stake,\\n        uint8 operation\\n    );\\n    event TroveLiquidated(\\n        address indexed _borrower,\\n        uint _debt,\\n        uint _coll,\\n        uint8 operation\\n    );\\n    event BaseRateUpdated(uint _baseRate);\\n    event LastFeeOpTimeUpdated(uint _lastFeeOpTime);\\n    event TotalStakesUpdated(uint _newTotalStakes);\\n    event SystemSnapshotsUpdated(\\n        uint _totalStakesSnapshot,\\n        uint _totalCollateralSnapshot\\n    );\\n    event LTermsUpdated(uint256 _L_Native, uint256 _L_Debt);\\n    event TroveSnapshotsUpdated(\\n        address _borrower,\\n        uint256 _L_Native,\\n        uint256 _L_Debt\\n    );\\n    event TroveIndexUpdated(address _borrower, uint256 _newIndex);\\n\\n    // --- Functions ---\\n\\n    function setAddresses(\\n        address _borrowerOperationsAddress,\\n        address _activePoolAddress,\\n        address _defaultPoolAddress,\\n        address _stabilityPoolAddress,\\n        address _gasPoolAddress,\\n        address _collSurplusPoolAddress,\\n        address _priceFeedAddress,\\n        address _zkusdTokenAddress,\\n        address _sortedTrovesAddress,\\n        address _zkTokenAddress,\\n        address _zktStakingAddress\\n    ) external;\\n\\n    function stabilityPool() external view returns (IStabilityPool);\\n\\n    function zkusdToken() external view returns (IZKUSDToken);\\n\\n    function zkToken() external view returns (IZKToken);\\n\\n    function zktStaking() external view returns (IZKTStaking);\\n\\n    function getTroveOwnersCount() external view returns (uint);\\n\\n    function getTroveFromTroveOwnersArray(\\n        uint _index\\n    ) external view returns (address);\\n\\n    function getNominalICR(address _borrower) external view returns (uint);\\n\\n    function getCurrentICR(\\n        address _borrower,\\n        uint _price\\n    ) external view returns (uint);\\n\\n    function liquidate(\\n        address _borrower,\\n        bytes[] calldata _updateData\\n    ) external payable;\\n\\n    function liquidateTroves(\\n        uint _n,\\n        bytes[] calldata _updateData\\n    ) external payable;\\n\\n    function batchLiquidateTroves(\\n        address[] calldata _troveArray,\\n        bytes[] calldata _updateData\\n    ) external payable;\\n\\n    function redeemCollateral(\\n        uint _ZKUSDAmount,\\n        address _firstRedemptionHint,\\n        address _upperPartialRedemptionHint,\\n        address _lowerPartialRedemptionHint,\\n        uint _partialRedemptionHintNICR,\\n        uint _maxIterations,\\n        uint _maxFee,\\n        bytes[] calldata _updateData\\n    ) external payable;\\n\\n    function updateStakeAndTotalStakes(\\n        address _borrower\\n    ) external returns (uint);\\n\\n    function updateTroveRewardSnapshots(address _borrower) external;\\n\\n    function addTroveOwnerToArray(\\n        address _borrower\\n    ) external returns (uint index);\\n\\n    function applyPendingRewards(address _borrower) external;\\n\\n    function getPendingETHReward(\\n        address _borrower\\n    ) external view returns (uint);\\n\\n    function getPendingZKUSDDebtReward(\\n        address _borrower\\n    ) external view returns (uint);\\n\\n    function hasPendingRewards(address _borrower) external view returns (bool);\\n\\n    function getEntireDebtAndColl(\\n        address _borrower\\n    )\\n        external\\n        view\\n        returns (\\n            uint debt,\\n            uint coll,\\n            uint pendingZKUSDDebtReward,\\n            uint pendingETHReward\\n        );\\n\\n    function closeTrove(address _borrower) external;\\n\\n    function removeStake(address _borrower) external;\\n\\n    function getRedemptionRate() external view returns (uint);\\n\\n    function getRedemptionRateWithDecay() external view returns (uint);\\n\\n    function getRedemptionFeeWithDecay(\\n        uint _ETHDrawn\\n    ) external view returns (uint);\\n\\n    function getBorrowingRate() external view returns (uint);\\n\\n    function getBorrowingRateWithDecay() external view returns (uint);\\n\\n    function getBorrowingFee(uint ZKUSDDebt) external view returns (uint);\\n\\n    function getBorrowingFeeWithDecay(\\n        uint _ZKUSDDebt\\n    ) external view returns (uint);\\n\\n    function decayBaseRateFromBorrowing() external;\\n\\n    function getTroveStatus(address _borrower) external view returns (uint);\\n\\n    function getTroveStake(address _borrower) external view returns (uint);\\n\\n    function getTroveDebt(address _borrower) external view returns (uint);\\n\\n    function getTroveColl(address _borrower) external view returns (uint);\\n\\n    function setTroveStatus(address _borrower, uint num) external;\\n\\n    function increaseTroveColl(\\n        address _borrower,\\n        uint _collIncrease\\n    ) external returns (uint);\\n\\n    function decreaseTroveColl(\\n        address _borrower,\\n        uint _collDecrease\\n    ) external returns (uint);\\n\\n    function increaseTroveDebt(\\n        address _borrower,\\n        uint _debtIncrease\\n    ) external returns (uint);\\n\\n    function decreaseTroveDebt(\\n        address _borrower,\\n        uint _collDecrease\\n    ) external returns (uint);\\n\\n    function getTCR(uint _price) external view returns (uint);\\n\\n    function checkRecoveryMode(uint _price) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x24152262f3bd5c4e9ff769cd0a28c028aeb86d8a7b91f6251c397d498e1ace50\",\"license\":\"MIT\"},\"contracts/Interfaces/IZKTStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\ninterface IZKTStaking {\\n    // --- Events --\\n\\n    event ZKTokenAddressSet(address _zkTokenAddress);\\n    event ZKUSDTokenAddressSet(address _zkusdTokenAddress);\\n    event TroveManagerAddressSet(address _troveManager);\\n    event BorrowerOperationsAddressSet(address _borrowerOperationsAddress);\\n    event ActivePoolAddressSet(address _activePoolAddress);\\n\\n    event StakeChanged(address indexed staker, uint newStake);\\n    event StakingGainsWithdrawn(\\n        address indexed staker,\\n        uint ZKUSDGain,\\n        uint ETHGain\\n    );\\n    event F_ETHUpdated(uint _F_ETH);\\n    event F_ZKUSDUpdated(uint _F_ZKUSD);\\n    event TotalZKTStakedUpdated(uint _totalZKTStaked);\\n    event EtherSent(address _account, uint _amount);\\n    event StakerSnapshotsUpdated(address _staker, uint _F_ETH, uint _F_ZKUSD);\\n\\n    // --- Functions ---\\n\\n    function setAddresses(\\n        address _zkTokenAddress,\\n        address _zkusdTokenAddress,\\n        address _troveManagerAddress,\\n        address _borrowerOperationsAddress,\\n        address _activePoolAddress\\n    ) external;\\n\\n    function stake(uint _ZKTamount) external;\\n\\n    function unstake(uint _ZKTamount) external;\\n\\n    function increaseF_ETH(uint _ETHFee) external;\\n\\n    function increaseF_ZKUSD(uint _ZKTFee) external;\\n\\n    function getPendingETHGain(address _user) external view returns (uint);\\n\\n    function getPendingZKUSDGain(address _user) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xa78901f469b426ca433fa80ac24299337a06e0d88144d182316a0b76533ee180\",\"license\":\"MIT\"},\"contracts/Interfaces/IZKToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\nimport \\\"../Dependencies/IERC20.sol\\\";\\nimport \\\"../Dependencies/IERC2612.sol\\\";\\n\\ninterface IZKToken is IERC20, IERC2612 {\\n    // --- Events ---\\n\\n    event CommunityIssuanceAddressSet(address _communityIssuanceAddress);\\n    event ZKTStakingAddressSet(address _zktStakingAddress);\\n    event LockupContractFactoryAddressSet(\\n        address _lockupContractFactoryAddress\\n    );\\n\\n    // --- Functions ---\\n\\n    function sendToZKTStaking(address _sender, uint256 _amount) external;\\n\\n    function getDeploymentStartTime() external view returns (uint256);\\n\\n    function getLpRewardsEntitlement() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xefdb7618c8120010722116fea0e57455b9a5945dc67381e06ca1eb6aab5bee9e\",\"license\":\"MIT\"},\"contracts/Interfaces/IZKUSDToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\nimport \\\"../Dependencies/IERC20.sol\\\";\\nimport \\\"../Dependencies/IERC2612.sol\\\";\\n\\ninterface IZKUSDToken is IERC20, IERC2612 {\\n    // --- Events ---\\n\\n    event TroveManagerAddressChanged(address _troveManagerAddress);\\n    event StabilityPoolAddressChanged(address _newStabilityPoolAddress);\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n\\n    event ZKUSDTokenBalanceUpdated(address _user, uint _amount);\\n\\n    // --- Functions ---\\n\\n    function mint(address _account, uint256 _amount) external;\\n\\n    function burn(address _account, uint256 _amount) external;\\n\\n    function sendToPool(\\n        address _sender,\\n        address poolAddress,\\n        uint256 _amount\\n    ) external;\\n\\n    function returnFromPool(\\n        address poolAddress,\\n        address user,\\n        uint256 _amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcf6fed514128014c4de8ce63eff3dda32bd84c61f996831fab13b3297834f07a\",\"license\":\"MIT\"},\"contracts/MultiTroveGetter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./TroveManager.sol\\\";\\nimport \\\"./SortedTroves.sol\\\";\\n\\n/*  Helper contract for grabbing Trove data for the front end. Not part of the core Liquity system. */\\ncontract MultiTroveGetter {\\n    struct CombinedTroveData {\\n        address owner;\\n        uint debt;\\n        uint coll;\\n        uint stake;\\n        uint snapshotETH;\\n        uint snapshotZKUSDDebt;\\n    }\\n\\n    TroveManager public troveManager; // XXX Troves missing from ITroveManager?\\n    ISortedTroves public sortedTroves;\\n\\n    constructor(\\n        TroveManager _troveManager,\\n        ISortedTroves _sortedTroves\\n    ) public {\\n        troveManager = _troveManager;\\n        sortedTroves = _sortedTroves;\\n    }\\n\\n    function getMultipleSortedTroves(\\n        int _startIdx,\\n        uint _count\\n    ) external view returns (CombinedTroveData[] memory _troves) {\\n        uint startIdx;\\n        bool descend;\\n\\n        if (_startIdx >= 0) {\\n            startIdx = uint(_startIdx);\\n            descend = true;\\n        } else {\\n            startIdx = uint(-(_startIdx + 1));\\n            descend = false;\\n        }\\n\\n        uint sortedTrovesSize = sortedTroves.getSize();\\n\\n        if (startIdx >= sortedTrovesSize) {\\n            _troves = new CombinedTroveData[](0);\\n        } else {\\n            uint maxCount = sortedTrovesSize - startIdx;\\n\\n            if (_count > maxCount) {\\n                _count = maxCount;\\n            }\\n\\n            if (descend) {\\n                _troves = _getMultipleSortedTrovesFromHead(startIdx, _count);\\n            } else {\\n                _troves = _getMultipleSortedTrovesFromTail(startIdx, _count);\\n            }\\n        }\\n    }\\n\\n    function _getMultipleSortedTrovesFromHead(\\n        uint _startIdx,\\n        uint _count\\n    ) internal view returns (CombinedTroveData[] memory _troves) {\\n        address currentTroveowner = sortedTroves.getFirst();\\n\\n        for (uint idx = 0; idx < _startIdx; ++idx) {\\n            currentTroveowner = sortedTroves.getNext(currentTroveowner);\\n        }\\n\\n        _troves = new CombinedTroveData[](_count);\\n\\n        for (uint idx = 0; idx < _count; ++idx) {\\n            _troves[idx].owner = currentTroveowner;\\n            (\\n                _troves[idx].debt,\\n                _troves[idx].coll,\\n                _troves[idx].stake,\\n                /* status */\\n                /* arrayIndex */\\n                ,\\n\\n            ) = troveManager.Troves(currentTroveowner);\\n            (\\n                _troves[idx].snapshotETH,\\n                _troves[idx].snapshotZKUSDDebt\\n            ) = troveManager.rewardSnapshots(currentTroveowner);\\n\\n            currentTroveowner = sortedTroves.getNext(currentTroveowner);\\n        }\\n    }\\n\\n    function _getMultipleSortedTrovesFromTail(\\n        uint _startIdx,\\n        uint _count\\n    ) internal view returns (CombinedTroveData[] memory _troves) {\\n        address currentTroveowner = sortedTroves.getLast();\\n\\n        for (uint idx = 0; idx < _startIdx; ++idx) {\\n            currentTroveowner = sortedTroves.getPrev(currentTroveowner);\\n        }\\n\\n        _troves = new CombinedTroveData[](_count);\\n\\n        for (uint idx = 0; idx < _count; ++idx) {\\n            _troves[idx].owner = currentTroveowner;\\n            (\\n                _troves[idx].debt,\\n                _troves[idx].coll,\\n                _troves[idx].stake,\\n                /* status */\\n                /* arrayIndex */\\n                ,\\n\\n            ) = troveManager.Troves(currentTroveowner);\\n            (\\n                _troves[idx].snapshotETH,\\n                _troves[idx].snapshotZKUSDDebt\\n            ) = troveManager.rewardSnapshots(currentTroveowner);\\n\\n            currentTroveowner = sortedTroves.getPrev(currentTroveowner);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeabffd58d51c40de030b8f017ad22def9bd289cfccd00685fe7e189ebb725e30\",\"license\":\"MIT\"},\"contracts/SortedTroves.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\nimport \\\"./Interfaces/ISortedTroves.sol\\\";\\nimport \\\"./Interfaces/ITroveManager.sol\\\";\\nimport \\\"./Interfaces/IBorrowerOperations.sol\\\";\\nimport \\\"./Dependencies/SafeMath.sol\\\";\\nimport \\\"./Dependencies/Ownable.sol\\\";\\nimport \\\"./Dependencies/CheckContract.sol\\\";\\nimport \\\"./Dependencies/console.sol\\\";\\n\\n/*\\n * A sorted doubly linked list with nodes sorted in descending order.\\n *\\n * Nodes map to active Troves in the system - the ID property is the address of a Trove owner.\\n * Nodes are ordered according to their current nominal individual collateral ratio (NICR),\\n * which is like the ICR but without the price, i.e., just collateral / debt.\\n *\\n * The list optionally accepts insert position hints.\\n *\\n * NICRs are computed dynamically at runtime, and not stored on the Node. This is because NICRs of active Troves\\n * change dynamically as liquidation events occur.\\n *\\n * The list relies on the fact that liquidation events preserve ordering: a liquidation decreases the NICRs of all active Troves,\\n * but maintains their order. A node inserted based on current NICR will maintain the correct position,\\n * relative to it's peers, as rewards accumulate, as long as it's raw collateral and debt have not changed.\\n * Thus, Nodes remain sorted by current NICR.\\n *\\n * Nodes need only be re-inserted upon a Trove operation - when the owner adds or removes collateral or debt\\n * to their position.\\n *\\n * The list is a modification of the following audited SortedDoublyLinkedList:\\n * https://github.com/livepeer/protocol/blob/master/contracts/libraries/SortedDoublyLL.sol\\n *\\n *\\n * Changes made in the Liquity implementation:\\n *\\n * - Keys have been removed from nodes\\n *\\n * - Ordering checks for insertion are performed by comparing an NICR argument to the current NICR, calculated at runtime.\\n *   The list relies on the property that ordering by ICR is maintained as the ETH:USD price varies.\\n *\\n * - Public functions with parameters have been made internal to save gas, and given an external wrapper function for external access\\n */\\ncontract SortedTroves is Ownable, CheckContract, ISortedTroves {\\n    using SafeMath for uint256;\\n\\n    string public constant NAME = \\\"SortedTroves\\\";\\n\\n    event TroveManagerAddressChanged(address _troveManagerAddress);\\n    event BorrowerOperationsAddressChanged(address _borrowerOperationsAddress);\\n    event NodeAdded(address _id, address _prevId, address _nextId, uint _NICR);\\n    event NodeRemoved(address _id);\\n    event UpdateLink(address _head, address _tail, uint256 _currentSize);\\n\\n    address public borrowerOperationsAddress;\\n\\n    ITroveManager public troveManager;\\n\\n    // Information for a node in the list\\n    struct Node {\\n        bool exists;\\n        address nextId; // Id of next node (smaller NICR) in the list\\n        address prevId; // Id of previous node (larger NICR) in the list\\n    }\\n\\n    // Information for the list\\n    struct Data {\\n        address head; // Head of the list. Also the node in the list with the largest NICR\\n        address tail; // Tail of the list. Also the node in the list with the smallest NICR\\n        uint256 maxSize; // Maximum size of the list\\n        uint256 size; // Current size of the list\\n        mapping(address => Node) nodes; // Track the corresponding ids for each node in the list\\n    }\\n\\n    Data public data;\\n\\n    // --- Dependency setters ---\\n\\n    function setParams(\\n        uint256 _size,\\n        address _troveManagerAddress,\\n        address _borrowerOperationsAddress\\n    ) external override onlyOwner {\\n        require(_size > 0, \\\"SortedTroves: Size can\\u2019t be zero\\\");\\n        checkContract(_troveManagerAddress);\\n        checkContract(_borrowerOperationsAddress);\\n\\n        data.maxSize = _size;\\n\\n        troveManager = ITroveManager(_troveManagerAddress);\\n        borrowerOperationsAddress = _borrowerOperationsAddress;\\n\\n        emit TroveManagerAddressChanged(_troveManagerAddress);\\n        emit BorrowerOperationsAddressChanged(_borrowerOperationsAddress);\\n    }\\n\\n    /*\\n     * @dev Add a node to the list\\n     * @param _id Node's id\\n     * @param _NICR Node's NICR\\n     * @param _prevId Id of previous node for the insert position\\n     * @param _nextId Id of next node for the insert position\\n     */\\n\\n    function insert(\\n        address _id,\\n        uint256 _NICR,\\n        address _prevId,\\n        address _nextId\\n    ) external override {\\n        ITroveManager troveManagerCached = troveManager;\\n\\n        _requireCallerIsBOorTroveM(troveManagerCached);\\n        _insert(troveManagerCached, _id, _NICR, _prevId, _nextId);\\n    }\\n\\n    function _insert(\\n        ITroveManager _troveManager,\\n        address _id,\\n        uint256 _NICR,\\n        address _prevId,\\n        address _nextId\\n    ) internal {\\n        // List must not be full\\n        require(!isFull(), \\\"SortedTroves: List is full\\\");\\n        // List must not already contain node\\n        require(!contains(_id), \\\"SortedTroves: List already contains the node\\\");\\n        // Node id must not be null\\n        require(_id != address(0), \\\"SortedTroves: Id cannot be zero\\\");\\n        // NICR must be non-zero\\n        require(_NICR > 0, \\\"SortedTroves: NICR must be positive\\\");\\n\\n        address prevId = _prevId;\\n        address nextId = _nextId;\\n\\n        if (!_validInsertPosition(_troveManager, _NICR, prevId, nextId)) {\\n            // Sender's hint was not a valid insert position\\n            // Use sender's hint to find a valid insert position\\n            (prevId, nextId) = _findInsertPosition(\\n                _troveManager,\\n                _NICR,\\n                prevId,\\n                nextId\\n            );\\n        }\\n\\n        data.nodes[_id].exists = true;\\n\\n        if (prevId == address(0) && nextId == address(0)) {\\n            // Insert as head and tail\\n            data.head = _id;\\n            data.tail = _id;\\n        } else if (prevId == address(0)) {\\n            // Insert before `prevId` as the head\\n            data.nodes[_id].nextId = data.head;\\n            data.nodes[data.head].prevId = _id;\\n            data.head = _id;\\n        } else if (nextId == address(0)) {\\n            // Insert after `nextId` as the tail\\n            data.nodes[_id].prevId = data.tail;\\n            data.nodes[data.tail].nextId = _id;\\n            data.tail = _id;\\n        } else {\\n            // Insert at insert position between `prevId` and `nextId`\\n            data.nodes[_id].nextId = nextId;\\n            data.nodes[_id].prevId = prevId;\\n            data.nodes[prevId].nextId = _id;\\n            data.nodes[nextId].prevId = _id;\\n        }\\n\\n        data.size = data.size.add(1);\\n        emit UpdateLink(data.head, data.tail, data.size);\\n        emit NodeAdded(_id, _prevId, _nextId, _NICR);\\n    }\\n\\n    function remove(address _id) external override {\\n        _requireCallerIsTroveManager();\\n        _remove(_id);\\n    }\\n\\n    /*\\n     * @dev Remove a node from the list\\n     * @param _id Node's id\\n     */\\n    function _remove(address _id) internal {\\n        // List must contain the node\\n        require(contains(_id), \\\"SortedTroves: List does not contain the id\\\");\\n\\n        if (data.size > 1) {\\n            // List contains more than a single node\\n            if (_id == data.head) {\\n                // The removed node is the head\\n                // Set head to next node\\n                data.head = data.nodes[_id].nextId;\\n                // Set prev pointer of new head to null\\n                data.nodes[data.head].prevId = address(0);\\n            } else if (_id == data.tail) {\\n                // The removed node is the tail\\n                // Set tail to previous node\\n                data.tail = data.nodes[_id].prevId;\\n                // Set next pointer of new tail to null\\n                data.nodes[data.tail].nextId = address(0);\\n            } else {\\n                // The removed node is neither the head nor the tail\\n                // Set next pointer of previous node to the next node\\n                data.nodes[data.nodes[_id].prevId].nextId = data\\n                    .nodes[_id]\\n                    .nextId;\\n                // Set prev pointer of next node to the previous node\\n                data.nodes[data.nodes[_id].nextId].prevId = data\\n                    .nodes[_id]\\n                    .prevId;\\n            }\\n        } else {\\n            // List contains a single node\\n            // Set the head and tail to null\\n            data.head = address(0);\\n            data.tail = address(0);\\n        }\\n\\n        delete data.nodes[_id];\\n        data.size = data.size.sub(1);\\n        emit UpdateLink(data.head, data.tail, data.size);\\n        emit NodeRemoved(_id);\\n    }\\n\\n    /*\\n     * @dev Re-insert the node at a new position, based on its new NICR\\n     * @param _id Node's id\\n     * @param _newNICR Node's new NICR\\n     * @param _prevId Id of previous node for the new insert position\\n     * @param _nextId Id of next node for the new insert position\\n     */\\n    function reInsert(\\n        address _id,\\n        uint256 _newNICR,\\n        address _prevId,\\n        address _nextId\\n    ) external override {\\n        ITroveManager troveManagerCached = troveManager;\\n\\n        _requireCallerIsBOorTroveM(troveManagerCached);\\n        // List must contain the node\\n        require(contains(_id), \\\"SortedTroves: List does not contain the id\\\");\\n        // NICR must be non-zero\\n        require(_newNICR > 0, \\\"SortedTroves: NICR must be positive\\\");\\n\\n        // Remove node from the list\\n        _remove(_id);\\n\\n        _insert(troveManagerCached, _id, _newNICR, _prevId, _nextId);\\n    }\\n\\n    /*\\n     * @dev Checks if the list contains a node\\n     */\\n    function contains(address _id) public view override returns (bool) {\\n        return data.nodes[_id].exists;\\n    }\\n\\n    /*\\n     * @dev Checks if the list is full\\n     */\\n    function isFull() public view override returns (bool) {\\n        return data.size == data.maxSize;\\n    }\\n\\n    /*\\n     * @dev Checks if the list is empty\\n     */\\n    function isEmpty() public view override returns (bool) {\\n        return data.size == 0;\\n    }\\n\\n    /*\\n     * @dev Returns the current size of the list\\n     */\\n    function getSize() external view override returns (uint256) {\\n        return data.size;\\n    }\\n\\n    /*\\n     * @dev Returns the maximum size of the list\\n     */\\n    function getMaxSize() external view override returns (uint256) {\\n        return data.maxSize;\\n    }\\n\\n    /*\\n     * @dev Returns the first node in the list (node with the largest NICR)\\n     */\\n    function getFirst() external view override returns (address) {\\n        return data.head;\\n    }\\n\\n    /*\\n     * @dev Returns the last node in the list (node with the smallest NICR)\\n     */\\n    function getLast() external view override returns (address) {\\n        return data.tail;\\n    }\\n\\n    /*\\n     * @dev Returns the next node (with a smaller NICR) in the list for a given node\\n     * @param _id Node's id\\n     */\\n    function getNext(address _id) external view override returns (address) {\\n        return data.nodes[_id].nextId;\\n    }\\n\\n    /*\\n     * @dev Returns the previous node (with a larger NICR) in the list for a given node\\n     * @param _id Node's id\\n     */\\n    function getPrev(address _id) external view override returns (address) {\\n        return data.nodes[_id].prevId;\\n    }\\n\\n    /*\\n     * @dev Check if a pair of nodes is a valid insertion point for a new node with the given NICR\\n     * @param _NICR Node's NICR\\n     * @param _prevId Id of previous node for the insert position\\n     * @param _nextId Id of next node for the insert position\\n     */\\n    function validInsertPosition(\\n        uint256 _NICR,\\n        address _prevId,\\n        address _nextId\\n    ) external view override returns (bool) {\\n        return _validInsertPosition(troveManager, _NICR, _prevId, _nextId);\\n    }\\n\\n    function _validInsertPosition(\\n        ITroveManager _troveManager,\\n        uint256 _NICR,\\n        address _prevId,\\n        address _nextId\\n    ) internal view returns (bool) {\\n        if (_prevId == address(0) && _nextId == address(0)) {\\n            // `(null, null)` is a valid insert position if the list is empty\\n            return isEmpty();\\n        } else if (_prevId == address(0)) {\\n            // `(null, _nextId)` is a valid insert position if `_nextId` is the head of the list\\n            return\\n                data.head == _nextId &&\\n                _NICR >= _troveManager.getNominalICR(_nextId);\\n        } else if (_nextId == address(0)) {\\n            // `(_prevId, null)` is a valid insert position if `_prevId` is the tail of the list\\n            return\\n                data.tail == _prevId &&\\n                _NICR <= _troveManager.getNominalICR(_prevId);\\n        } else {\\n            // `(_prevId, _nextId)` is a valid insert position if they are adjacent nodes and `_NICR` falls between the two nodes' NICRs\\n            return\\n                data.nodes[_prevId].nextId == _nextId &&\\n                _troveManager.getNominalICR(_prevId) >= _NICR &&\\n                _NICR >= _troveManager.getNominalICR(_nextId);\\n        }\\n    }\\n\\n    /*\\n     * @dev Descend the list (larger NICRs to smaller NICRs) to find a valid insert position\\n     * @param _troveManager TroveManager contract, passed in as param to save SLOAD\\u2019s\\n     * @param _NICR Node's NICR\\n     * @param _startId Id of node to start descending the list from\\n     */\\n    function _descendList(\\n        ITroveManager _troveManager,\\n        uint256 _NICR,\\n        address _startId\\n    ) internal view returns (address, address) {\\n        // If `_startId` is the head, check if the insert position is before the head\\n        if (\\n            data.head == _startId &&\\n            _NICR >= _troveManager.getNominalICR(_startId)\\n        ) {\\n            return (address(0), _startId);\\n        }\\n\\n        address prevId = _startId;\\n        address nextId = data.nodes[prevId].nextId;\\n\\n        // Descend the list until we reach the end or until we find a valid insert position\\n        while (\\n            prevId != address(0) &&\\n            !_validInsertPosition(_troveManager, _NICR, prevId, nextId)\\n        ) {\\n            prevId = data.nodes[prevId].nextId;\\n            nextId = data.nodes[prevId].nextId;\\n        }\\n\\n        return (prevId, nextId);\\n    }\\n\\n    /*\\n     * @dev Ascend the list (smaller NICRs to larger NICRs) to find a valid insert position\\n     * @param _troveManager TroveManager contract, passed in as param to save SLOAD\\u2019s\\n     * @param _NICR Node's NICR\\n     * @param _startId Id of node to start ascending the list from\\n     */\\n    function _ascendList(\\n        ITroveManager _troveManager,\\n        uint256 _NICR,\\n        address _startId\\n    ) internal view returns (address, address) {\\n        // If `_startId` is the tail, check if the insert position is after the tail\\n        if (\\n            data.tail == _startId &&\\n            _NICR <= _troveManager.getNominalICR(_startId)\\n        ) {\\n            return (_startId, address(0));\\n        }\\n\\n        address nextId = _startId;\\n        address prevId = data.nodes[nextId].prevId;\\n\\n        // Ascend the list until we reach the end or until we find a valid insertion point\\n        while (\\n            nextId != address(0) &&\\n            !_validInsertPosition(_troveManager, _NICR, prevId, nextId)\\n        ) {\\n            nextId = data.nodes[nextId].prevId;\\n            prevId = data.nodes[nextId].prevId;\\n        }\\n\\n        return (prevId, nextId);\\n    }\\n\\n    /*\\n     * @dev Find the insert position for a new node with the given NICR\\n     * @param _NICR Node's NICR\\n     * @param _prevId Id of previous node for the insert position\\n     * @param _nextId Id of next node for the insert position\\n     */\\n    function findInsertPosition(\\n        uint256 _NICR,\\n        address _prevId,\\n        address _nextId\\n    ) external view override returns (address, address) {\\n        return _findInsertPosition(troveManager, _NICR, _prevId, _nextId);\\n    }\\n\\n    function _findInsertPosition(\\n        ITroveManager _troveManager,\\n        uint256 _NICR,\\n        address _prevId,\\n        address _nextId\\n    ) internal view returns (address, address) {\\n        address prevId = _prevId;\\n        address nextId = _nextId;\\n\\n        if (prevId != address(0)) {\\n            if (\\n                !contains(prevId) || _NICR > _troveManager.getNominalICR(prevId)\\n            ) {\\n                // `prevId` does not exist anymore or now has a smaller NICR than the given NICR\\n                prevId = address(0);\\n            }\\n        }\\n\\n        if (nextId != address(0)) {\\n            if (\\n                !contains(nextId) || _NICR < _troveManager.getNominalICR(nextId)\\n            ) {\\n                // `nextId` does not exist anymore or now has a larger NICR than the given NICR\\n                nextId = address(0);\\n            }\\n        }\\n\\n        if (prevId == address(0) && nextId == address(0)) {\\n            // No hint - descend list starting from head\\n            return _descendList(_troveManager, _NICR, data.head);\\n        } else if (prevId == address(0)) {\\n            // No `prevId` for hint - ascend list starting from `nextId`\\n            return _ascendList(_troveManager, _NICR, nextId);\\n        } else if (nextId == address(0)) {\\n            // No `nextId` for hint - descend list starting from `prevId`\\n            return _descendList(_troveManager, _NICR, prevId);\\n        } else {\\n            // Descend list starting from `prevId`\\n            return _descendList(_troveManager, _NICR, prevId);\\n        }\\n    }\\n\\n    // --- 'require' functions ---\\n\\n    function _requireCallerIsTroveManager() internal view {\\n        require(\\n            msg.sender == address(troveManager),\\n            \\\"SortedTroves: Caller is not the TroveManager\\\"\\n        );\\n    }\\n\\n    function _requireCallerIsBOorTroveM(\\n        ITroveManager _troveManager\\n    ) internal view {\\n        require(\\n            msg.sender == borrowerOperationsAddress ||\\n                msg.sender == address(_troveManager),\\n            \\\"SortedTroves: Caller is neither BO nor TroveM\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x0c4cf36e3a2cffe0c5d55d999624467de90b412870aa5d3ba325d27f2d669c53\",\"license\":\"MIT\"},\"contracts/TroveManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./Interfaces/ITroveManager.sol\\\";\\nimport \\\"./Interfaces/IStabilityPool.sol\\\";\\nimport \\\"./Interfaces/ICollSurplusPool.sol\\\";\\nimport \\\"./Interfaces/IZKUSDToken.sol\\\";\\nimport \\\"./Interfaces/ISortedTroves.sol\\\";\\nimport \\\"./Interfaces/IZKToken.sol\\\";\\nimport \\\"./Interfaces/IZKTStaking.sol\\\";\\nimport \\\"./Dependencies/LiquityBase.sol\\\";\\nimport \\\"./Dependencies/Ownable.sol\\\";\\nimport \\\"./Dependencies/CheckContract.sol\\\";\\nimport \\\"./Dependencies/console.sol\\\";\\n\\ncontract TroveManager is LiquityBase, CheckContract, ITroveManager {\\n    string public constant NAME = \\\"TroveManager\\\";\\n\\n    // --- Connected contract declarations ---\\n\\n    address public borrowerOperationsAddress;\\n\\n    IStabilityPool public override stabilityPool;\\n\\n    address gasPoolAddress;\\n\\n    ICollSurplusPool collSurplusPool;\\n\\n    IZKUSDToken public override zkusdToken;\\n\\n    IZKToken public override zkToken;\\n\\n    IZKTStaking public override zktStaking;\\n\\n    // A doubly linked list of Troves, sorted by their sorted by their collateral ratios\\n    ISortedTroves public sortedTroves;\\n\\n    // --- Data structures ---\\n\\n    uint public constant SECONDS_IN_ONE_MINUTE = 60;\\n    /*\\n     * Half-life of 12h. 12h = 720 min\\n     * (1/2) = d^720 => d = (1/2)^(1/720)\\n     */\\n    uint public constant MINUTE_DECAY_FACTOR = 999037758833783000;\\n    uint public constant REDEMPTION_FEE_FLOOR = (DECIMAL_PRECISION / 1000) * 5; // 0.5%\\n    uint public constant MAX_BORROWING_FEE = (DECIMAL_PRECISION / 100) * 5; // 5%\\n\\n    // During bootsrap period redemptions are not allowed\\n    uint public constant BOOTSTRAP_PERIOD = 14 days;\\n\\n    /*\\n     * BETA: 18 digit decimal. Parameter by which to divide the redeemed fraction, in order to calc the new base rate from a redemption.\\n     * Corresponds to (1 / ALPHA) in the white paper.\\n     */\\n    uint public constant BETA = 2;\\n\\n    uint public baseRate;\\n\\n    // The timestamp of the latest fee operation (redemption or new ZKUSD issuance)\\n    uint public lastFeeOperationTime;\\n\\n    enum Status {\\n        nonExistent,\\n        active,\\n        closedByOwner,\\n        closedByLiquidation,\\n        closedByRedemption\\n    }\\n\\n    // Store the necessary data for a trove\\n    struct Trove {\\n        uint debt;\\n        uint coll;\\n        uint stake;\\n        Status status;\\n        uint128 arrayIndex;\\n    }\\n\\n    mapping(address => Trove) public Troves;\\n\\n    uint public totalStakes;\\n\\n    // Snapshot of the value of totalStakes, taken immediately after the latest liquidation\\n    uint public totalStakesSnapshot;\\n\\n    // Snapshot of the total collateral across the ActivePool and DefaultPool, immediately after the latest liquidation.\\n    uint public totalCollateralSnapshot;\\n\\n    uint public L_ETH;\\n    uint public L_ZKUSDDebt;\\n\\n    mapping(address => RewardSnapshot) public rewardSnapshots;\\n\\n    struct RewardSnapshot {\\n        uint ETH;\\n        uint ZKUSDDebt;\\n    }\\n\\n    address[] public TroveOwners;\\n\\n    uint public lastETHError_Redistribution;\\n    uint public lastZKUSDDebtError_Redistribution;\\n\\n    struct LocalVariables_OuterLiquidationFunction {\\n        uint price;\\n        uint ZKUSDInStabPool;\\n        bool recoveryModeAtStart;\\n        uint liquidatedDebt;\\n        uint liquidatedColl;\\n    }\\n\\n    struct LocalVariables_InnerSingleLiquidateFunction {\\n        uint collToLiquidate;\\n        uint pendingDebtReward;\\n        uint pendingCollReward;\\n    }\\n\\n    struct LocalVariables_LiquidationSequence {\\n        uint remainingZKUSDInStabPool;\\n        uint i;\\n        uint ICR;\\n        address user;\\n        bool backToNormalMode;\\n        uint entireSystemDebt;\\n        uint entireSystemColl;\\n    }\\n\\n    struct LiquidationValues {\\n        uint entireTroveDebt;\\n        uint entireTroveColl;\\n        uint collGasCompensation;\\n        uint ZKUSDGasCompensation;\\n        uint debtToOffset;\\n        uint collToSendToSP;\\n        uint debtToRedistribute;\\n        uint collToRedistribute;\\n        uint collSurplus;\\n    }\\n\\n    struct LiquidationTotals {\\n        uint totalCollInSequence;\\n        uint totalDebtInSequence;\\n        uint totalCollGasCompensation;\\n        uint totalZKUSDGasCompensation;\\n        uint totalDebtToOffset;\\n        uint totalCollToSendToSP;\\n        uint totalDebtToRedistribute;\\n        uint totalCollToRedistribute;\\n        uint totalCollSurplus;\\n    }\\n\\n    struct ContractsCache {\\n        IActivePool activePool;\\n        IDefaultPool defaultPool;\\n        IZKUSDToken zkusdToken;\\n        IZKTStaking zktStaking;\\n        ISortedTroves sortedTroves;\\n        ICollSurplusPool collSurplusPool;\\n        address gasPoolAddress;\\n    }\\n    // --- Variable container structs for redemptions ---\\n\\n    struct RedemptionTotals {\\n        uint remainingZKUSD;\\n        uint totalZKUSDToRedeem;\\n        uint totalETHDrawn;\\n        uint ETHFee;\\n        uint ETHToSendToRedeemer;\\n        uint decayedBaseRate;\\n        uint price;\\n        uint totalZKUSDSupplyAtStart;\\n    }\\n\\n    struct SingleRedemptionValues {\\n        uint ZKUSDLot;\\n        uint ETHLot;\\n        bool cancelledPartial;\\n    }\\n\\n    // --- Events ---\\n\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\n    event ZKUSDTokenAddressChanged(address _newZKUSDTokenAddress);\\n    event ActivePoolAddressChanged(address _activePoolAddress);\\n    event DefaultPoolAddressChanged(address _defaultPoolAddress);\\n    event StabilityPoolAddressChanged(address _stabilityPoolAddress);\\n    event GasPoolAddressChanged(address _gasPoolAddress);\\n    event CollSurplusPoolAddressChanged(address _collSurplusPoolAddress);\\n    event SortedTrovesAddressChanged(address _sortedTrovesAddress);\\n    event ZKTokenAddressChanged(address _zkTokenAddress);\\n    event ZKTStakingAddressChanged(address _zktStakingAddress);\\n\\n    event Liquidation(\\n        uint _liquidatedDebt,\\n        uint _liquidatedColl,\\n        uint _collGasCompensation,\\n        uint _ZKUSDGasCompensation\\n    );\\n    event Redemption(\\n        uint _attemptedZKUSDAmount,\\n        uint _actualZKUSDAmount,\\n        uint _ETHSent,\\n        uint _ETHFee\\n    );\\n    event TroveUpdated(\\n        address indexed _borrower,\\n        uint _debt,\\n        uint _coll,\\n        uint _stake,\\n        TroveManagerOperation _operation\\n    );\\n    event TroveLiquidated(\\n        address indexed _borrower,\\n        uint _debt,\\n        uint _coll,\\n        TroveManagerOperation _operation\\n    );\\n    event BaseRateUpdated(uint _baseRate);\\n    event LastFeeOpTimeUpdated(uint _lastFeeOpTime);\\n    event TotalStakesUpdated(uint _newTotalStakes);\\n    event SystemSnapshotsUpdated(\\n        uint _totalStakesSnapshot,\\n        uint _totalCollateralSnapshot\\n    );\\n    event LTermsUpdated(uint256 _L_Native, uint256 _L_Debt);\\n    event TroveSnapshotsUpdated(\\n        address _borrower,\\n        uint256 _L_Native,\\n        uint256 _L_Debt\\n    );\\n    event TroveIndexUpdated(address _borrower, uint256 _newIndex);\\n\\n    enum TroveManagerOperation {\\n        applyPendingRewards,\\n        liquidateInNormalMode,\\n        liquidateInRecoveryMode,\\n        redeemCollateral\\n    }\\n\\n    // --- Dependency setter ---\\n\\n    function setAddresses(\\n        address _borrowerOperationsAddress,\\n        address _activePoolAddress,\\n        address _defaultPoolAddress,\\n        address _stabilityPoolAddress,\\n        address _gasPoolAddress,\\n        address _collSurplusPoolAddress,\\n        address _priceFeedAddress,\\n        address _zkusdTokenAddress,\\n        address _sortedTrovesAddress,\\n        address _zkTokenAddress,\\n        address _zktStakingAddress\\n    ) external override onlyOwner {\\n        checkContract(_borrowerOperationsAddress);\\n        checkContract(_activePoolAddress);\\n        checkContract(_defaultPoolAddress);\\n        checkContract(_stabilityPoolAddress);\\n        checkContract(_gasPoolAddress);\\n        checkContract(_collSurplusPoolAddress);\\n        checkContract(_priceFeedAddress);\\n        checkContract(_zkusdTokenAddress);\\n        checkContract(_sortedTrovesAddress);\\n        checkContract(_zkTokenAddress);\\n        checkContract(_zktStakingAddress);\\n\\n        borrowerOperationsAddress = _borrowerOperationsAddress;\\n        activePool = IActivePool(_activePoolAddress);\\n        defaultPool = IDefaultPool(_defaultPoolAddress);\\n        stabilityPool = IStabilityPool(_stabilityPoolAddress);\\n        gasPoolAddress = _gasPoolAddress;\\n        collSurplusPool = ICollSurplusPool(_collSurplusPoolAddress);\\n        priceFeed = IPriceFeed(_priceFeedAddress);\\n        zkusdToken = IZKUSDToken(_zkusdTokenAddress);\\n        sortedTroves = ISortedTroves(_sortedTrovesAddress);\\n        zkToken = IZKToken(_zkTokenAddress);\\n        zktStaking = IZKTStaking(_zktStakingAddress);\\n\\n        emit BorrowerOperationsAddressChanged(_borrowerOperationsAddress);\\n        emit ActivePoolAddressChanged(_activePoolAddress);\\n        emit DefaultPoolAddressChanged(_defaultPoolAddress);\\n        emit StabilityPoolAddressChanged(_stabilityPoolAddress);\\n        emit GasPoolAddressChanged(_gasPoolAddress);\\n        emit CollSurplusPoolAddressChanged(_collSurplusPoolAddress);\\n        emit PriceFeedAddressChanged(_priceFeedAddress);\\n        emit ZKUSDTokenAddressChanged(_zkusdTokenAddress);\\n        emit SortedTrovesAddressChanged(_sortedTrovesAddress);\\n        emit ZKTokenAddressChanged(_zkTokenAddress);\\n        emit ZKTStakingAddressChanged(_zktStakingAddress);\\n    }\\n\\n    // --- Getters ---\\n\\n    function getTroveOwnersCount() external view override returns (uint) {\\n        return TroveOwners.length;\\n    }\\n\\n    function getTroveFromTroveOwnersArray(\\n        uint _index\\n    ) external view override returns (address) {\\n        return TroveOwners[_index];\\n    }\\n\\n    // --- Trove Liquidation functions ---\\n\\n    // Single liquidation function. Closes the trove if its ICR is lower than the minimum collateral ratio.\\n    function liquidate(\\n        address _borrower,\\n        bytes[] calldata _updateData\\n    ) external payable override {\\n        _requireTroveIsActive(_borrower);\\n\\n        address[] memory borrowers = new address[](1);\\n        borrowers[0] = _borrower;\\n        batchLiquidateTroves(borrowers, _updateData);\\n    }\\n\\n    // --- Inner single liquidation functions ---\\n\\n    // Liquidate one trove, in Normal Mode.\\n    function _liquidateNormalMode(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        address _borrower,\\n        uint _ZKUSDInStabPool\\n    ) internal returns (LiquidationValues memory singleLiquidation) {\\n        LocalVariables_InnerSingleLiquidateFunction memory vars;\\n\\n        (\\n            singleLiquidation.entireTroveDebt,\\n            singleLiquidation.entireTroveColl,\\n            vars.pendingDebtReward,\\n            vars.pendingCollReward\\n        ) = getEntireDebtAndColl(_borrower);\\n\\n        _movePendingTroveRewardsToActivePool(\\n            _activePool,\\n            _defaultPool,\\n            vars.pendingDebtReward,\\n            vars.pendingCollReward\\n        );\\n        _removeStake(_borrower);\\n\\n        singleLiquidation.collGasCompensation = _getCollGasCompensation(\\n            singleLiquidation.entireTroveColl\\n        );\\n        singleLiquidation.ZKUSDGasCompensation = ZKUSD_GAS_COMPENSATION;\\n        uint collToLiquidate = singleLiquidation.entireTroveColl.sub(\\n            singleLiquidation.collGasCompensation\\n        );\\n\\n        (\\n            singleLiquidation.debtToOffset,\\n            singleLiquidation.collToSendToSP,\\n            singleLiquidation.debtToRedistribute,\\n            singleLiquidation.collToRedistribute\\n        ) = _getOffsetAndRedistributionVals(\\n            singleLiquidation.entireTroveDebt,\\n            collToLiquidate,\\n            _ZKUSDInStabPool\\n        );\\n\\n        _closeTrove(_borrower, Status.closedByLiquidation);\\n        emit TroveLiquidated(\\n            _borrower,\\n            singleLiquidation.entireTroveDebt,\\n            singleLiquidation.entireTroveColl,\\n            TroveManagerOperation.liquidateInNormalMode\\n        );\\n        emit TroveUpdated(\\n            _borrower,\\n            0,\\n            0,\\n            0,\\n            TroveManagerOperation.liquidateInNormalMode\\n        );\\n        return singleLiquidation;\\n    }\\n\\n    // Liquidate one trove, in Recovery Mode.\\n    function _liquidateRecoveryMode(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        address _borrower,\\n        uint _ICR,\\n        uint _ZKUSDInStabPool,\\n        uint _TCR,\\n        uint _price\\n    ) internal returns (LiquidationValues memory singleLiquidation) {\\n        LocalVariables_InnerSingleLiquidateFunction memory vars;\\n        if (TroveOwners.length <= 1) {\\n            return singleLiquidation;\\n        } // don't liquidate if last trove\\n        (\\n            singleLiquidation.entireTroveDebt,\\n            singleLiquidation.entireTroveColl,\\n            vars.pendingDebtReward,\\n            vars.pendingCollReward\\n        ) = getEntireDebtAndColl(_borrower);\\n\\n        singleLiquidation.collGasCompensation = _getCollGasCompensation(\\n            singleLiquidation.entireTroveColl\\n        );\\n        singleLiquidation.ZKUSDGasCompensation = ZKUSD_GAS_COMPENSATION;\\n        vars.collToLiquidate = singleLiquidation.entireTroveColl.sub(\\n            singleLiquidation.collGasCompensation\\n        );\\n\\n        // If ICR <= 100%, purely redistribute the Trove across all active Troves\\n        if (_ICR <= _100pct) {\\n            _movePendingTroveRewardsToActivePool(\\n                _activePool,\\n                _defaultPool,\\n                vars.pendingDebtReward,\\n                vars.pendingCollReward\\n            );\\n            _removeStake(_borrower);\\n\\n            singleLiquidation.debtToOffset = 0;\\n            singleLiquidation.collToSendToSP = 0;\\n            singleLiquidation.debtToRedistribute = singleLiquidation\\n                .entireTroveDebt;\\n            singleLiquidation.collToRedistribute = vars.collToLiquidate;\\n\\n            _closeTrove(_borrower, Status.closedByLiquidation);\\n            emit TroveLiquidated(\\n                _borrower,\\n                singleLiquidation.entireTroveDebt,\\n                singleLiquidation.entireTroveColl,\\n                TroveManagerOperation.liquidateInRecoveryMode\\n            );\\n            emit TroveUpdated(\\n                _borrower,\\n                0,\\n                0,\\n                0,\\n                TroveManagerOperation.liquidateInRecoveryMode\\n            );\\n\\n            // If 100% < ICR < MCR, offset as much as possible, and redistribute the remainder\\n        } else if ((_ICR > _100pct) && (_ICR < MCR)) {\\n            _movePendingTroveRewardsToActivePool(\\n                _activePool,\\n                _defaultPool,\\n                vars.pendingDebtReward,\\n                vars.pendingCollReward\\n            );\\n            _removeStake(_borrower);\\n\\n            (\\n                singleLiquidation.debtToOffset,\\n                singleLiquidation.collToSendToSP,\\n                singleLiquidation.debtToRedistribute,\\n                singleLiquidation.collToRedistribute\\n            ) = _getOffsetAndRedistributionVals(\\n                singleLiquidation.entireTroveDebt,\\n                vars.collToLiquidate,\\n                _ZKUSDInStabPool\\n            );\\n\\n            _closeTrove(_borrower, Status.closedByLiquidation);\\n            emit TroveLiquidated(\\n                _borrower,\\n                singleLiquidation.entireTroveDebt,\\n                singleLiquidation.entireTroveColl,\\n                TroveManagerOperation.liquidateInRecoveryMode\\n            );\\n            emit TroveUpdated(\\n                _borrower,\\n                0,\\n                0,\\n                0,\\n                TroveManagerOperation.liquidateInRecoveryMode\\n            );\\n            /*\\n             * If 110% <= ICR < current TCR (accounting for the preceding liquidations in the current sequence)\\n             * and there is ZKUSD in the Stability Pool, only offset, with no redistribution,\\n             * but at a capped rate of 1.1 and only if the whole debt can be liquidated.\\n             * The remainder due to the capped rate will be claimable as collateral surplus.\\n             */\\n        } else if (\\n            (_ICR >= MCR) &&\\n            (_ICR < _TCR) &&\\n            (singleLiquidation.entireTroveDebt <= _ZKUSDInStabPool)\\n        ) {\\n            _movePendingTroveRewardsToActivePool(\\n                _activePool,\\n                _defaultPool,\\n                vars.pendingDebtReward,\\n                vars.pendingCollReward\\n            );\\n            assert(_ZKUSDInStabPool != 0);\\n\\n            _removeStake(_borrower);\\n            singleLiquidation = _getCappedOffsetVals(\\n                singleLiquidation.entireTroveDebt,\\n                singleLiquidation.entireTroveColl,\\n                _price\\n            );\\n\\n            _closeTrove(_borrower, Status.closedByLiquidation);\\n            if (singleLiquidation.collSurplus > 0) {\\n                collSurplusPool.accountSurplus(\\n                    _borrower,\\n                    singleLiquidation.collSurplus\\n                );\\n            }\\n\\n            emit TroveLiquidated(\\n                _borrower,\\n                singleLiquidation.entireTroveDebt,\\n                singleLiquidation.collToSendToSP,\\n                TroveManagerOperation.liquidateInRecoveryMode\\n            );\\n            emit TroveUpdated(\\n                _borrower,\\n                0,\\n                0,\\n                0,\\n                TroveManagerOperation.liquidateInRecoveryMode\\n            );\\n        } else {\\n            // if (_ICR >= MCR && ( _ICR >= _TCR || singleLiquidation.entireTroveDebt > _ZKUSDInStabPool))\\n            LiquidationValues memory zeroVals;\\n            return zeroVals;\\n        }\\n\\n        return singleLiquidation;\\n    }\\n\\n    /* In a full liquidation, returns the values for a trove's coll and debt to be offset, and coll and debt to be\\n     * redistributed to active troves.\\n     */\\n    function _getOffsetAndRedistributionVals(\\n        uint _debt,\\n        uint _coll,\\n        uint _ZKUSDInStabPool\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint debtToOffset,\\n            uint collToSendToSP,\\n            uint debtToRedistribute,\\n            uint collToRedistribute\\n        )\\n    {\\n        if (_ZKUSDInStabPool > 0) {\\n            debtToOffset = LiquityMath._min(_debt, _ZKUSDInStabPool);\\n            collToSendToSP = _coll.mul(debtToOffset).div(_debt);\\n            debtToRedistribute = _debt.sub(debtToOffset);\\n            collToRedistribute = _coll.sub(collToSendToSP);\\n        } else {\\n            debtToOffset = 0;\\n            collToSendToSP = 0;\\n            debtToRedistribute = _debt;\\n            collToRedistribute = _coll;\\n        }\\n    }\\n\\n    /*\\n     *  Get its offset coll/debt and ETH gas comp, and close the trove.\\n     */\\n    function _getCappedOffsetVals(\\n        uint _entireTroveDebt,\\n        uint _entireTroveColl,\\n        uint _price\\n    ) internal view returns (LiquidationValues memory singleLiquidation) {\\n        singleLiquidation.entireTroveDebt = _entireTroveDebt;\\n        singleLiquidation.entireTroveColl = _entireTroveColl;\\n        uint cappedCollPortion = _entireTroveDebt.mul(MCR).div(_price);\\n\\n        singleLiquidation.collGasCompensation = _getCollGasCompensation(\\n            cappedCollPortion\\n        );\\n        singleLiquidation.ZKUSDGasCompensation = ZKUSD_GAS_COMPENSATION;\\n\\n        singleLiquidation.debtToOffset = _entireTroveDebt;\\n        singleLiquidation.collToSendToSP = cappedCollPortion.sub(\\n            singleLiquidation.collGasCompensation\\n        );\\n        singleLiquidation.collSurplus = _entireTroveColl.sub(cappedCollPortion);\\n        singleLiquidation.debtToRedistribute = 0;\\n        singleLiquidation.collToRedistribute = 0;\\n    }\\n\\n    /*\\n     * Liquidate a sequence of troves. Closes a maximum number of n under-collateralized Troves,\\n     * starting from the one with the lowest collateral ratio in the system, and moving upwards\\n     */\\n    function liquidateTroves(\\n        uint _n,\\n        bytes[] calldata _updateData\\n    ) external payable override {\\n        ContractsCache memory contractsCache = ContractsCache(\\n            activePool,\\n            defaultPool,\\n            IZKUSDToken(address(0)),\\n            IZKTStaking(address(0)),\\n            sortedTroves,\\n            ICollSurplusPool(address(0)),\\n            address(0)\\n        );\\n        IStabilityPool stabilityPoolCached = stabilityPool;\\n\\n        LocalVariables_OuterLiquidationFunction memory vars;\\n\\n        LiquidationTotals memory totals;\\n\\n        vars.price = _requireCallerHasPriceFeedFee(_updateData);\\n        vars.ZKUSDInStabPool = stabilityPoolCached.getTotalZKUSDDeposits();\\n        vars.recoveryModeAtStart = _checkRecoveryMode(vars.price);\\n\\n        // Perform the appropriate liquidation sequence - tally the values, and obtain their totals\\n        if (vars.recoveryModeAtStart) {\\n            totals = _getTotalsFromLiquidateTrovesSequence_RecoveryMode(\\n                contractsCache,\\n                vars.price,\\n                vars.ZKUSDInStabPool,\\n                _n\\n            );\\n        } else {\\n            // if !vars.recoveryModeAtStart\\n            totals = _getTotalsFromLiquidateTrovesSequence_NormalMode(\\n                contractsCache.activePool,\\n                contractsCache.defaultPool,\\n                vars.price,\\n                vars.ZKUSDInStabPool,\\n                _n\\n            );\\n        }\\n\\n        require(\\n            totals.totalDebtInSequence > 0,\\n            \\\"TroveManager: nothing to liquidate\\\"\\n        );\\n\\n        stabilityPoolCached.offset(\\n            totals.totalDebtToOffset,\\n            totals.totalCollToSendToSP\\n        );\\n        _redistributeDebtAndColl(\\n            contractsCache.activePool,\\n            contractsCache.defaultPool,\\n            totals.totalDebtToRedistribute,\\n            totals.totalCollToRedistribute\\n        );\\n        if (totals.totalCollSurplus > 0) {\\n            contractsCache.activePool.sendETH(\\n                address(collSurplusPool),\\n                totals.totalCollSurplus\\n            );\\n        }\\n\\n        // Update system snapshots\\n        _updateSystemSnapshots_excludeCollRemainder(\\n            contractsCache.activePool,\\n            totals.totalCollGasCompensation\\n        );\\n\\n        vars.liquidatedDebt = totals.totalDebtInSequence;\\n        vars.liquidatedColl = totals\\n            .totalCollInSequence\\n            .sub(totals.totalCollGasCompensation)\\n            .sub(totals.totalCollSurplus);\\n        emit Liquidation(\\n            vars.liquidatedDebt,\\n            vars.liquidatedColl,\\n            totals.totalCollGasCompensation,\\n            totals.totalZKUSDGasCompensation\\n        );\\n\\n        // Send gas compensation to caller\\n        _sendGasCompensation(\\n            contractsCache.activePool,\\n            msg.sender,\\n            totals.totalZKUSDGasCompensation,\\n            totals.totalCollGasCompensation\\n        );\\n    }\\n\\n    /*\\n     * This function is used when the liquidateTroves sequence starts during Recovery Mode. However, it\\n     * handle the case where the system *leaves* Recovery Mode, part way through the liquidation sequence\\n     */\\n    function _getTotalsFromLiquidateTrovesSequence_RecoveryMode(\\n        ContractsCache memory _contractsCache,\\n        uint _price,\\n        uint _ZKUSDInStabPool,\\n        uint _n\\n    ) internal returns (LiquidationTotals memory totals) {\\n        LocalVariables_LiquidationSequence memory vars;\\n        LiquidationValues memory singleLiquidation;\\n\\n        vars.remainingZKUSDInStabPool = _ZKUSDInStabPool;\\n        vars.backToNormalMode = false;\\n        vars.entireSystemDebt = getEntireSystemDebt();\\n        vars.entireSystemColl = getEntireSystemColl();\\n\\n        vars.user = _contractsCache.sortedTroves.getLast();\\n        address firstUser = _contractsCache.sortedTroves.getFirst();\\n        for (vars.i = 0; vars.i < _n && vars.user != firstUser; vars.i++) {\\n            // we need to cache it, because current user is likely going to be deleted\\n            address nextUser = _contractsCache.sortedTroves.getPrev(vars.user);\\n\\n            vars.ICR = getCurrentICR(vars.user, _price);\\n\\n            if (!vars.backToNormalMode) {\\n                // Break the loop if ICR is greater than MCR and Stability Pool is empty\\n                if (vars.ICR >= MCR && vars.remainingZKUSDInStabPool == 0) {\\n                    break;\\n                }\\n\\n                uint TCR = LiquityMath._computeCR(\\n                    vars.entireSystemColl,\\n                    vars.entireSystemDebt,\\n                    _price\\n                );\\n\\n                singleLiquidation = _liquidateRecoveryMode(\\n                    _contractsCache.activePool,\\n                    _contractsCache.defaultPool,\\n                    vars.user,\\n                    vars.ICR,\\n                    vars.remainingZKUSDInStabPool,\\n                    TCR,\\n                    _price\\n                );\\n\\n                // Update aggregate trackers\\n                vars.remainingZKUSDInStabPool = vars\\n                    .remainingZKUSDInStabPool\\n                    .sub(singleLiquidation.debtToOffset);\\n                vars.entireSystemDebt = vars.entireSystemDebt.sub(\\n                    singleLiquidation.debtToOffset\\n                );\\n                vars.entireSystemColl = vars\\n                    .entireSystemColl\\n                    .sub(singleLiquidation.collToSendToSP)\\n                    .sub(singleLiquidation.collGasCompensation)\\n                    .sub(singleLiquidation.collSurplus);\\n\\n                // Add liquidation values to their respective running totals\\n                totals = _addLiquidationValuesToTotals(\\n                    totals,\\n                    singleLiquidation\\n                );\\n\\n                vars.backToNormalMode = !_checkPotentialRecoveryMode(\\n                    vars.entireSystemColl,\\n                    vars.entireSystemDebt,\\n                    _price\\n                );\\n            } else if (vars.backToNormalMode && vars.ICR < MCR) {\\n                singleLiquidation = _liquidateNormalMode(\\n                    _contractsCache.activePool,\\n                    _contractsCache.defaultPool,\\n                    vars.user,\\n                    vars.remainingZKUSDInStabPool\\n                );\\n\\n                vars.remainingZKUSDInStabPool = vars\\n                    .remainingZKUSDInStabPool\\n                    .sub(singleLiquidation.debtToOffset);\\n\\n                // Add liquidation values to their respective running totals\\n                totals = _addLiquidationValuesToTotals(\\n                    totals,\\n                    singleLiquidation\\n                );\\n            } else break; // break if the loop reaches a Trove with ICR >= MCR\\n\\n            vars.user = nextUser;\\n        }\\n    }\\n\\n    function _getTotalsFromLiquidateTrovesSequence_NormalMode(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        uint _price,\\n        uint _ZKUSDInStabPool,\\n        uint _n\\n    ) internal returns (LiquidationTotals memory totals) {\\n        LocalVariables_LiquidationSequence memory vars;\\n        LiquidationValues memory singleLiquidation;\\n        ISortedTroves sortedTrovesCached = sortedTroves;\\n\\n        vars.remainingZKUSDInStabPool = _ZKUSDInStabPool;\\n\\n        for (vars.i = 0; vars.i < _n; vars.i++) {\\n            vars.user = sortedTrovesCached.getLast();\\n            vars.ICR = getCurrentICR(vars.user, _price);\\n\\n            if (vars.ICR < MCR) {\\n                singleLiquidation = _liquidateNormalMode(\\n                    _activePool,\\n                    _defaultPool,\\n                    vars.user,\\n                    vars.remainingZKUSDInStabPool\\n                );\\n\\n                vars.remainingZKUSDInStabPool = vars\\n                    .remainingZKUSDInStabPool\\n                    .sub(singleLiquidation.debtToOffset);\\n\\n                // Add liquidation values to their respective running totals\\n                totals = _addLiquidationValuesToTotals(\\n                    totals,\\n                    singleLiquidation\\n                );\\n            } else break; // break if the loop reaches a Trove with ICR >= MCR\\n        }\\n    }\\n\\n    /*\\n     * Attempt to liquidate a custom list of troves provided by the caller.\\n     */\\n    function batchLiquidateTroves(\\n        address[] memory _troveArray,\\n        bytes[] calldata _updateData\\n    ) public payable override {\\n        require(\\n            _troveArray.length != 0,\\n            \\\"TroveManager: Calldata address array must not be empty\\\"\\n        );\\n\\n        IActivePool activePoolCached = activePool;\\n        IDefaultPool defaultPoolCached = defaultPool;\\n        IStabilityPool stabilityPoolCached = stabilityPool;\\n\\n        LocalVariables_OuterLiquidationFunction memory vars;\\n        LiquidationTotals memory totals;\\n\\n        vars.price = _requireCallerHasPriceFeedFee(_updateData);\\n        vars.ZKUSDInStabPool = stabilityPoolCached.getTotalZKUSDDeposits();\\n        vars.recoveryModeAtStart = _checkRecoveryMode(vars.price);\\n\\n        // Perform the appropriate liquidation sequence - tally values and obtain their totals.\\n        if (vars.recoveryModeAtStart) {\\n            totals = _getTotalFromBatchLiquidate_RecoveryMode(\\n                activePoolCached,\\n                defaultPoolCached,\\n                vars.price,\\n                vars.ZKUSDInStabPool,\\n                _troveArray\\n            );\\n        } else {\\n            //  if !vars.recoveryModeAtStart\\n            totals = _getTotalsFromBatchLiquidate_NormalMode(\\n                activePoolCached,\\n                defaultPoolCached,\\n                vars.price,\\n                vars.ZKUSDInStabPool,\\n                _troveArray\\n            );\\n        }\\n\\n        require(\\n            totals.totalDebtInSequence > 0,\\n            \\\"TroveManager: nothing to liquidate\\\"\\n        );\\n\\n        // Move liquidated ETH and ZKUSD to the appropriate pools\\n        stabilityPoolCached.offset(\\n            totals.totalDebtToOffset,\\n            totals.totalCollToSendToSP\\n        );\\n        _redistributeDebtAndColl(\\n            activePoolCached,\\n            defaultPoolCached,\\n            totals.totalDebtToRedistribute,\\n            totals.totalCollToRedistribute\\n        );\\n        if (totals.totalCollSurplus > 0) {\\n            activePoolCached.sendETH(\\n                address(collSurplusPool),\\n                totals.totalCollSurplus\\n            );\\n        }\\n\\n        // Update system snapshots\\n        _updateSystemSnapshots_excludeCollRemainder(\\n            activePoolCached,\\n            totals.totalCollGasCompensation\\n        );\\n\\n        vars.liquidatedDebt = totals.totalDebtInSequence;\\n        vars.liquidatedColl = totals\\n            .totalCollInSequence\\n            .sub(totals.totalCollGasCompensation)\\n            .sub(totals.totalCollSurplus);\\n        emit Liquidation(\\n            vars.liquidatedDebt,\\n            vars.liquidatedColl,\\n            totals.totalCollGasCompensation,\\n            totals.totalZKUSDGasCompensation\\n        );\\n\\n        // Send gas compensation to caller\\n        _sendGasCompensation(\\n            activePoolCached,\\n            msg.sender,\\n            totals.totalZKUSDGasCompensation,\\n            totals.totalCollGasCompensation\\n        );\\n    }\\n\\n    /*\\n     * This function is used when the batch liquidation sequence starts during Recovery Mode. However, it\\n     * handle the case where the system *leaves* Recovery Mode, part way through the liquidation sequence\\n     */\\n    function _getTotalFromBatchLiquidate_RecoveryMode(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        uint _price,\\n        uint _ZKUSDInStabPool,\\n        address[] memory _troveArray\\n    ) internal returns (LiquidationTotals memory totals) {\\n        LocalVariables_LiquidationSequence memory vars;\\n        LiquidationValues memory singleLiquidation;\\n\\n        vars.remainingZKUSDInStabPool = _ZKUSDInStabPool;\\n        vars.backToNormalMode = false;\\n        vars.entireSystemDebt = getEntireSystemDebt();\\n        vars.entireSystemColl = getEntireSystemColl();\\n\\n        for (vars.i = 0; vars.i < _troveArray.length; vars.i++) {\\n            vars.user = _troveArray[vars.i];\\n            // Skip non-active troves\\n            if (Troves[vars.user].status != Status.active) {\\n                continue;\\n            }\\n            vars.ICR = getCurrentICR(vars.user, _price);\\n\\n            if (!vars.backToNormalMode) {\\n                // Skip this trove if ICR is greater than MCR and Stability Pool is empty\\n                if (vars.ICR >= MCR && vars.remainingZKUSDInStabPool == 0) {\\n                    continue;\\n                }\\n\\n                uint TCR = LiquityMath._computeCR(\\n                    vars.entireSystemColl,\\n                    vars.entireSystemDebt,\\n                    _price\\n                );\\n\\n                singleLiquidation = _liquidateRecoveryMode(\\n                    _activePool,\\n                    _defaultPool,\\n                    vars.user,\\n                    vars.ICR,\\n                    vars.remainingZKUSDInStabPool,\\n                    TCR,\\n                    _price\\n                );\\n\\n                // Update aggregate trackers\\n                vars.remainingZKUSDInStabPool = vars\\n                    .remainingZKUSDInStabPool\\n                    .sub(singleLiquidation.debtToOffset);\\n                vars.entireSystemDebt = vars.entireSystemDebt.sub(\\n                    singleLiquidation.debtToOffset\\n                );\\n                vars.entireSystemColl = vars\\n                    .entireSystemColl\\n                    .sub(singleLiquidation.collToSendToSP)\\n                    .sub(singleLiquidation.collGasCompensation)\\n                    .sub(singleLiquidation.collSurplus);\\n\\n                // Add liquidation values to their respective running totals\\n                totals = _addLiquidationValuesToTotals(\\n                    totals,\\n                    singleLiquidation\\n                );\\n\\n                vars.backToNormalMode = !_checkPotentialRecoveryMode(\\n                    vars.entireSystemColl,\\n                    vars.entireSystemDebt,\\n                    _price\\n                );\\n            } else if (vars.backToNormalMode && vars.ICR < MCR) {\\n                singleLiquidation = _liquidateNormalMode(\\n                    _activePool,\\n                    _defaultPool,\\n                    vars.user,\\n                    vars.remainingZKUSDInStabPool\\n                );\\n                vars.remainingZKUSDInStabPool = vars\\n                    .remainingZKUSDInStabPool\\n                    .sub(singleLiquidation.debtToOffset);\\n\\n                // Add liquidation values to their respective running totals\\n                totals = _addLiquidationValuesToTotals(\\n                    totals,\\n                    singleLiquidation\\n                );\\n            } else continue; // In Normal Mode skip troves with ICR >= MCR\\n        }\\n    }\\n\\n    function _getTotalsFromBatchLiquidate_NormalMode(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        uint _price,\\n        uint _ZKUSDInStabPool,\\n        address[] memory _troveArray\\n    ) internal returns (LiquidationTotals memory totals) {\\n        LocalVariables_LiquidationSequence memory vars;\\n        LiquidationValues memory singleLiquidation;\\n\\n        vars.remainingZKUSDInStabPool = _ZKUSDInStabPool;\\n\\n        for (vars.i = 0; vars.i < _troveArray.length; vars.i++) {\\n            vars.user = _troveArray[vars.i];\\n            vars.ICR = getCurrentICR(vars.user, _price);\\n\\n            if (vars.ICR < MCR) {\\n                singleLiquidation = _liquidateNormalMode(\\n                    _activePool,\\n                    _defaultPool,\\n                    vars.user,\\n                    vars.remainingZKUSDInStabPool\\n                );\\n                vars.remainingZKUSDInStabPool = vars\\n                    .remainingZKUSDInStabPool\\n                    .sub(singleLiquidation.debtToOffset);\\n\\n                // Add liquidation values to their respective running totals\\n                totals = _addLiquidationValuesToTotals(\\n                    totals,\\n                    singleLiquidation\\n                );\\n            }\\n        }\\n    }\\n\\n    // --- Liquidation helper functions ---\\n\\n    function _addLiquidationValuesToTotals(\\n        LiquidationTotals memory oldTotals,\\n        LiquidationValues memory singleLiquidation\\n    ) internal pure returns (LiquidationTotals memory newTotals) {\\n        // Tally all the values with their respective running totals\\n        newTotals.totalCollGasCompensation = oldTotals\\n            .totalCollGasCompensation\\n            .add(singleLiquidation.collGasCompensation);\\n        newTotals.totalZKUSDGasCompensation = oldTotals\\n            .totalZKUSDGasCompensation\\n            .add(singleLiquidation.ZKUSDGasCompensation);\\n        newTotals.totalDebtInSequence = oldTotals.totalDebtInSequence.add(\\n            singleLiquidation.entireTroveDebt\\n        );\\n        newTotals.totalCollInSequence = oldTotals.totalCollInSequence.add(\\n            singleLiquidation.entireTroveColl\\n        );\\n        newTotals.totalDebtToOffset = oldTotals.totalDebtToOffset.add(\\n            singleLiquidation.debtToOffset\\n        );\\n        newTotals.totalCollToSendToSP = oldTotals.totalCollToSendToSP.add(\\n            singleLiquidation.collToSendToSP\\n        );\\n        newTotals.totalDebtToRedistribute = oldTotals\\n            .totalDebtToRedistribute\\n            .add(singleLiquidation.debtToRedistribute);\\n        newTotals.totalCollToRedistribute = oldTotals\\n            .totalCollToRedistribute\\n            .add(singleLiquidation.collToRedistribute);\\n        newTotals.totalCollSurplus = oldTotals.totalCollSurplus.add(\\n            singleLiquidation.collSurplus\\n        );\\n\\n        return newTotals;\\n    }\\n\\n    function _sendGasCompensation(\\n        IActivePool _activePool,\\n        address _liquidator,\\n        uint _ZKUSD,\\n        uint _ETH\\n    ) internal {\\n        if (_ZKUSD > 0) {\\n            zkusdToken.returnFromPool(gasPoolAddress, _liquidator, _ZKUSD);\\n        }\\n\\n        if (_ETH > 0) {\\n            _activePool.sendETH(_liquidator, _ETH);\\n        }\\n    }\\n\\n    // Move a Trove's pending debt and collateral rewards from distributions, from the Default Pool to the Active Pool\\n    function _movePendingTroveRewardsToActivePool(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        uint _ZKUSD,\\n        uint _ETH\\n    ) internal {\\n        _defaultPool.decreaseZKUSDDebt(_ZKUSD);\\n        _activePool.increaseZKUSDDebt(_ZKUSD);\\n        _defaultPool.sendETHToActivePool(_ETH);\\n    }\\n\\n    // --- Redemption functions ---\\n\\n    // Redeem as much collateral as possible from _borrower's Trove in exchange for ZKUSD up to _maxZKUSDamount\\n    function _redeemCollateralFromTrove(\\n        ContractsCache memory _contractsCache,\\n        address _borrower,\\n        uint _maxZKUSDamount,\\n        uint _price,\\n        address _upperPartialRedemptionHint,\\n        address _lowerPartialRedemptionHint,\\n        uint _partialRedemptionHintNICR\\n    ) internal returns (SingleRedemptionValues memory singleRedemption) {\\n        // Determine the remaining amount (lot) to be redeemed, capped by the entire debt of the Trove minus the liquidation reserve\\n        singleRedemption.ZKUSDLot = LiquityMath._min(\\n            _maxZKUSDamount,\\n            Troves[_borrower].debt.sub(ZKUSD_GAS_COMPENSATION)\\n        );\\n\\n        // Get the ETHLot of equivalent value in USD\\n        singleRedemption.ETHLot = singleRedemption\\n            .ZKUSDLot\\n            .mul(DECIMAL_PRECISION)\\n            .div(_price);\\n\\n        // Decrease the debt and collateral of the current Trove according to the ZKUSD lot and corresponding ETH to send\\n        uint newDebt = (Troves[_borrower].debt).sub(singleRedemption.ZKUSDLot);\\n        uint newColl = (Troves[_borrower].coll).sub(singleRedemption.ETHLot);\\n\\n        if (newDebt == ZKUSD_GAS_COMPENSATION) {\\n            // No debt left in the Trove (except for the liquidation reserve), therefore the trove gets closed\\n            _removeStake(_borrower);\\n            _closeTrove(_borrower, Status.closedByRedemption);\\n            _redeemCloseTrove(\\n                _contractsCache,\\n                _borrower,\\n                ZKUSD_GAS_COMPENSATION,\\n                newColl\\n            );\\n            emit TroveUpdated(\\n                _borrower,\\n                0,\\n                0,\\n                0,\\n                TroveManagerOperation.redeemCollateral\\n            );\\n        } else {\\n            uint newNICR = LiquityMath._computeNominalCR(newColl, newDebt);\\n\\n            /*\\n             * If the provided hint is out of date, we bail since trying to reinsert without a good hint will almost\\n             * certainly result in running out of gas.\\n             *\\n             * If the resultant net debt of the partial is less than the minimum, net debt we bail.\\n             */\\n            if (\\n                newNICR != _partialRedemptionHintNICR ||\\n                _getNetDebt(newDebt) < MIN_NET_DEBT\\n            ) {\\n                singleRedemption.cancelledPartial = true;\\n                return singleRedemption;\\n            }\\n\\n            _contractsCache.sortedTroves.reInsert(\\n                _borrower,\\n                newNICR,\\n                _upperPartialRedemptionHint,\\n                _lowerPartialRedemptionHint\\n            );\\n\\n            Troves[_borrower].debt = newDebt;\\n            Troves[_borrower].coll = newColl;\\n            _updateStakeAndTotalStakes(_borrower);\\n\\n            emit TroveUpdated(\\n                _borrower,\\n                newDebt,\\n                newColl,\\n                Troves[_borrower].stake,\\n                TroveManagerOperation.redeemCollateral\\n            );\\n        }\\n\\n        return singleRedemption;\\n    }\\n\\n    /*\\n     * Called when a full redemption occurs, and closes the trove.\\n     * The redeemer swaps (debt - liquidation reserve) ZKUSD for (debt - liquidation reserve) worth of ETH, so the ZKUSD liquidation reserve left corresponds to the remaining debt.\\n     * In order to close the trove, the ZKUSD liquidation reserve is burned, and the corresponding debt is removed from the active pool.\\n     * The debt recorded on the trove's struct is zero'd elswhere, in _closeTrove.\\n     * Any surplus ETH left in the trove, is sent to the Coll surplus pool, and can be later claimed by the borrower.\\n     */\\n    function _redeemCloseTrove(\\n        ContractsCache memory _contractsCache,\\n        address _borrower,\\n        uint _ZKUSD,\\n        uint _ETH\\n    ) internal {\\n        _contractsCache.zkusdToken.burn(gasPoolAddress, _ZKUSD);\\n        // Update Active Pool ZKUSD, and send ETH to account\\n        _contractsCache.activePool.decreaseZKUSDDebt(_ZKUSD);\\n\\n        // send ETH from Active Pool to CollSurplus Pool\\n        _contractsCache.collSurplusPool.accountSurplus(_borrower, _ETH);\\n        _contractsCache.activePool.sendETH(\\n            address(_contractsCache.collSurplusPool),\\n            _ETH\\n        );\\n    }\\n\\n    function _isValidFirstRedemptionHint(\\n        ISortedTroves _sortedTroves,\\n        address _firstRedemptionHint,\\n        uint _price\\n    ) internal view returns (bool) {\\n        if (\\n            _firstRedemptionHint == address(0) ||\\n            !_sortedTroves.contains(_firstRedemptionHint) ||\\n            getCurrentICR(_firstRedemptionHint, _price) < MCR\\n        ) {\\n            return false;\\n        }\\n\\n        address nextTrove = _sortedTroves.getNext(_firstRedemptionHint);\\n        return\\n            nextTrove == address(0) || getCurrentICR(nextTrove, _price) < MCR;\\n    }\\n\\n    function _foundCurrentBorrower(\\n        address _firstRedemptionHint,\\n        RedemptionTotals memory totals,\\n        ContractsCache memory contractsCache\\n    ) internal view returns (address currentBorrower) {\\n        if (\\n            _isValidFirstRedemptionHint(\\n                contractsCache.sortedTroves,\\n                _firstRedemptionHint,\\n                totals.price\\n            )\\n        ) {\\n            currentBorrower = _firstRedemptionHint;\\n        } else {\\n            currentBorrower = contractsCache.sortedTroves.getLast();\\n            // Find the first trove with ICR >= MCR\\n            while (\\n                currentBorrower != address(0) &&\\n                getCurrentICR(currentBorrower, totals.price) < MCR\\n            ) {\\n                currentBorrower = contractsCache.sortedTroves.getPrev(\\n                    currentBorrower\\n                );\\n            }\\n        }\\n    }\\n\\n    function _loopThroughTroves(\\n        uint _maxIterations,\\n        address _upperPartialRedemptionHint,\\n        address _lowerPartialRedemptionHint,\\n        uint _partialRedemptionHintNICR,\\n        address currentBorrower,\\n        RedemptionTotals memory totals,\\n        ContractsCache memory contractsCache\\n    )\\n        internal\\n        returns (\\n            uint totalZKUSDToRedeem,\\n            uint totalETHDrawn,\\n            uint remainingZKUSD\\n        )\\n    {\\n        // Loop through the Troves starting from the one with lowest collateral ratio until _amount of ZKUSD is exchanged for collateral\\n        if (_maxIterations == 0) {\\n            _maxIterations = uint(-1);\\n        }\\n        while (\\n            currentBorrower != address(0) &&\\n            totals.remainingZKUSD > 0 &&\\n            _maxIterations > 0\\n        ) {\\n            _maxIterations--;\\n            // Save the address of the Trove preceding the current one, before potentially modifying the list\\n            address nextUserToCheck = contractsCache.sortedTroves.getPrev(\\n                currentBorrower\\n            );\\n\\n            _applyPendingRewards(\\n                contractsCache.activePool,\\n                contractsCache.defaultPool,\\n                currentBorrower\\n            );\\n\\n            SingleRedemptionValues\\n                memory singleRedemption = _redeemCollateralFromTrove(\\n                    contractsCache,\\n                    currentBorrower,\\n                    totals.remainingZKUSD,\\n                    totals.price,\\n                    _upperPartialRedemptionHint,\\n                    _lowerPartialRedemptionHint,\\n                    _partialRedemptionHintNICR\\n                );\\n\\n            if (singleRedemption.cancelledPartial) break; // Partial redemption was cancelled (out-of-date hint, or new net debt < minimum), therefore we could not redeem from the last Trove\\n\\n            totals.totalZKUSDToRedeem = totals.totalZKUSDToRedeem.add(\\n                singleRedemption.ZKUSDLot\\n            );\\n            totals.totalETHDrawn = totals.totalETHDrawn.add(\\n                singleRedemption.ETHLot\\n            );\\n\\n            totals.remainingZKUSD = totals.remainingZKUSD.sub(\\n                singleRedemption.ZKUSDLot\\n            );\\n            currentBorrower = nextUserToCheck;\\n        }\\n        require(\\n            totals.totalETHDrawn > 0,\\n            \\\"TroveManager: Unable to redeem any amount\\\"\\n        );\\n        return (\\n            totals.totalZKUSDToRedeem,\\n            totals.totalETHDrawn,\\n            totals.remainingZKUSD\\n        );\\n    }\\n\\n    function redeemCollateral(\\n        uint _ZKUSDamount,\\n        address _firstRedemptionHint,\\n        address _upperPartialRedemptionHint,\\n        address _lowerPartialRedemptionHint,\\n        uint _partialRedemptionHintNICR,\\n        uint _maxIterations,\\n        uint _maxFeePercentage,\\n        bytes[] calldata _updateData\\n    ) external payable override {\\n        ContractsCache memory contractsCache = ContractsCache(\\n            activePool,\\n            defaultPool,\\n            zkusdToken,\\n            zktStaking,\\n            sortedTroves,\\n            collSurplusPool,\\n            gasPoolAddress\\n        );\\n        RedemptionTotals memory totals;\\n\\n        _requireValidMaxFeePercentage(_maxFeePercentage);\\n        _requireAfterBootstrapPeriod();\\n        totals.price = _requireCallerHasPriceFeedFee(_updateData);\\n        _requireTCRoverMCR(totals.price);\\n        _requireAmountGreaterThanZero(_ZKUSDamount);\\n        _requireZKUSDBalanceCoversRedemption(\\n            contractsCache.zkusdToken,\\n            msg.sender,\\n            _ZKUSDamount\\n        );\\n\\n        totals.totalZKUSDSupplyAtStart = getEntireSystemDebt();\\n        // Confirm redeemer's balance is less than total ZKUSD supply\\n        assert(\\n            contractsCache.zkusdToken.balanceOf(msg.sender) <=\\n                totals.totalZKUSDSupplyAtStart\\n        );\\n\\n        totals.remainingZKUSD = _ZKUSDamount;\\n        address currentBorrower = _foundCurrentBorrower(\\n            _firstRedemptionHint,\\n            totals,\\n            contractsCache\\n        );\\n        (\\n            totals.totalZKUSDToRedeem,\\n            totals.totalETHDrawn,\\n            totals.remainingZKUSD\\n        ) = _loopThroughTroves(\\n            _maxIterations,\\n            _upperPartialRedemptionHint,\\n            _lowerPartialRedemptionHint,\\n            _partialRedemptionHintNICR,\\n            currentBorrower,\\n            totals,\\n            contractsCache\\n        );\\n\\n        // Decay the baseRate due to time passed, and then increase it according to the size of this redemption.\\n        // Use the saved total ZKUSD supply value, from before it was reduced by the redemption.\\n        _updateBaseRateFromRedemption(\\n            totals.totalETHDrawn,\\n            totals.price,\\n            totals.totalZKUSDSupplyAtStart\\n        );\\n\\n        // Calculate the ETH fee\\n        totals.ETHFee = _getRedemptionFee(totals.totalETHDrawn);\\n\\n        _requireUserAcceptsFee(\\n            totals.ETHFee,\\n            totals.totalETHDrawn,\\n            _maxFeePercentage\\n        );\\n\\n        // Send the ETH fee to the ZKT staking contract\\n        contractsCache.activePool.sendETH(\\n            address(contractsCache.zktStaking),\\n            totals.ETHFee\\n        );\\n        contractsCache.zktStaking.increaseF_ETH(totals.ETHFee);\\n\\n        totals.ETHToSendToRedeemer = totals.totalETHDrawn.sub(totals.ETHFee);\\n\\n        emit Redemption(\\n            _ZKUSDamount,\\n            totals.totalZKUSDToRedeem,\\n            totals.totalETHDrawn,\\n            totals.ETHFee\\n        );\\n\\n        // Burn the total ZKUSD that is cancelled with debt, and send the redeemed ETH to msg.sender\\n        contractsCache.zkusdToken.burn(msg.sender, totals.totalZKUSDToRedeem);\\n        // Update Active Pool ZKUSD, and send ETH to account\\n        contractsCache.activePool.decreaseZKUSDDebt(totals.totalZKUSDToRedeem);\\n        contractsCache.activePool.sendETH(\\n            msg.sender,\\n            totals.ETHToSendToRedeemer\\n        );\\n    }\\n\\n    // --- Helper functions ---\\n\\n    // Return the nominal collateral ratio (ICR) of a given Trove, without the price. Takes a trove's pending coll and debt rewards from redistributions into account.\\n    function getNominalICR(\\n        address _borrower\\n    ) public view override returns (uint) {\\n        (uint currentETH, uint currentZKUSDDebt) = _getCurrentTroveAmounts(\\n            _borrower\\n        );\\n\\n        uint NICR = LiquityMath._computeNominalCR(currentETH, currentZKUSDDebt);\\n        return NICR;\\n    }\\n\\n    // Return the current collateral ratio (ICR) of a given Trove. Takes a trove's pending coll and debt rewards from redistributions into account.\\n    function getCurrentICR(\\n        address _borrower,\\n        uint _price\\n    ) public view override returns (uint) {\\n        (uint currentETH, uint currentZKUSDDebt) = _getCurrentTroveAmounts(\\n            _borrower\\n        );\\n\\n        uint ICR = LiquityMath._computeCR(currentETH, currentZKUSDDebt, _price);\\n        return ICR;\\n    }\\n\\n    function _getCurrentTroveAmounts(\\n        address _borrower\\n    ) internal view returns (uint, uint) {\\n        uint pendingETHReward = getPendingETHReward(_borrower);\\n        uint pendingZKUSDDebtReward = getPendingZKUSDDebtReward(_borrower);\\n\\n        uint currentETH = Troves[_borrower].coll.add(pendingETHReward);\\n        uint currentZKUSDDebt = Troves[_borrower].debt.add(\\n            pendingZKUSDDebtReward\\n        );\\n\\n        return (currentETH, currentZKUSDDebt);\\n    }\\n\\n    function applyPendingRewards(address _borrower) external override {\\n        _requireCallerIsBorrowerOperations();\\n        return _applyPendingRewards(activePool, defaultPool, _borrower);\\n    }\\n\\n    // Add the borrowers's coll and debt rewards earned from redistributions, to their Trove\\n    function _applyPendingRewards(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        address _borrower\\n    ) internal {\\n        if (hasPendingRewards(_borrower)) {\\n            _requireTroveIsActive(_borrower);\\n\\n            // Compute pending rewards\\n            uint pendingETHReward = getPendingETHReward(_borrower);\\n            uint pendingZKUSDDebtReward = getPendingZKUSDDebtReward(_borrower);\\n\\n            // Apply pending rewards to trove's state\\n            Troves[_borrower].coll = Troves[_borrower].coll.add(\\n                pendingETHReward\\n            );\\n            Troves[_borrower].debt = Troves[_borrower].debt.add(\\n                pendingZKUSDDebtReward\\n            );\\n\\n            _updateTroveRewardSnapshots(_borrower);\\n\\n            // Transfer from DefaultPool to ActivePool\\n            _movePendingTroveRewardsToActivePool(\\n                _activePool,\\n                _defaultPool,\\n                pendingZKUSDDebtReward,\\n                pendingETHReward\\n            );\\n\\n            emit TroveUpdated(\\n                _borrower,\\n                Troves[_borrower].debt,\\n                Troves[_borrower].coll,\\n                Troves[_borrower].stake,\\n                TroveManagerOperation.applyPendingRewards\\n            );\\n        }\\n    }\\n\\n    // Update borrower's snapshots of L_ETH and L_ZKUSDDebt to reflect the current values\\n    function updateTroveRewardSnapshots(address _borrower) external override {\\n        _requireCallerIsBorrowerOperations();\\n        return _updateTroveRewardSnapshots(_borrower);\\n    }\\n\\n    function _updateTroveRewardSnapshots(address _borrower) internal {\\n        rewardSnapshots[_borrower].ETH = L_ETH;\\n        rewardSnapshots[_borrower].ZKUSDDebt = L_ZKUSDDebt;\\n        emit TroveSnapshotsUpdated(_borrower, L_ETH, L_ZKUSDDebt);\\n    }\\n\\n    // Get the borrower's pending accumulated ETH reward, earned by their stake\\n    function getPendingETHReward(\\n        address _borrower\\n    ) public view override returns (uint) {\\n        uint snapshotETH = rewardSnapshots[_borrower].ETH;\\n        uint rewardPerUnitStaked = L_ETH.sub(snapshotETH);\\n\\n        if (\\n            rewardPerUnitStaked == 0 ||\\n            Troves[_borrower].status != Status.active\\n        ) {\\n            return 0;\\n        }\\n\\n        uint stake = Troves[_borrower].stake;\\n\\n        uint pendingETHReward = stake.mul(rewardPerUnitStaked).div(\\n            DECIMAL_PRECISION\\n        );\\n\\n        return pendingETHReward;\\n    }\\n\\n    // Get the borrower's pending accumulated ZKUSD reward, earned by their stake\\n    function getPendingZKUSDDebtReward(\\n        address _borrower\\n    ) public view override returns (uint) {\\n        uint snapshotZKUSDDebt = rewardSnapshots[_borrower].ZKUSDDebt;\\n        uint rewardPerUnitStaked = L_ZKUSDDebt.sub(snapshotZKUSDDebt);\\n\\n        if (\\n            rewardPerUnitStaked == 0 ||\\n            Troves[_borrower].status != Status.active\\n        ) {\\n            return 0;\\n        }\\n\\n        uint stake = Troves[_borrower].stake;\\n\\n        uint pendingZKUSDDebtReward = stake.mul(rewardPerUnitStaked).div(\\n            DECIMAL_PRECISION\\n        );\\n\\n        return pendingZKUSDDebtReward;\\n    }\\n\\n    function hasPendingRewards(\\n        address _borrower\\n    ) public view override returns (bool) {\\n        /*\\n         * A Trove has pending rewards if its snapshot is less than the current rewards per-unit-staked sum:\\n         * this indicates that rewards have occured since the snapshot was made, and the user therefore has\\n         * pending rewards\\n         */\\n        if (Troves[_borrower].status != Status.active) {\\n            return false;\\n        }\\n\\n        return (rewardSnapshots[_borrower].ETH < L_ETH);\\n    }\\n\\n    // Return the Troves entire debt and coll, including pending rewards from redistributions.\\n    function getEntireDebtAndColl(\\n        address _borrower\\n    )\\n        public\\n        view\\n        override\\n        returns (\\n            uint debt,\\n            uint coll,\\n            uint pendingZKUSDDebtReward,\\n            uint pendingETHReward\\n        )\\n    {\\n        debt = Troves[_borrower].debt;\\n        coll = Troves[_borrower].coll;\\n\\n        pendingZKUSDDebtReward = getPendingZKUSDDebtReward(_borrower);\\n        pendingETHReward = getPendingETHReward(_borrower);\\n\\n        debt = debt.add(pendingZKUSDDebtReward);\\n        coll = coll.add(pendingETHReward);\\n    }\\n\\n    function removeStake(address _borrower) external override {\\n        _requireCallerIsBorrowerOperations();\\n        return _removeStake(_borrower);\\n    }\\n\\n    // Remove borrower's stake from the totalStakes sum, and set their stake to 0\\n    function _removeStake(address _borrower) internal {\\n        uint stake = Troves[_borrower].stake;\\n        totalStakes = totalStakes.sub(stake);\\n        Troves[_borrower].stake = 0;\\n    }\\n\\n    function updateStakeAndTotalStakes(\\n        address _borrower\\n    ) external override returns (uint) {\\n        _requireCallerIsBorrowerOperations();\\n        return _updateStakeAndTotalStakes(_borrower);\\n    }\\n\\n    // Update borrower's stake based on their latest collateral value\\n    function _updateStakeAndTotalStakes(\\n        address _borrower\\n    ) internal returns (uint) {\\n        uint newStake = _computeNewStake(Troves[_borrower].coll);\\n        uint oldStake = Troves[_borrower].stake;\\n        Troves[_borrower].stake = newStake;\\n\\n        totalStakes = totalStakes.sub(oldStake).add(newStake);\\n        emit TotalStakesUpdated(totalStakes);\\n\\n        return newStake;\\n    }\\n\\n    // Calculate a new stake based on the snapshots of the totalStakes and totalCollateral taken at the last liquidation\\n    function _computeNewStake(uint _coll) internal view returns (uint) {\\n        uint stake;\\n        if (totalCollateralSnapshot == 0) {\\n            stake = _coll;\\n        } else {\\n            assert(totalStakesSnapshot > 0);\\n            stake = _coll.mul(totalStakesSnapshot).div(totalCollateralSnapshot);\\n        }\\n        return stake;\\n    }\\n\\n    function _redistributeDebtAndColl(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        uint _debt,\\n        uint _coll\\n    ) internal {\\n        if (_debt == 0) {\\n            return;\\n        }\\n\\n        uint ETHNumerator = _coll.mul(DECIMAL_PRECISION).add(\\n            lastETHError_Redistribution\\n        );\\n        uint ZKUSDDebtNumerator = _debt.mul(DECIMAL_PRECISION).add(\\n            lastZKUSDDebtError_Redistribution\\n        );\\n\\n        // Get the per-unit-staked terms\\n        uint ETHRewardPerUnitStaked = ETHNumerator.div(totalStakes);\\n        uint ZKUSDDebtRewardPerUnitStaked = ZKUSDDebtNumerator.div(totalStakes);\\n\\n        lastETHError_Redistribution = ETHNumerator.sub(\\n            ETHRewardPerUnitStaked.mul(totalStakes)\\n        );\\n        lastZKUSDDebtError_Redistribution = ZKUSDDebtNumerator.sub(\\n            ZKUSDDebtRewardPerUnitStaked.mul(totalStakes)\\n        );\\n\\n        // Add per-unit-staked terms to the running totals\\n        L_ETH = L_ETH.add(ETHRewardPerUnitStaked);\\n        L_ZKUSDDebt = L_ZKUSDDebt.add(ZKUSDDebtRewardPerUnitStaked);\\n\\n        emit LTermsUpdated(L_ETH, L_ZKUSDDebt);\\n\\n        // Transfer coll and debt from ActivePool to DefaultPool\\n        _activePool.decreaseZKUSDDebt(_debt);\\n        _defaultPool.increaseZKUSDDebt(_debt);\\n        _activePool.sendETH(address(_defaultPool), _coll);\\n    }\\n\\n    function closeTrove(address _borrower) external override {\\n        _requireCallerIsBorrowerOperations();\\n        return _closeTrove(_borrower, Status.closedByOwner);\\n    }\\n\\n    function _closeTrove(address _borrower, Status closedStatus) internal {\\n        assert(\\n            closedStatus != Status.nonExistent && closedStatus != Status.active\\n        );\\n\\n        uint TroveOwnersArrayLength = TroveOwners.length;\\n        _requireMoreThanOneTroveInSystem(TroveOwnersArrayLength);\\n\\n        Troves[_borrower].status = closedStatus;\\n        Troves[_borrower].coll = 0;\\n        Troves[_borrower].debt = 0;\\n\\n        rewardSnapshots[_borrower].ETH = 0;\\n        rewardSnapshots[_borrower].ZKUSDDebt = 0;\\n\\n        _removeTroveOwner(_borrower, TroveOwnersArrayLength);\\n        sortedTroves.remove(_borrower);\\n    }\\n\\n    /*\\n     * Updates snapshots of system total stakes and total collateral, excluding a given collateral remainder from the calculation.\\n     * Used in a liquidation sequence.\\n     *\\n     * The calculation excludes a portion of collateral that is in the ActivePool:\\n     *\\n     * the total ETH gas compensation from the liquidation sequence\\n     *\\n     * The ETH as compensation must be excluded as it is always sent out at the very end of the liquidation sequence.\\n     */\\n    function _updateSystemSnapshots_excludeCollRemainder(\\n        IActivePool _activePool,\\n        uint _collRemainder\\n    ) internal {\\n        totalStakesSnapshot = totalStakes;\\n\\n        uint activeColl = _activePool.getETH();\\n        uint liquidatedColl = defaultPool.getETH();\\n        totalCollateralSnapshot = activeColl.sub(_collRemainder).add(\\n            liquidatedColl\\n        );\\n\\n        emit SystemSnapshotsUpdated(\\n            totalStakesSnapshot,\\n            totalCollateralSnapshot\\n        );\\n    }\\n\\n    // Push the owner's address to the Trove owners list, and record the corresponding array index on the Trove struct\\n    function addTroveOwnerToArray(\\n        address _borrower\\n    ) external override returns (uint index) {\\n        _requireCallerIsBorrowerOperations();\\n        return _addTroveOwnerToArray(_borrower);\\n    }\\n\\n    function _addTroveOwnerToArray(\\n        address _borrower\\n    ) internal returns (uint128 index) {\\n        /* Max array size is 2**128 - 1, i.e. ~3e30 troves. No risk of overflow, since troves have minimum ZKUSD\\n        debt of liquidation reserve plus MIN_NET_DEBT. 3e30 ZKUSD dwarfs the value of all wealth in the world ( which is < 1e15 USD). */\\n\\n        // Push the Troveowner to the array\\n        TroveOwners.push(_borrower);\\n\\n        // Record the index of the new Troveowner on their Trove struct\\n        index = uint128(TroveOwners.length.sub(1));\\n        Troves[_borrower].arrayIndex = index;\\n\\n        return index;\\n    }\\n\\n    /*\\n     * Remove a Trove owner from the TroveOwners array, not preserving array order. Removing owner 'B' does the following:\\n     * [A B C D E] => [A E C D], and updates E's Trove struct to point to its new array index.\\n     */\\n    function _removeTroveOwner(\\n        address _borrower,\\n        uint TroveOwnersArrayLength\\n    ) internal {\\n        Status troveStatus = Troves[_borrower].status;\\n        // It\\u2019s set in caller function `_closeTrove`\\n        assert(\\n            troveStatus != Status.nonExistent && troveStatus != Status.active\\n        );\\n\\n        uint128 index = Troves[_borrower].arrayIndex;\\n        uint length = TroveOwnersArrayLength;\\n        uint idxLast = length.sub(1);\\n\\n        assert(index <= idxLast);\\n\\n        address addressToMove = TroveOwners[idxLast];\\n\\n        TroveOwners[index] = addressToMove;\\n        Troves[addressToMove].arrayIndex = index;\\n        emit TroveIndexUpdated(addressToMove, index);\\n\\n        TroveOwners.pop();\\n    }\\n\\n    // --- Recovery Mode and TCR functions ---\\n\\n    function getTCR(uint _price) external view override returns (uint) {\\n        return _getTCR(_price);\\n    }\\n\\n    function checkRecoveryMode(\\n        uint _price\\n    ) external view override returns (bool) {\\n        return _checkRecoveryMode(_price);\\n    }\\n\\n    // Check whether or not the system *would be* in Recovery Mode, given an ETH:USD price, and the entire system coll and debt.\\n    function _checkPotentialRecoveryMode(\\n        uint _entireSystemColl,\\n        uint _entireSystemDebt,\\n        uint _price\\n    ) internal pure returns (bool) {\\n        uint TCR = LiquityMath._computeCR(\\n            _entireSystemColl,\\n            _entireSystemDebt,\\n            _price\\n        );\\n\\n        return TCR < CCR;\\n    }\\n\\n    // --- Redemption fee functions ---\\n\\n    /*\\n     * This function has two impacts on the baseRate state variable:\\n     * 1) decays the baseRate based on time passed since last redemption or ZKUSD borrowing operation.\\n     * then,\\n     * 2) increases the baseRate based on the amount redeemed, as a proportion of total supply\\n     */\\n    function _updateBaseRateFromRedemption(\\n        uint _ETHDrawn,\\n        uint _price,\\n        uint _totalZKUSDSupply\\n    ) internal returns (uint) {\\n        uint decayedBaseRate = _calcDecayedBaseRate();\\n\\n        /* Convert the drawn ETH back to ZKUSD at face value rate (1 ZKUSD:1 USD), in order to get\\n         * the fraction of total supply that was redeemed at face value. */\\n        uint redeemedZKUSDFraction = _ETHDrawn.mul(_price).div(\\n            _totalZKUSDSupply\\n        );\\n\\n        uint newBaseRate = decayedBaseRate.add(redeemedZKUSDFraction.div(BETA));\\n        newBaseRate = LiquityMath._min(newBaseRate, DECIMAL_PRECISION); // cap baseRate at a maximum of 100%\\n        //assert(newBaseRate <= DECIMAL_PRECISION); // This is already enforced in the line above\\n        assert(newBaseRate > 0); // Base rate is always non-zero after redemption\\n\\n        // Update the baseRate state variable\\n        baseRate = newBaseRate;\\n        emit BaseRateUpdated(newBaseRate);\\n\\n        _updateLastFeeOpTime();\\n\\n        return newBaseRate;\\n    }\\n\\n    function getRedemptionRate() public view override returns (uint) {\\n        return _calcRedemptionRate(baseRate);\\n    }\\n\\n    function getRedemptionRateWithDecay() public view override returns (uint) {\\n        return _calcRedemptionRate(_calcDecayedBaseRate());\\n    }\\n\\n    function _calcRedemptionRate(uint _baseRate) internal pure returns (uint) {\\n        return\\n            LiquityMath._min(\\n                REDEMPTION_FEE_FLOOR.add(_baseRate),\\n                DECIMAL_PRECISION // cap at a maximum of 100%\\n            );\\n    }\\n\\n    function _getRedemptionFee(uint _ETHDrawn) internal view returns (uint) {\\n        return _calcRedemptionFee(getRedemptionRate(), _ETHDrawn);\\n    }\\n\\n    function getRedemptionFeeWithDecay(\\n        uint _ETHDrawn\\n    ) external view override returns (uint) {\\n        return _calcRedemptionFee(getRedemptionRateWithDecay(), _ETHDrawn);\\n    }\\n\\n    function _calcRedemptionFee(\\n        uint _redemptionRate,\\n        uint _ETHDrawn\\n    ) internal pure returns (uint) {\\n        uint redemptionFee = _redemptionRate.mul(_ETHDrawn).div(\\n            DECIMAL_PRECISION\\n        );\\n        require(\\n            redemptionFee < _ETHDrawn,\\n            \\\"TroveManager: Fee would eat up all returned collateral\\\"\\n        );\\n        return redemptionFee;\\n    }\\n\\n    // --- Borrowing fee functions ---\\n\\n    function getBorrowingRate() public view override returns (uint) {\\n        return _calcBorrowingRate(baseRate);\\n    }\\n\\n    function getBorrowingRateWithDecay() public view override returns (uint) {\\n        return _calcBorrowingRate(_calcDecayedBaseRate());\\n    }\\n\\n    function _calcBorrowingRate(uint _baseRate) internal pure returns (uint) {\\n        return\\n            LiquityMath._min(\\n                BORROWING_FEE_FLOOR.add(_baseRate),\\n                MAX_BORROWING_FEE\\n            );\\n    }\\n\\n    function getBorrowingFee(\\n        uint _ZKUSDDebt\\n    ) external view override returns (uint) {\\n        return _calcBorrowingFee(getBorrowingRate(), _ZKUSDDebt);\\n    }\\n\\n    function getBorrowingFeeWithDecay(\\n        uint _ZKUSDDebt\\n    ) external view override returns (uint) {\\n        return _calcBorrowingFee(getBorrowingRateWithDecay(), _ZKUSDDebt);\\n    }\\n\\n    function _calcBorrowingFee(\\n        uint _borrowingRate,\\n        uint _ZKUSDDebt\\n    ) internal pure returns (uint) {\\n        return _borrowingRate.mul(_ZKUSDDebt).div(DECIMAL_PRECISION);\\n    }\\n\\n    // Updates the baseRate state variable based on time elapsed since the last redemption or ZKUSD borrowing operation.\\n    function decayBaseRateFromBorrowing() external override {\\n        _requireCallerIsBorrowerOperations();\\n\\n        uint decayedBaseRate = _calcDecayedBaseRate();\\n        assert(decayedBaseRate <= DECIMAL_PRECISION); // The baseRate can decay to 0\\n\\n        baseRate = decayedBaseRate;\\n        emit BaseRateUpdated(decayedBaseRate);\\n\\n        _updateLastFeeOpTime();\\n    }\\n\\n    // --- Internal fee functions ---\\n\\n    // Update the last fee operation time only if time passed >= decay interval. This prevents base rate griefing.\\n    function _updateLastFeeOpTime() internal {\\n        uint timePassed = block.timestamp.sub(lastFeeOperationTime);\\n\\n        if (timePassed >= SECONDS_IN_ONE_MINUTE) {\\n            lastFeeOperationTime = block.timestamp;\\n            emit LastFeeOpTimeUpdated(block.timestamp);\\n        }\\n    }\\n\\n    function _calcDecayedBaseRate() internal view returns (uint) {\\n        uint minutesPassed = _minutesPassedSinceLastFeeOp();\\n        uint decayFactor = LiquityMath._decPow(\\n            MINUTE_DECAY_FACTOR,\\n            minutesPassed\\n        );\\n\\n        return baseRate.mul(decayFactor).div(DECIMAL_PRECISION);\\n    }\\n\\n    function _minutesPassedSinceLastFeeOp() internal view returns (uint) {\\n        return\\n            (block.timestamp.sub(lastFeeOperationTime)).div(\\n                SECONDS_IN_ONE_MINUTE\\n            );\\n    }\\n\\n    // --- 'require' wrapper functions ---\\n\\n    function _requireCallerHasPriceFeedFee(\\n        bytes[] calldata _updateData\\n    ) internal returns (uint) {\\n        uint _fee = priceFeed.fetchUpdateFee(_updateData);\\n        return priceFeed.fetchPullPrice{value: _fee}(_fee, _updateData);\\n    }\\n\\n    function _requireCallerIsBorrowerOperations() internal view {\\n        require(\\n            msg.sender == borrowerOperationsAddress,\\n            \\\"TroveManager: Caller is not the BorrowerOperations contract\\\"\\n        );\\n    }\\n\\n    function _requireTroveIsActive(address _borrower) internal view {\\n        require(\\n            Troves[_borrower].status == Status.active,\\n            \\\"TroveManager: Trove does not exist or is closed\\\"\\n        );\\n    }\\n\\n    function _requireZKUSDBalanceCoversRedemption(\\n        IZKUSDToken _zkusdToken,\\n        address _redeemer,\\n        uint _amount\\n    ) internal view {\\n        require(\\n            _zkusdToken.balanceOf(_redeemer) >= _amount,\\n            \\\"TroveManager: Requested redemption amount must be <= user's ZKUSD token balance\\\"\\n        );\\n    }\\n\\n    function _requireMoreThanOneTroveInSystem(\\n        uint TroveOwnersArrayLength\\n    ) internal view {\\n        require(\\n            TroveOwnersArrayLength > 1 && sortedTroves.getSize() > 1,\\n            \\\"TroveManager: Only one trove in the system\\\"\\n        );\\n    }\\n\\n    function _requireAmountGreaterThanZero(uint _amount) internal pure {\\n        require(_amount > 0, \\\"TroveManager: Amount must be greater than zero\\\");\\n    }\\n\\n    function _requireTCRoverMCR(uint _price) internal view {\\n        require(\\n            _getTCR(_price) >= MCR,\\n            \\\"TroveManager: Cannot redeem when TCR < MCR\\\"\\n        );\\n    }\\n\\n    function _requireAfterBootstrapPeriod() internal view {\\n        uint systemDeploymentTime = zkToken.getDeploymentStartTime();\\n        require(\\n            block.timestamp >= systemDeploymentTime.add(BOOTSTRAP_PERIOD),\\n            \\\"TroveManager: Redemptions are not allowed during bootstrap phase\\\"\\n        );\\n    }\\n\\n    function _requireValidMaxFeePercentage(\\n        uint _maxFeePercentage\\n    ) internal pure {\\n        require(\\n            _maxFeePercentage >= REDEMPTION_FEE_FLOOR &&\\n                _maxFeePercentage <= DECIMAL_PRECISION,\\n            \\\"Max fee percentage must be between 0.5% and 100%\\\"\\n        );\\n    }\\n\\n    // --- Trove property getters ---\\n\\n    function getTroveStatus(\\n        address _borrower\\n    ) external view override returns (uint) {\\n        return uint(Troves[_borrower].status);\\n    }\\n\\n    function getTroveStake(\\n        address _borrower\\n    ) external view override returns (uint) {\\n        return Troves[_borrower].stake;\\n    }\\n\\n    function getTroveDebt(\\n        address _borrower\\n    ) external view override returns (uint) {\\n        return Troves[_borrower].debt;\\n    }\\n\\n    function getTroveColl(\\n        address _borrower\\n    ) external view override returns (uint) {\\n        return Troves[_borrower].coll;\\n    }\\n\\n    // --- Trove property setters, called by BorrowerOperations ---\\n\\n    function setTroveStatus(address _borrower, uint _num) external override {\\n        _requireCallerIsBorrowerOperations();\\n        Troves[_borrower].status = Status(_num);\\n    }\\n\\n    function increaseTroveColl(\\n        address _borrower,\\n        uint _collIncrease\\n    ) external override returns (uint) {\\n        _requireCallerIsBorrowerOperations();\\n        uint newColl = Troves[_borrower].coll.add(_collIncrease);\\n        Troves[_borrower].coll = newColl;\\n        return newColl;\\n    }\\n\\n    function decreaseTroveColl(\\n        address _borrower,\\n        uint _collDecrease\\n    ) external override returns (uint) {\\n        _requireCallerIsBorrowerOperations();\\n        uint newColl = Troves[_borrower].coll.sub(_collDecrease);\\n        Troves[_borrower].coll = newColl;\\n        return newColl;\\n    }\\n\\n    function increaseTroveDebt(\\n        address _borrower,\\n        uint _debtIncrease\\n    ) external override returns (uint) {\\n        _requireCallerIsBorrowerOperations();\\n        uint newDebt = Troves[_borrower].debt.add(_debtIncrease);\\n        Troves[_borrower].debt = newDebt;\\n        return newDebt;\\n    }\\n\\n    function decreaseTroveDebt(\\n        address _borrower,\\n        uint _debtDecrease\\n    ) external override returns (uint) {\\n        _requireCallerIsBorrowerOperations();\\n        uint newDebt = Troves[_borrower].debt.sub(_debtDecrease);\\n        Troves[_borrower].debt = newDebt;\\n        return newDebt;\\n    }\\n}\\n\",\"keccak256\":\"0x75008e583c32be84657ccad8fa15b9bfff151440bf9e2f10eba5c3cf18f137ff\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610bc2380380610bc283398101604081905261002f91610060565b600080546001600160a01b039384166001600160a01b031991821617909155600180549290931691161790556100b1565b60008060408385031215610072578182fd5b825161007d81610099565b602084015190925061008e81610099565b809150509250929050565b6001600160a01b03811681146100ae57600080fd5b50565b610b02806100c06000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80633d83908a14610046578063ae91875414610064578063b90bce451461006c575b600080fd5b61004e61008c565b60405161005b9190610a60565b60405180910390f35b61004e61009b565b61007f61007a3660046109a0565b6100aa565b60405161005b9190610a74565b6000546001600160a01b031681565b6001546001600160a01b031681565b6060600080600085126100c2575083905060016100d0565b846001016000039150600090505b6001546040805163de8fa43160e01b815290516000926001600160a01b03169163de8fa431916004808301926020929190829003018186803b15801561011557600080fd5b505afa158015610129573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061014d91906109c1565b905080831061018f576040805160008082526020820190925290610187565b610174610933565b81526020019060019003908161016c5790505b5093506101c4565b8281038086111561019e578095505b82156101b5576101ae84876101cd565b94506101c2565b6101bf8487610584565b94505b505b50505092915050565b60606000600160009054906101000a90046001600160a01b03166001600160a01b0316631e2231436040518163ffffffff1660e01b815260040160206040518083038186803b15801561021f57600080fd5b505afa158015610233573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102579190610972565b905060005b848110156102ee5760015460405163765e015960e01b81526001600160a01b039091169063765e015990610294908590600401610a60565b60206040518083038186803b1580156102ac57600080fd5b505afa1580156102c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e49190610972565b915060010161025c565b508267ffffffffffffffff8111801561030657600080fd5b5060405190808252806020026020018201604052801561034057816020015b61032d610933565b8152602001906001900390816103255790505b50915060005b8381101561057c578183828151811061035b57fe5b60209081029190910101516001600160a01b039182169052600054604051630ddec86760e31b8152911690636ef643389061039a908590600401610a60565b60a06040518083038186803b1580156103b257600080fd5b505afa1580156103c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ea91906109fc565b9050508584815181106103f957fe5b602002602001015160200186858151811061041057fe5b602002602001015160400187868151811061042757fe5b60209081029190910101516060019290925291905252600054604051630b39e3cd60e11b81526001600160a01b0390911690631673c79a9061046d908590600401610a60565b604080518083038186803b15801561048457600080fd5b505afa158015610498573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104bc91906109d9565b8483815181106104c857fe5b60200260200101516080018584815181106104df57fe5b602090810291909101015160a001919091525260015460405163765e015960e01b81526001600160a01b039091169063765e015990610522908590600401610a60565b60206040518083038186803b15801561053a57600080fd5b505afa15801561054e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105729190610972565b9150600101610346565b505092915050565b60606000600160009054906101000a90046001600160a01b03166001600160a01b0316634d6228316040518163ffffffff1660e01b815260040160206040518083038186803b1580156105d657600080fd5b505afa1580156105ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060e9190610972565b905060005b848110156106a557600154604051632dc9c0eb60e21b81526001600160a01b039091169063b72703ac9061064b908590600401610a60565b60206040518083038186803b15801561066357600080fd5b505afa158015610677573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069b9190610972565b9150600101610613565b508267ffffffffffffffff811180156106bd57600080fd5b506040519080825280602002602001820160405280156106f757816020015b6106e4610933565b8152602001906001900390816106dc5790505b50915060005b8381101561057c578183828151811061071257fe5b60209081029190910101516001600160a01b039182169052600054604051630ddec86760e31b8152911690636ef6433890610751908590600401610a60565b60a06040518083038186803b15801561076957600080fd5b505afa15801561077d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a191906109fc565b9050508584815181106107b057fe5b60200260200101516020018685815181106107c757fe5b60200260200101516040018786815181106107de57fe5b60209081029190910101516060019290925291905252600054604051630b39e3cd60e11b81526001600160a01b0390911690631673c79a90610824908590600401610a60565b604080518083038186803b15801561083b57600080fd5b505afa15801561084f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087391906109d9565b84838151811061087f57fe5b602002602001015160800185848151811061089657fe5b602090810291909101015160a0019190915252600154604051632dc9c0eb60e21b81526001600160a01b039091169063b72703ac906108d9908590600401610a60565b60206040518083038186803b1580156108f157600080fd5b505afa158015610905573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109299190610972565b91506001016106fd565b6040518060c0016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081525090565b600060208284031215610983578081fd5b81516001600160a01b0381168114610999578182fd5b9392505050565b600080604083850312156109b2578081fd5b50508035926020909101359150565b6000602082840312156109d2578081fd5b5051919050565b600080604083850312156109eb578182fd5b505080516020909101519092909150565b600080600080600060a08688031215610a13578081fd5b855194506020860151935060408601519250606086015160058110610a36578182fd5b60808701519092506001600160801b0381168114610a52578182fd5b809150509295509295909350565b6001600160a01b0391909116815260200190565b602080825282518282018190526000919060409081850190868401855b82811015610ae857815180516001600160a01b0316855286810151878601528581015186860152606080820151908601526080808201519086015260a0908101519085015260c09093019290850190600101610a91565b509197965050505050505056fea164736f6c634300060b000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80633d83908a14610046578063ae91875414610064578063b90bce451461006c575b600080fd5b61004e61008c565b60405161005b9190610a60565b60405180910390f35b61004e61009b565b61007f61007a3660046109a0565b6100aa565b60405161005b9190610a74565b6000546001600160a01b031681565b6001546001600160a01b031681565b6060600080600085126100c2575083905060016100d0565b846001016000039150600090505b6001546040805163de8fa43160e01b815290516000926001600160a01b03169163de8fa431916004808301926020929190829003018186803b15801561011557600080fd5b505afa158015610129573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061014d91906109c1565b905080831061018f576040805160008082526020820190925290610187565b610174610933565b81526020019060019003908161016c5790505b5093506101c4565b8281038086111561019e578095505b82156101b5576101ae84876101cd565b94506101c2565b6101bf8487610584565b94505b505b50505092915050565b60606000600160009054906101000a90046001600160a01b03166001600160a01b0316631e2231436040518163ffffffff1660e01b815260040160206040518083038186803b15801561021f57600080fd5b505afa158015610233573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102579190610972565b905060005b848110156102ee5760015460405163765e015960e01b81526001600160a01b039091169063765e015990610294908590600401610a60565b60206040518083038186803b1580156102ac57600080fd5b505afa1580156102c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e49190610972565b915060010161025c565b508267ffffffffffffffff8111801561030657600080fd5b5060405190808252806020026020018201604052801561034057816020015b61032d610933565b8152602001906001900390816103255790505b50915060005b8381101561057c578183828151811061035b57fe5b60209081029190910101516001600160a01b039182169052600054604051630ddec86760e31b8152911690636ef643389061039a908590600401610a60565b60a06040518083038186803b1580156103b257600080fd5b505afa1580156103c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ea91906109fc565b9050508584815181106103f957fe5b602002602001015160200186858151811061041057fe5b602002602001015160400187868151811061042757fe5b60209081029190910101516060019290925291905252600054604051630b39e3cd60e11b81526001600160a01b0390911690631673c79a9061046d908590600401610a60565b604080518083038186803b15801561048457600080fd5b505afa158015610498573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104bc91906109d9565b8483815181106104c857fe5b60200260200101516080018584815181106104df57fe5b602090810291909101015160a001919091525260015460405163765e015960e01b81526001600160a01b039091169063765e015990610522908590600401610a60565b60206040518083038186803b15801561053a57600080fd5b505afa15801561054e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105729190610972565b9150600101610346565b505092915050565b60606000600160009054906101000a90046001600160a01b03166001600160a01b0316634d6228316040518163ffffffff1660e01b815260040160206040518083038186803b1580156105d657600080fd5b505afa1580156105ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060e9190610972565b905060005b848110156106a557600154604051632dc9c0eb60e21b81526001600160a01b039091169063b72703ac9061064b908590600401610a60565b60206040518083038186803b15801561066357600080fd5b505afa158015610677573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069b9190610972565b9150600101610613565b508267ffffffffffffffff811180156106bd57600080fd5b506040519080825280602002602001820160405280156106f757816020015b6106e4610933565b8152602001906001900390816106dc5790505b50915060005b8381101561057c578183828151811061071257fe5b60209081029190910101516001600160a01b039182169052600054604051630ddec86760e31b8152911690636ef6433890610751908590600401610a60565b60a06040518083038186803b15801561076957600080fd5b505afa15801561077d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a191906109fc565b9050508584815181106107b057fe5b60200260200101516020018685815181106107c757fe5b60200260200101516040018786815181106107de57fe5b60209081029190910101516060019290925291905252600054604051630b39e3cd60e11b81526001600160a01b0390911690631673c79a90610824908590600401610a60565b604080518083038186803b15801561083b57600080fd5b505afa15801561084f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087391906109d9565b84838151811061087f57fe5b602002602001015160800185848151811061089657fe5b602090810291909101015160a0019190915252600154604051632dc9c0eb60e21b81526001600160a01b039091169063b72703ac906108d9908590600401610a60565b60206040518083038186803b1580156108f157600080fd5b505afa158015610905573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109299190610972565b91506001016106fd565b6040518060c0016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081525090565b600060208284031215610983578081fd5b81516001600160a01b0381168114610999578182fd5b9392505050565b600080604083850312156109b2578081fd5b50508035926020909101359150565b6000602082840312156109d2578081fd5b5051919050565b600080604083850312156109eb578182fd5b505080516020909101519092909150565b600080600080600060a08688031215610a13578081fd5b855194506020860151935060408601519250606086015160058110610a36578182fd5b60808701519092506001600160801b0381168114610a52578182fd5b809150509295509295909350565b6001600160a01b0391909116815260200190565b602080825282518282018190526000919060409081850190868401855b82811015610ae857815180516001600160a01b0316855286810151878601528581015186860152606080820151908601526080808201519086015260a0908101519085015260c09093019290850190600101610a91565b509197965050505050505056fea164736f6c634300060b000a",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 17946,
        "contract": "contracts/MultiTroveGetter.sol:MultiTroveGetter",
        "label": "troveManager",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(TroveManager)30577"
      },
      {
        "astId": 17948,
        "contract": "contracts/MultiTroveGetter.sol:MultiTroveGetter",
        "label": "sortedTroves",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ISortedTroves)15885"
      }
    ],
    "types": {
      "t_contract(ISortedTroves)15885": {
        "encoding": "inplace",
        "label": "contract ISortedTroves",
        "numberOfBytes": "20"
      },
      "t_contract(TroveManager)30577": {
        "encoding": "inplace",
        "label": "contract TroveManager",
        "numberOfBytes": "20"
      }
    }
  }
}