{
  "address": "0x212F982F33EA4e0b216f880698DB1E03F0fb9670",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newActivePoolAddress",
          "type": "address"
        }
      ],
      "name": "ActivePoolAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newBorrowerOperationsAddress",
          "type": "address"
        }
      ],
      "name": "BorrowerOperationsAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newBalance",
          "type": "uint256"
        }
      ],
      "name": "CollBalanceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "EtherSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newTroveManagerAddress",
          "type": "address"
        }
      ],
      "name": "TroveManagerAddressChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "accountSurplus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activePoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowerOperationsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "claimColl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrowerOperationsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_troveManagerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_activePoolAddress",
          "type": "address"
        }
      ],
      "name": "setAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "troveManagerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xf305ee59b4d515f70dd9c866e23a0ab3b5ddfda41d191964da0799b2812560a4",
  "receipt": {
    "to": null,
    "from": "0x88762203C68C8B0b2dD4855AcA764b225e1b1E2E",
    "contractAddress": "0x212F982F33EA4e0b216f880698DB1E03F0fb9670",
    "transactionIndex": 22,
    "gasUsed": "669445",
    "logsBloom": "0x
    "blockHash": "0xcde0964761279c22928656c38c32940749593720757323f4a58e1f96e3c72ee9",
    "transactionHash": "0xf305ee59b4d515f70dd9c866e23a0ab3b5ddfda41d191964da0799b2812560a4",
    "logs": [
      {
        "transactionIndex": 22,
        "blockNumber": 861751,
        "transactionHash": "0xf305ee59b4d515f70dd9c866e23a0ab3b5ddfda41d191964da0799b2812560a4",
        "address": "0x212F982F33EA4e0b216f880698DB1E03F0fb9670",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000088762203c68c8b0b2dd4855aca764b225e1b1e2e"
        ],
        "data": "0x",
        "logIndex": 38,
        "blockHash": "0xcde0964761279c22928656c38c32940749593720757323f4a58e1f96e3c72ee9"
      }
    ],
    "blockNumber": 861751,
    "cumulativeGasUsed": "2598134",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ffe83ff5afde0d06d4b6b8e37e72100d",
  "metadata": "{\"compiler\":{\"version\":\"0.6.11+commit.5ef660b1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newActivePoolAddress\",\"type\":\"address\"}],\"name\":\"ActivePoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newBorrowerOperationsAddress\",\"type\":\"address\"}],\"name\":\"BorrowerOperationsAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newBalance\",\"type\":\"uint256\"}],\"name\":\"CollBalanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"EtherSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newTroveManagerAddress\",\"type\":\"address\"}],\"name\":\"TroveManagerAddressChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"accountSurplus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activePoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowerOperationsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"claimColl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrowerOperationsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_troveManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_activePoolAddress\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"troveManagerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CollSurplusPool.sol\":\"CollSurplusPool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":50},\"remappings\":[]},\"sources\":{\"contracts/CollSurplusPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\nimport \\\"./Interfaces/ICollSurplusPool.sol\\\";\\nimport \\\"./Dependencies/SafeMath.sol\\\";\\nimport \\\"./Dependencies/Ownable.sol\\\";\\nimport \\\"./Dependencies/CheckContract.sol\\\";\\nimport \\\"./Dependencies/console.sol\\\";\\n\\ncontract CollSurplusPool is Ownable, CheckContract, ICollSurplusPool {\\n    using SafeMath for uint256;\\n\\n    string public constant NAME = \\\"CollSurplusPool\\\";\\n\\n    address public borrowerOperationsAddress;\\n    address public troveManagerAddress;\\n    address public activePoolAddress;\\n\\n    // deposited ether tracker\\n    uint256 internal ETH;\\n    // Collateral surplus claimable by trove owners\\n    mapping(address => uint) internal balances;\\n\\n    // --- Events ---\\n\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n\\n    event CollBalanceUpdated(address indexed _account, uint _newBalance);\\n    event EtherSent(address _to, uint _amount);\\n\\n    // --- Contract setters ---\\n\\n    function setAddresses(\\n        address _borrowerOperationsAddress,\\n        address _troveManagerAddress,\\n        address _activePoolAddress\\n    ) external override onlyOwner {\\n        checkContract(_borrowerOperationsAddress);\\n        checkContract(_troveManagerAddress);\\n        checkContract(_activePoolAddress);\\n\\n        borrowerOperationsAddress = _borrowerOperationsAddress;\\n        troveManagerAddress = _troveManagerAddress;\\n        activePoolAddress = _activePoolAddress;\\n\\n        emit BorrowerOperationsAddressChanged(_borrowerOperationsAddress);\\n        emit TroveManagerAddressChanged(_troveManagerAddress);\\n        emit ActivePoolAddressChanged(_activePoolAddress);\\n    }\\n\\n    /* Returns the ETH state variable at ActivePool address.\\n       Not necessarily equal to the raw ether balance - ether can be forcibly sent to contracts. */\\n    function getETH() external view override returns (uint) {\\n        return ETH;\\n    }\\n\\n    function getCollateral(\\n        address _account\\n    ) external view override returns (uint) {\\n        return balances[_account];\\n    }\\n\\n    // --- Pool functionality ---\\n\\n    function accountSurplus(address _account, uint _amount) external override {\\n        _requireCallerIsTroveManager();\\n\\n        uint newAmount = balances[_account].add(_amount);\\n        balances[_account] = newAmount;\\n\\n        emit CollBalanceUpdated(_account, newAmount);\\n    }\\n\\n    function claimColl(address _account) external override {\\n        _requireCallerIsBorrowerOperations();\\n        uint claimableColl = balances[_account];\\n        require(\\n            claimableColl > 0,\\n            \\\"CollSurplusPool: No collateral available to claim\\\"\\n        );\\n\\n        balances[_account] = 0;\\n        emit CollBalanceUpdated(_account, 0);\\n\\n        ETH = ETH.sub(claimableColl);\\n        emit EtherSent(_account, claimableColl);\\n\\n        (bool success, ) = _account.call{value: claimableColl}(\\\"\\\");\\n        require(success, \\\"CollSurplusPool: sending ETH failed\\\");\\n    }\\n\\n    // --- 'require' functions ---\\n\\n    function _requireCallerIsBorrowerOperations() internal view {\\n        require(\\n            msg.sender == borrowerOperationsAddress,\\n            \\\"CollSurplusPool: Caller is not Borrower Operations\\\"\\n        );\\n    }\\n\\n    function _requireCallerIsTroveManager() internal view {\\n        require(\\n            msg.sender == troveManagerAddress,\\n            \\\"CollSurplusPool: Caller is not TroveManager\\\"\\n        );\\n    }\\n\\n    function _requireCallerIsActivePool() internal view {\\n        require(\\n            msg.sender == activePoolAddress,\\n            \\\"CollSurplusPool: Caller is not Active Pool\\\"\\n        );\\n    }\\n\\n    // --- Fallback function ---\\n\\n    receive() external payable {\\n        _requireCallerIsActivePool();\\n        ETH = ETH.add(msg.value);\\n    }\\n}\\n\",\"keccak256\":\"0x0e54326121e2f43ff2f75b5e06ddaaede2ef3a35bdfe3946baecb03b551a0c72\",\"license\":\"MIT\"},\"contracts/Dependencies/CheckContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\ncontract CheckContract {\\n    /**\\n     * Check that the account is an already deployed non-destroyed contract.\\n     * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol#L12\\n     */\\n    function checkContract(address _account) internal view {\\n        require(_account != address(0), \\\"Account cannot be zero address\\\");\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(_account)\\n        }\\n        require(size > 0, \\\"Account code size cannot be zero\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x5cb0f0f94c7c5b8ca01b92ae6448066d13dce5d054e97f1e5a99b5e8bec7cf86\",\"license\":\"MIT\"},\"contracts/Dependencies/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\n/**\\n * Based on OpenZeppelin's Ownable contract:\\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\\n *\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() internal {\\n        _owner = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return msg.sender == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     *\\n     * NOTE: This function is not safe, as it doesn\\u2019t check owner is calling it.\\n     * Make sure you check it before calling it.\\n     */\\n    function _renounceOwnership() internal {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n}\\n\",\"keccak256\":\"0xde881d9dc03f7c4fdef3bd8e22288ada00f87dccd8071d927cbd1078452b265b\",\"license\":\"MIT\"},\"contracts/Dependencies/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\n/**\\n * Based on OpenZeppelin's SafeMath:\\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/SafeMath.sol\\n *\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x1bca79004f4eae2412520cd8dffddd575e28a5f1e73240011fe41c1b38938263\",\"license\":\"MIT\"},\"contracts/Dependencies/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\n// Buidler's helper contract for console logging\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n    function log() internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log()\\\")\\n        );\\n        ignored;\\n    }\\n\\n    function logInt(int p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(int)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logUint(uint p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logString(string memory p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBool(bool p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logAddress(address p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes(bytes memory p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logByte(bytes1 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(byte)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes1(bytes1 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes1)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes2(bytes2 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes2)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes3(bytes3 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes3)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes4(bytes4 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes4)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes5(bytes5 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes5)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes6(bytes6 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes6)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes7(bytes7 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes7)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes8(bytes8 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes8)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes9(bytes9 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes9)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes10(bytes10 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes10)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes11(bytes11 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes11)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes12(bytes12 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes12)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes13(bytes13 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes13)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes14(bytes14 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes14)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes15(bytes15 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes15)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes16(bytes16 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes16)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes17(bytes17 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes17)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes18(bytes18 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes18)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes19(bytes19 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes19)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes20(bytes20 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes20)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes21(bytes21 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes21)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes22(bytes22 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes22)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes23(bytes23 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes23)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes24(bytes24 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes24)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes25(bytes25 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes25)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes26(bytes26 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes26)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes27(bytes27 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes27)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes28(bytes28 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes28)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes29(bytes29 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes29)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes30(bytes30 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes30)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes31(bytes31 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes31)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes32(bytes32 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes32)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, string memory p1) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, uint p1) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, string memory p1) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, bool p1) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, address p1) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, string memory p1) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, string memory p1) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, address p1) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, uint p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, bool p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, address p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, string memory p1, address p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, uint p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, bool p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, address p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, uint p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, string memory p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, bool p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, address p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, uint p1, address p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, address p1, uint p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, uint p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, bool p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, address p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, uint p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, uint p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, uint p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, string memory p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, bool p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, address p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, string memory p1, uint p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, uint p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, address p1, uint p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, address p1, address p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        uint p0,\\n        uint p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, address p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, address p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, address p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, address p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        uint p0,\\n        string memory p1,\\n        uint p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        uint p0,\\n        string memory p1,\\n        string memory p2,\\n        uint p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        uint p0,\\n        string memory p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        uint p0,\\n        string memory p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        uint p0,\\n        string memory p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        uint p0,\\n        string memory p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, string memory p1, address p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        uint p0,\\n        string memory p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, string memory p1, address p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        uint p0,\\n        string memory p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        uint p0,\\n        bool p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, address p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, address p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, address p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, address p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, uint p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, uint p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, uint p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, uint p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, string memory p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        uint p0,\\n        address p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, string memory p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        uint p0,\\n        address p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, bool p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, bool p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, bool p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, bool p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, address p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        uint p0,\\n        address p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, address p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, address p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint p1,\\n        uint p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint p1,\\n        string memory p2,\\n        uint p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, uint p1, address p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, uint p1, address p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        uint p2,\\n        uint p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        uint p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        uint p2,\\n        bool p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        uint p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2,\\n        uint p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        bool p2,\\n        uint p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        address p2,\\n        uint p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        uint p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        string memory p2,\\n        uint p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, address p1, uint p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        uint p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, address p1, uint p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        uint p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        string memory p2,\\n        uint p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        address p2,\\n        uint p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, address p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, address p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, address p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, address p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        uint p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        string memory p2,\\n        uint p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, uint p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, uint p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, uint p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, uint p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, uint p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, uint p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, uint p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, uint p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, string memory p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        uint p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, string memory p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        uint p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, bool p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, bool p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, bool p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, bool p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, address p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        uint p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, address p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, address p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, string memory p1, uint p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        uint p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, string memory p1, uint p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        uint p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        string memory p2,\\n        uint p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        address p2,\\n        uint p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, uint p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, uint p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, uint p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, uint p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, address p1, uint p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        uint p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, address p1, uint p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, address p1, uint p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        string memory p2,\\n        uint p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, address p1, address p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n}\\n\",\"keccak256\":\"0xa8fd2dde0b73d2b0d4bbf1049d5fdb943868bb090abaf161947d2a80b1bd0e4b\",\"license\":\"MIT\"},\"contracts/Interfaces/ICollSurplusPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\ninterface ICollSurplusPool {\\n    // --- Events ---\\n\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n\\n    event CollBalanceUpdated(address indexed _account, uint _newBalance);\\n    event EtherSent(address _to, uint _amount);\\n\\n    // --- Contract setters ---\\n\\n    function setAddresses(\\n        address _borrowerOperationsAddress,\\n        address _troveManagerAddress,\\n        address _activePoolAddress\\n    ) external;\\n\\n    function getETH() external view returns (uint);\\n\\n    function getCollateral(address _account) external view returns (uint);\\n\\n    function accountSurplus(address _account, uint _amount) external;\\n\\n    function claimColl(address _account) external;\\n}\\n\",\"keccak256\":\"0x1b3d7f6e8b74991ea8a6437fc0f736c48646f84f7026f69842b6e436262c2d24\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600080546001600160a01b0319163390811782556040519091907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3610ab28061005f6000396000f3fe6080604052600436106100905760003560e01c806314f6c3be146100ba578063363bf964146100e15780633f10abab146101285780635a4d28bb146101615780638da5cb5b146101925780638f32d59b146101a75780639b56d6c9146101d0578063a3f4df7e14610203578063b08bc7221461028d578063b32beb5b146102a2578063b7f8cf9b146102d5576100b5565b366100b55761009d6102ea565b6004546100b0903463ffffffff61033516565b600455005b600080fd5b3480156100c657600080fd5b506100cf610394565b60408051918252519081900360200190f35b3480156100ed57600080fd5b506101266004803603606081101561010457600080fd5b506001600160a01b03813581169160208101358216916040909101351661039a565b005b34801561013457600080fd5b506101266004803603604081101561014b57600080fd5b506001600160a01b0381351690602001356104f8565b34801561016d57600080fd5b50610176610584565b604080516001600160a01b039092168252519081900360200190f35b34801561019e57600080fd5b50610176610593565b3480156101b357600080fd5b506101bc6105a2565b604080519115158252519081900360200190f35b3480156101dc57600080fd5b506100cf600480360360208110156101f357600080fd5b50356001600160a01b03166105b3565b34801561020f57600080fd5b506102186105ce565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561025257818101518382015260200161023a565b50505050905090810190601f16801561027f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561029957600080fd5b506101766105f9565b3480156102ae57600080fd5b50610126600480360360208110156102c557600080fd5b50356001600160a01b0316610608565b3480156102e157600080fd5b506101766107a2565b6003546001600160a01b031633146103335760405162461bcd60e51b815260040180806020018281038252602a8152602001806109fc602a913960400191505060405180910390fd5b565b60008282018381101561038d576040805162461bcd60e51b815260206004820152601b60248201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b604482015290519081900360640190fd5b9392505050565b60045490565b6103a26105a2565b6103f3576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6103fc836107b1565b610405826107b1565b61040e816107b1565b600180546001600160a01b038086166001600160a01b0319928316811790935560028054868316908416179055600380549185169190921617905560408051918252517f3ca631ffcd2a9b5d9ae18543fc82f58eb4ca33af9e6ab01b7a8e95331e6ed9859181900360200190a1604080516001600160a01b038416815290517f143219c9e69b09e07e095fcc889b43d8f46ca892bba65f08dc3a0050869a56789181900360200190a1604080516001600160a01b038316815290517f78f058b189175430c48dc02699e3a0031ea4ff781536dc2fab847de4babdd8829181900360200190a1505050565b610500610864565b6001600160a01b038216600090815260056020526040812054610529908363ffffffff61033516565b6001600160a01b0384166000818152600560209081526040918290208490558151848152915193945091927ff0393a34d05e6567686ad4e097f9d9d2781565957394f1f0d984e5d8e6378f20929181900390910190a2505050565b6002546001600160a01b031681565b6000546001600160a01b031690565b6000546001600160a01b0316331490565b6001600160a01b031660009081526005602052604090205490565b6040518060400160405280600f81526020016e10dbdb1b14dd5c9c1b1d5cd41bdbdb608a1b81525081565b6003546001600160a01b031681565b6106106108ad565b6001600160a01b038116600090815260056020526040902054806106655760405162461bcd60e51b81526004018080602001828103825260318152602001806109cb6031913960400191505060405180910390fd5b6001600160a01b03821660008181526005602090815260408083208390558051928352517ff0393a34d05e6567686ad4e097f9d9d2781565957394f1f0d984e5d8e6378f209281900390910190a26004546106c6908263ffffffff6108f616565b600455604080516001600160a01b03841681526020810183905281517f6109e2559dfa766aaec7118351d48a523f0a4157f49c8d68749c8ac41318ad12929181900390910190a16040516000906001600160a01b0384169083908381818185875af1925050503d8060008114610758576040519150601f19603f3d011682016040523d82523d6000602084013e61075d565b606091505b505090508061079d5760405162461bcd60e51b8152600401808060200182810382526023815260200180610a266023913960400191505060405180910390fd5b505050565b6001546001600160a01b031681565b6001600160a01b03811661080c576040805162461bcd60e51b815260206004820152601e60248201527f4163636f756e742063616e6e6f74206265207a65726f20616464726573730000604482015290519081900360640190fd5b803b80610860576040805162461bcd60e51b815260206004820181905260248201527f4163636f756e7420636f64652073697a652063616e6e6f74206265207a65726f604482015290519081900360640190fd5b5050565b6002546001600160a01b031633146103335760405162461bcd60e51b815260040180806020018281038252602b815260200180610a7b602b913960400191505060405180910390fd5b6001546001600160a01b031633146103335760405162461bcd60e51b8152600401808060200182810382526032815260200180610a496032913960400191505060405180910390fd5b600061038d83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250600081848411156109c25760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561098757818101518382015260200161096f565b50505050905090810190601f1680156109b45780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50505090039056fe436f6c6c537572706c7573506f6f6c3a204e6f20636f6c6c61746572616c20617661696c61626c6520746f20636c61696d436f6c6c537572706c7573506f6f6c3a2043616c6c6572206973206e6f742041637469766520506f6f6c436f6c6c537572706c7573506f6f6c3a2073656e64696e6720455448206661696c6564436f6c6c537572706c7573506f6f6c3a2043616c6c6572206973206e6f7420426f72726f776572204f7065726174696f6e73436f6c6c537572706c7573506f6f6c3a2043616c6c6572206973206e6f742054726f76654d616e61676572a164736f6c634300060b000a",
  "deployedBytecode": "0x6080604052600436106100905760003560e01c806314f6c3be146100ba578063363bf964146100e15780633f10abab146101285780635a4d28bb146101615780638da5cb5b146101925780638f32d59b146101a75780639b56d6c9146101d0578063a3f4df7e14610203578063b08bc7221461028d578063b32beb5b146102a2578063b7f8cf9b146102d5576100b5565b366100b55761009d6102ea565b6004546100b0903463ffffffff61033516565b600455005b600080fd5b3480156100c657600080fd5b506100cf610394565b60408051918252519081900360200190f35b3480156100ed57600080fd5b506101266004803603606081101561010457600080fd5b506001600160a01b03813581169160208101358216916040909101351661039a565b005b34801561013457600080fd5b506101266004803603604081101561014b57600080fd5b506001600160a01b0381351690602001356104f8565b34801561016d57600080fd5b50610176610584565b604080516001600160a01b039092168252519081900360200190f35b34801561019e57600080fd5b50610176610593565b3480156101b357600080fd5b506101bc6105a2565b604080519115158252519081900360200190f35b3480156101dc57600080fd5b506100cf600480360360208110156101f357600080fd5b50356001600160a01b03166105b3565b34801561020f57600080fd5b506102186105ce565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561025257818101518382015260200161023a565b50505050905090810190601f16801561027f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561029957600080fd5b506101766105f9565b3480156102ae57600080fd5b50610126600480360360208110156102c557600080fd5b50356001600160a01b0316610608565b3480156102e157600080fd5b506101766107a2565b6003546001600160a01b031633146103335760405162461bcd60e51b815260040180806020018281038252602a8152602001806109fc602a913960400191505060405180910390fd5b565b60008282018381101561038d576040805162461bcd60e51b815260206004820152601b60248201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b604482015290519081900360640190fd5b9392505050565b60045490565b6103a26105a2565b6103f3576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6103fc836107b1565b610405826107b1565b61040e816107b1565b600180546001600160a01b038086166001600160a01b0319928316811790935560028054868316908416179055600380549185169190921617905560408051918252517f3ca631ffcd2a9b5d9ae18543fc82f58eb4ca33af9e6ab01b7a8e95331e6ed9859181900360200190a1604080516001600160a01b038416815290517f143219c9e69b09e07e095fcc889b43d8f46ca892bba65f08dc3a0050869a56789181900360200190a1604080516001600160a01b038316815290517f78f058b189175430c48dc02699e3a0031ea4ff781536dc2fab847de4babdd8829181900360200190a1505050565b610500610864565b6001600160a01b038216600090815260056020526040812054610529908363ffffffff61033516565b6001600160a01b0384166000818152600560209081526040918290208490558151848152915193945091927ff0393a34d05e6567686ad4e097f9d9d2781565957394f1f0d984e5d8e6378f20929181900390910190a2505050565b6002546001600160a01b031681565b6000546001600160a01b031690565b6000546001600160a01b0316331490565b6001600160a01b031660009081526005602052604090205490565b6040518060400160405280600f81526020016e10dbdb1b14dd5c9c1b1d5cd41bdbdb608a1b81525081565b6003546001600160a01b031681565b6106106108ad565b6001600160a01b038116600090815260056020526040902054806106655760405162461bcd60e51b81526004018080602001828103825260318152602001806109cb6031913960400191505060405180910390fd5b6001600160a01b03821660008181526005602090815260408083208390558051928352517ff0393a34d05e6567686ad4e097f9d9d2781565957394f1f0d984e5d8e6378f209281900390910190a26004546106c6908263ffffffff6108f616565b600455604080516001600160a01b03841681526020810183905281517f6109e2559dfa766aaec7118351d48a523f0a4157f49c8d68749c8ac41318ad12929181900390910190a16040516000906001600160a01b0384169083908381818185875af1925050503d8060008114610758576040519150601f19603f3d011682016040523d82523d6000602084013e61075d565b606091505b505090508061079d5760405162461bcd60e51b8152600401808060200182810382526023815260200180610a266023913960400191505060405180910390fd5b505050565b6001546001600160a01b031681565b6001600160a01b03811661080c576040805162461bcd60e51b815260206004820152601e60248201527f4163636f756e742063616e6e6f74206265207a65726f20616464726573730000604482015290519081900360640190fd5b803b80610860576040805162461bcd60e51b815260206004820181905260248201527f4163636f756e7420636f64652073697a652063616e6e6f74206265207a65726f604482015290519081900360640190fd5b5050565b6002546001600160a01b031633146103335760405162461bcd60e51b815260040180806020018281038252602b815260200180610a7b602b913960400191505060405180910390fd5b6001546001600160a01b031633146103335760405162461bcd60e51b8152600401808060200182810382526032815260200180610a496032913960400191505060405180910390fd5b600061038d83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250600081848411156109c25760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561098757818101518382015260200161096f565b50505050905090810190601f1680156109b45780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50505090039056fe436f6c6c537572706c7573506f6f6c3a204e6f20636f6c6c61746572616c20617661696c61626c6520746f20636c61696d436f6c6c537572706c7573506f6f6c3a2043616c6c6572206973206e6f742041637469766520506f6f6c436f6c6c537572706c7573506f6f6c3a2073656e64696e6720455448206661696c6564436f6c6c537572706c7573506f6f6c3a2043616c6c6572206973206e6f7420426f72726f776572204f7065726174696f6e73436f6c6c537572706c7573506f6f6c3a2043616c6c6572206973206e6f742054726f76654d616e61676572a164736f6c634300060b000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "isOwner()": {
        "details": "Returns true if the caller is the current owner."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4382,
        "contract": "contracts/CollSurplusPool.sol:CollSurplusPool",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2575,
        "contract": "contracts/CollSurplusPool.sol:CollSurplusPool",
        "label": "borrowerOperationsAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2577,
        "contract": "contracts/CollSurplusPool.sol:CollSurplusPool",
        "label": "troveManagerAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2579,
        "contract": "contracts/CollSurplusPool.sol:CollSurplusPool",
        "label": "activePoolAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 2581,
        "contract": "contracts/CollSurplusPool.sol:CollSurplusPool",
        "label": "ETH",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2585,
        "contract": "contracts/CollSurplusPool.sol:CollSurplusPool",
        "label": "balances",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}