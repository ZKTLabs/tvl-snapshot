{
  "address": "0xF015B0c17d5BE09A7D2D9d0615249602ecFbf786",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_lastGoodPrice",
          "type": "uint256"
        }
      ],
      "name": "LastGoodPriceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum PriceFeedV2.OracleStatus",
          "name": "newStatus",
          "type": "uint8"
        }
      ],
      "name": "PriceFeedStatusChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TARGET_DIGITS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TIMEOUT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chainlinkAggregator",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fetchPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "priceUpdateData",
          "type": "bytes[]"
        }
      ],
      "name": "fetchPullPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "_updateData",
          "type": "bytes[]"
        }
      ],
      "name": "fetchUpdateFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastGoodPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeedId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pythRouter",
      "outputs": [
        {
          "internalType": "contract IPyth",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_priceFeedId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_pythRouterAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_chainlinkAggregatorAddress",
          "type": "address"
        }
      ],
      "name": "setAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum PriceFeedV2.OracleStatus",
          "name": "_status",
          "type": "uint8"
        }
      ],
      "name": "setOracleStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "status",
      "outputs": [
        {
          "internalType": "enum PriceFeedV2.OracleStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6b74a9265afc90322da9784bf48b7c04ce9d45085bfd7216c80be448827469ee",
  "receipt": {
    "to": null,
    "from": "0x88762203C68C8B0b2dD4855AcA764b225e1b1E2E",
    "contractAddress": "0xF015B0c17d5BE09A7D2D9d0615249602ecFbf786",
    "transactionIndex": 8,
    "gasUsed": "966589",
    "logsBloom": "0x
    "blockHash": "0x62f96f092d62e9ee0c111f5835fa818e0dcd5835a21b29ba847a50a8fa61dc17",
    "transactionHash": "0x6b74a9265afc90322da9784bf48b7c04ce9d45085bfd7216c80be448827469ee",
    "logs": [
      {
        "transactionIndex": 8,
        "blockNumber": 1010866,
        "transactionHash": "0x6b74a9265afc90322da9784bf48b7c04ce9d45085bfd7216c80be448827469ee",
        "address": "0xF015B0c17d5BE09A7D2D9d0615249602ecFbf786",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000088762203c68c8b0b2dd4855aca764b225e1b1e2e"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x62f96f092d62e9ee0c111f5835fa818e0dcd5835a21b29ba847a50a8fa61dc17"
      }
    ],
    "blockNumber": 1010866,
    "cumulativeGasUsed": "1298331",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "c5fcabf987cad7b58064dcad5ba763b9",
  "metadata": "{\"compiler\":{\"version\":\"0.6.11+commit.5ef660b1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lastGoodPrice\",\"type\":\"uint256\"}],\"name\":\"LastGoodPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum PriceFeedV2.OracleStatus\",\"name\":\"newStatus\",\"type\":\"uint8\"}],\"name\":\"PriceFeedStatusChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TARGET_DIGITS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIMEOUT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainlinkAggregator\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"priceUpdateData\",\"type\":\"bytes[]\"}],\"name\":\"fetchPullPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"_updateData\",\"type\":\"bytes[]\"}],\"name\":\"fetchUpdateFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastGoodPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeedId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pythRouter\",\"outputs\":[{\"internalType\":\"contract IPyth\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_priceFeedId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_pythRouterAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_chainlinkAggregatorAddress\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum PriceFeedV2.OracleStatus\",\"name\":\"_status\",\"type\":\"uint8\"}],\"name\":\"setOracleStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"internalType\":\"enum PriceFeedV2.OracleStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PriceFeedV2.sol\":\"PriceFeedV2\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":50},\"remappings\":[]},\"sources\":{\"contracts/Dependencies/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Code from https://github.com/smartcontractkit/chainlink/blob/master/evm-contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\\n\\npragma solidity 0.6.11;\\n\\ninterface AggregatorV3Interface {\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(\\n        uint80 _roundId\\n    )\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\",\"keccak256\":\"0x5043e38705a216c1c090f64b3a16bcffe065092c366def78f7877c8edca01222\",\"license\":\"MIT\"},\"contracts/Dependencies/CheckContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\ncontract CheckContract {\\n    /**\\n     * Check that the account is an already deployed non-destroyed contract.\\n     * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol#L12\\n     */\\n    function checkContract(address _account) internal view {\\n        require(_account != address(0), \\\"Account cannot be zero address\\\");\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(_account)\\n        }\\n        require(size > 0, \\\"Account code size cannot be zero\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x5cb0f0f94c7c5b8ca01b92ae6448066d13dce5d054e97f1e5a99b5e8bec7cf86\",\"license\":\"MIT\"},\"contracts/Dependencies/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\n/**\\n * Based on OpenZeppelin's Ownable contract:\\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\\n *\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() internal {\\n        _owner = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return msg.sender == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     *\\n     * NOTE: This function is not safe, as it doesn\\u2019t check owner is calling it.\\n     * Make sure you check it before calling it.\\n     */\\n    function _renounceOwnership() internal {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n}\\n\",\"keccak256\":\"0xde881d9dc03f7c4fdef3bd8e22288ada00f87dccd8071d927cbd1078452b265b\",\"license\":\"MIT\"},\"contracts/Dependencies/PythStructs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\ncontract PythStructs {\\n    // A price with a degree of uncertainty, represented as a price +- a confidence interval.\\n    //\\n    // The confidence interval roughly corresponds to the standard error of a normal distribution.\\n    // Both the price and confidence are stored in a fixed-point numeric representation,\\n    // `x * (10^expo)`, where `expo` is the exponent.\\n    //\\n    // Please refer to the documentation at https://docs.pyth.network/consumers/best-practices for how\\n    // to how this price safely.\\n    struct Price {\\n        // Price\\n        int64 price;\\n        // Confidence interval around the price\\n        uint64 conf;\\n        // Price exponent\\n        int32 expo;\\n        // Unix timestamp describing when the price was published\\n        uint publishTime;\\n    }\\n\\n    // PriceFeed represents a current aggregate price from pyth publisher feeds.\\n    struct PriceFeed {\\n        // The price ID.\\n        bytes32 id;\\n        // Latest available price\\n        Price price;\\n        // Latest available exponentially-weighted moving average price\\n        Price emaPrice;\\n    }\\n}\\n\",\"keccak256\":\"0x845bcaf55472387e3ddc1045bc5d3ecbc1eed899d8b731b8e8695e2ec4495687\",\"license\":\"MIT\"},\"contracts/Dependencies/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\n/**\\n * Based on OpenZeppelin's SafeMath:\\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/SafeMath.sol\\n *\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x1bca79004f4eae2412520cd8dffddd575e28a5f1e73240011fe41c1b38938263\",\"license\":\"MIT\"},\"contracts/Interfaces/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\ninterface IPriceFeed {\\n    // --- Events ---\\n    event LastGoodPriceUpdated(uint _lastGoodPrice);\\n\\n    // --- Function ---\\n    function fetchPrice() external returns (uint);\\n\\n    function fetchPullPrice(\\n        uint fee,\\n        bytes[] calldata updateData\\n    ) external payable returns (uint);\\n\\n    function fetchUpdateFee(\\n        bytes[] calldata updateData\\n    ) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xd075538be5175dcd41e8308b44e037d078af7d9eccc526e23614a73dd2e8682d\",\"license\":\"MIT\"},\"contracts/Interfaces/IPyth.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../Dependencies/PythStructs.sol\\\";\\nimport \\\"./IPythEvents.sol\\\";\\n\\n/// @title Consume prices from the Pyth Network (https://pyth.network/).\\n/// @dev Please refer to the guidance at https://docs.pyth.network/consumers/best-practices for how to consume prices safely.\\n/// @author Pyth Data Association\\ninterface IPyth is IPythEvents {\\n    /// @notice Returns the period (in seconds) that a price feed is considered valid since its publish time\\n    function getValidTimePeriod() external view returns (uint validTimePeriod);\\n\\n    /// @notice Returns the price and confidence interval.\\n    /// @dev Reverts if the price has not been updated within the last `getValidTimePeriod()` seconds.\\n    /// @param id The Pyth Price Feed ID of which to fetch the price and confidence interval.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPrice(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price and confidence interval.\\n    /// @dev Reverts if the EMA price is not available.\\n    /// @param id The Pyth Price Feed ID of which to fetch the EMA price and confidence interval.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPrice(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the price of a price feed without any sanity checks.\\n    /// @dev This function returns the most recent price update in this contract without any recency checks.\\n    /// This function is unsafe as the returned price update may be arbitrarily far in the past.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use either `getPrice` or `getPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the price that is no older than `age` seconds of the current time.\\n    /// @dev This function is a sanity-checked version of `getPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price of a price feed without any sanity checks.\\n    /// @dev This function returns the same price as `getEmaPrice` in the case where the price is available.\\n    /// However, if the price is not recent this function returns the latest available price.\\n    ///\\n    /// The returned price can be from arbitrarily far in the past; this function makes no guarantees that\\n    /// the returned price is recent or useful for any particular application.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use either `getEmaPrice` or `getEmaPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price that is no older than `age` seconds\\n    /// of the current time.\\n    /// @dev This function is a sanity-checked version of `getEmaPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Update price feeds with given update messages.\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    /// Prices will be updated if they are more recent than the current stored prices.\\n    /// The call will succeed even if the update is not the most recent.\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    function updatePriceFeeds(bytes[] calldata updateData) external payable;\\n\\n    /// @notice Wrapper around updatePriceFeeds that rejects fast if a price update is not necessary. A price update is\\n    /// necessary if the current on-chain publishTime is older than the given publishTime. It relies solely on the\\n    /// given `publishTimes` for the price feeds and does not read the actual price update publish time within `updateData`.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    /// `priceIds` and `publishTimes` are two arrays with the same size that correspond to senders known publishTime\\n    /// of each priceId when calling this method. If all of price feeds within `priceIds` have updated and have\\n    /// a newer or equal publish time than the given publish time, it will reject the transaction to save gas.\\n    /// Otherwise, it calls updatePriceFeeds method to update the prices.\\n    ///\\n    /// @dev Reverts if update is not needed or the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param publishTimes Array of publishTimes. `publishTimes[i]` corresponds to known `publishTime` of `priceIds[i]`\\n    function updatePriceFeedsIfNecessary(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64[] calldata publishTimes\\n    ) external payable;\\n\\n    /// @notice Returns the required fee to update an array of price updates.\\n    /// @param updateData Array of price update data.\\n    /// @return feeAmount The required fee in Wei.\\n    function getUpdateFee(\\n        bytes[] calldata updateData\\n    ) external view returns (uint feeAmount);\\n\\n    /// @notice Parse `updateData` and return price feeds of the given `priceIds` if they are all published\\n    /// within `minPublishTime` and `maxPublishTime`.\\n    ///\\n    /// You can use this method if you want to use a Pyth price at a fixed time and not the most recent price;\\n    /// otherwise, please consider using `updatePriceFeeds`. This method does not store the price updates on-chain.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    ///\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\\n    /// no update for any of the given `priceIds` within the given time range.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\\n    function parsePriceFeedUpdates(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minPublishTime,\\n        uint64 maxPublishTime\\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\\n}\\n\",\"keccak256\":\"0x14a228e1c5c23efa406090d72bb695c4e1ded0c0b2cdd096ceecb050556686c3\",\"license\":\"MIT\"},\"contracts/Interfaces/IPythEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\n/// @title IPythEvents contains the events that Pyth contract emits.\\n/// @dev This interface can be used for listening to the updates for off-chain and testing purposes.\\ninterface IPythEvents {\\n    /// @dev Emitted when the price feed with `id` has received a fresh update.\\n    /// @param id The Pyth Price Feed ID.\\n    /// @param publishTime Publish time of the given price update.\\n    /// @param price Price of the given price update.\\n    /// @param conf Confidence interval of the given price update.\\n    event PriceFeedUpdate(\\n        bytes32 indexed id,\\n        uint64 publishTime,\\n        int64 price,\\n        uint64 conf\\n    );\\n\\n    /// @dev Emitted when a batch price update is processed successfully.\\n    /// @param chainId ID of the source chain that the batch price update comes from.\\n    /// @param sequenceNumber Sequence number of the batch price update.\\n    event BatchPriceFeedUpdate(uint16 chainId, uint64 sequenceNumber);\\n}\\n\",\"keccak256\":\"0x19e5b94a78bf43024cff8509f6c96ddecd1bb74980733d07c759c0ebf71bab98\",\"license\":\"MIT\"},\"contracts/PriceFeedV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./Interfaces/IPriceFeed.sol\\\";\\nimport \\\"./Interfaces/IPyth.sol\\\";\\nimport \\\"./Dependencies/PythStructs.sol\\\";\\nimport \\\"./Dependencies/AggregatorV3Interface.sol\\\";\\nimport \\\"./Dependencies/SafeMath.sol\\\";\\nimport \\\"./Dependencies/CheckContract.sol\\\";\\nimport \\\"./Dependencies/Ownable.sol\\\";\\n\\n/*\\n * The PriceFeed uses chainlink as primary oracle, and pyth-network as secondary.\\n */\\ncontract PriceFeedV2 is IPriceFeed, CheckContract, Ownable {\\n    using SafeMath for uint256;\\n\\n    string public constant NAME = \\\"PriceFeedV2\\\";\\n    // Use to convert a price answer to an 18-digit precision uint\\n    uint public constant TARGET_DIGITS = 18;\\n\\n    // Maximum time period allowed since Chainlink's latest round data timestamp, beyond which Chainlink is considered frozen.\\n    uint public constant TIMEOUT = 14400; // 4 hours: 60 * 60 * 4\\n\\n    // Oracle response\\n    struct ChainlinkResponse {\\n        uint80 roundId;\\n        int256 answer;\\n        uint256 timestamp;\\n        bool success;\\n        uint8 decimals;\\n    }\\n\\n    enum OracleStatus {\\n        Chainlink,\\n        PythNetwork\\n    }\\n\\n    event LastGoodPriceUpdated(uint _lastGoodPrice);\\n    event PriceFeedStatusChanged(OracleStatus newStatus);\\n\\n    IPyth public pythRouter;\\n    bytes32 public priceFeedId;\\n    AggregatorV3Interface public chainlinkAggregator;\\n\\n    OracleStatus public status;\\n\\n    // The last good price seen from an oracle\\n    uint public lastGoodPrice;\\n\\n    // --- Dependency setters ---\\n    function setAddresses(\\n        bytes32 _priceFeedId,\\n        address _pythRouterAddress,\\n        address _chainlinkAggregatorAddress\\n    ) external onlyOwner {\\n        checkContract(_pythRouterAddress);\\n        checkContract(_chainlinkAggregatorAddress);\\n\\n        priceFeedId = _priceFeedId;\\n        pythRouter = IPyth(_pythRouterAddress);\\n        chainlinkAggregator = AggregatorV3Interface(\\n            _chainlinkAggregatorAddress\\n        );\\n\\n//        // Get an initial price from Chainlink to serve as first reference for lastGoodPrice\\n//        ChainlinkResponse\\n//        memory chainlinkResponse = _getCurrentChainlinkResponse();\\n//        ChainlinkResponse\\n//        memory prevChainlinkResponse = _getPrevChainlinkResponse(\\n//            chainlinkResponse.roundId,\\n//            chainlinkResponse.decimals\\n//        );\\n//\\n//        require(\\n//            !_chainlinkIsBroken(chainlinkResponse, prevChainlinkResponse) &&\\n//                !_chainlinkIsFrozen(chainlinkResponse),\\n//            \\\"PriceFeed: Chainlink must be working and current\\\"\\n//        );\\n//\\n//        _storeChainlinkPrice(chainlinkResponse);\\n    }\\n\\n    function setOracleStatus(OracleStatus _status) external onlyOwner {\\n        status = _status;\\n        emit PriceFeedStatusChanged(_status);\\n    }\\n\\n    /*\\n     * fetchPrice():\\n     * Returns the latest price obtained from the Oracle. Called by Liquity functions that require a current price.\\n     *\\n     * Also callable by anyone externally.\\n     *\\n     * Non-view function - it stores the last good price seen by Liquity.\\n     *\\n     * Uses a main oracle (Chainlink) and a fallback oracle (Tellor) in case Chainlink fails. If both fail,\\n     * it uses the last good price seen by Liquity.\\n     *\\n     */\\n    function fetchPrice() external override returns (uint) {\\n        _fetchPrice();\\n        return lastGoodPrice;\\n    }\\n\\n    function fetchUpdateFee(\\n        bytes[] calldata _updateData\\n    ) external view override returns (uint) {\\n        if (status == OracleStatus.Chainlink) return 0;\\n        uint fee = pythRouter.getUpdateFee(_updateData);\\n        return fee;\\n    }\\n\\n    function fetchPullPrice(\\n        uint fee,\\n        bytes[] calldata priceUpdateData\\n    ) external payable override returns (uint) {\\n        if (status == OracleStatus.Chainlink) {\\n            _fetchPrice();\\n        } else {\\n            _fetchPythPrice(fee, priceUpdateData);\\n        }\\n        return lastGoodPrice;\\n    }\\n\\n    function _fetchPrice() internal returns (bool) {\\n        ChainlinkResponse\\n            memory chainlinkResponse = _getCurrentChainlinkResponse();\\n//        ChainlinkResponse\\n//            memory prevChainlinkResponse = _getPrevChainlinkResponse(\\n//                chainlinkResponse.roundId,\\n//                chainlinkResponse.decimals\\n//            );\\n//        if (\\n//            _chainlinkIsBroken(chainlinkResponse, prevChainlinkResponse) ||\\n//            _chainlinkIsFrozen(chainlinkResponse)\\n//        ) return false;\\n        _storeChainlinkPrice(chainlinkResponse);\\n        return true;\\n    }\\n\\n    function _fetchPythPrice(\\n        uint fee,\\n        bytes[] calldata priceUpdateData\\n    ) internal returns (bool) {\\n        require(msg.value == fee, \\\"Insufficient fee\\\");\\n        pythRouter.updatePriceFeeds{value: fee}(priceUpdateData);\\n        PythStructs.Price memory retrievedPrice;\\n        try pythRouter.getEmaPrice(priceFeedId) returns (\\n            PythStructs.Price memory price\\n        ) {\\n            retrievedPrice = pythRouter.getEmaPrice(priceFeedId);\\n        } catch {\\n            retrievedPrice = pythRouter.getEmaPriceUnsafe(priceFeedId);\\n        }\\n        if (block.timestamp.sub(retrievedPrice.publishTime) > TIMEOUT) {\\n            return false;\\n        }\\n        uint baseConvertion = 10 **\\n            uint(int(TARGET_DIGITS) + retrievedPrice.expo);\\n\\n        uint price = uint(retrievedPrice.price * int(baseConvertion));\\n        _storePrice(price);\\n        return true;\\n    }\\n\\n    function _storePrice(uint _currentPrice) internal {\\n        lastGoodPrice = _currentPrice;\\n        emit LastGoodPriceUpdated(_currentPrice);\\n    }\\n\\n    function _getCurrentChainlinkResponse()\\n        internal\\n        view\\n        returns (ChainlinkResponse memory chainlinkResponse)\\n    {\\n        // First, try to get current decimal precision:\\n        try chainlinkAggregator.decimals() returns (uint8 decimals) {\\n            // If call to Chainlink succeeds, record the current decimal precision\\n            chainlinkResponse.decimals = decimals;\\n        } catch {\\n            // If call to Chainlink aggregator reverts, return a zero response with success = false\\n            return chainlinkResponse;\\n        }\\n\\n        // Secondly, try to get latest price data:\\n        try chainlinkAggregator.latestRoundData() returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 /* startedAt */,\\n            uint256 timestamp,\\n            uint80 /* answeredInRound */\\n        ) {\\n            // If call to Chainlink succeeds, return the response and success = true\\n            chainlinkResponse.roundId = roundId;\\n            chainlinkResponse.answer = answer;\\n            chainlinkResponse.timestamp = timestamp;\\n            chainlinkResponse.success = true;\\n            return chainlinkResponse;\\n        } catch {\\n            // If call to Chainlink aggregator reverts, return a zero response with success = false\\n            return chainlinkResponse;\\n        }\\n    }\\n\\n    function _getPrevChainlinkResponse(\\n        uint80 _currentRoundId,\\n        uint8 _currentDecimals\\n    ) internal view returns (ChainlinkResponse memory prevChainlinkResponse) {\\n        /*\\n         * NOTE: Chainlink only offers a current decimals() value - there is no way to obtain the decimal precision used in a\\n         * previous round.  We assume the decimals used in the previous round are the same as the current round.\\n         */\\n\\n        // Try to get the price data from the previous round:\\n        try chainlinkAggregator.getRoundData(_currentRoundId - 1) returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 /* startedAt */,\\n            uint256 timestamp,\\n            uint80 /* answeredInRound */\\n        ) {\\n            // If call to Chainlink succeeds, return the response and success = true\\n            prevChainlinkResponse.roundId = roundId;\\n            prevChainlinkResponse.answer = answer;\\n            prevChainlinkResponse.timestamp = timestamp;\\n            prevChainlinkResponse.decimals = _currentDecimals;\\n            prevChainlinkResponse.success = true;\\n            return prevChainlinkResponse;\\n        } catch {\\n            // If call to Chainlink aggregator reverts, return a zero response with success = false\\n            return prevChainlinkResponse;\\n        }\\n    }\\n\\n    function _badChainlinkResponse(\\n        ChainlinkResponse memory _response\\n    ) internal view returns (bool) {\\n        // Check for response call reverted\\n        if (!_response.success) {\\n            return true;\\n        }\\n        // Check for an invalid roundId that is 0\\n        if (_response.roundId == 0) {\\n            return true;\\n        }\\n        // Check for an invalid timeStamp that is 0, or in the future\\n        if (_response.timestamp == 0 || _response.timestamp > block.timestamp) {\\n            return true;\\n        }\\n        // Check for non-positive price\\n        if (_response.answer <= 0) {\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    /* Chainlink is considered broken if its current or previous round data is in any way bad. We check the previous round\\n     * for two reasons:\\n     *\\n     * 1) It is necessary data for the price deviation check in case 1,\\n     * and\\n     * 2) Chainlink is the PriceFeed's preferred primary oracle - having two consecutive valid round responses adds\\n     * peace of mind when using or returning to Chainlink.\\n     */\\n    function _chainlinkIsBroken(\\n        ChainlinkResponse memory _currentResponse,\\n        ChainlinkResponse memory _prevResponse\\n    ) internal view returns (bool) {\\n        return\\n            _badChainlinkResponse(_currentResponse) ||\\n            _badChainlinkResponse(_prevResponse);\\n    }\\n\\n    function _chainlinkIsFrozen(\\n        ChainlinkResponse memory _response\\n    ) internal view returns (bool) {\\n        return block.timestamp.sub(_response.timestamp) > TIMEOUT;\\n    }\\n\\n    function _storeChainlinkPrice(\\n        ChainlinkResponse memory _chainlinkResponse\\n    ) internal returns (uint) {\\n        uint scaledChainlinkPrice = _scaleChainlinkPriceByDigits(\\n            uint256(_chainlinkResponse.answer),\\n            _chainlinkResponse.decimals\\n        );\\n        _storePrice(scaledChainlinkPrice);\\n\\n        return scaledChainlinkPrice;\\n    }\\n\\n    function _scaleChainlinkPriceByDigits(\\n        uint _price,\\n        uint _answerDigits\\n    ) internal pure returns (uint) {\\n        /*\\n         * Convert the price returned by the Chainlink oracle to an 18-digit decimal for use by Liquity.\\n         * At date of Liquity launch, Chainlink uses an 8-digit price, but we also handle the possibility of\\n         * future changes.\\n         *\\n         */\\n        uint price;\\n        if (_answerDigits >= TARGET_DIGITS) {\\n            // Scale the returned price value down to Liquity's target precision\\n            price = _price.div(10 ** (_answerDigits - TARGET_DIGITS));\\n        } else if (_answerDigits < TARGET_DIGITS) {\\n            // Scale the returned price value up to Liquity's target precision\\n            price = _price.mul(10 ** (TARGET_DIGITS - _answerDigits));\\n        }\\n        return price;\\n    }\\n}\\n\",\"keccak256\":\"0xee2d047e80ddc25c151d7efd5cf925a3bf901a02f0b0a24e3f64aaba333f8acc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106100b85760003560e01c80630490be83146100bd5780630fdb11cf146100e85780631560983a146100fd5780631999bb9e146101105780631be5c92f14610125578063200d2ed21461013a57806334b5db481461015c57806341e7dc0b1461017e5780635004d36c1461019e5780638da5cb5b146101c05780638f32d59b146101d5578063980d7b0a146101f7578063a3f4df7e14610217578063ee49648a14610239578063f56f48f21461024e575b600080fd5b3480156100c957600080fd5b506100d2610263565b6040516100df9190610e8a565b60405180910390f35b3480156100f457600080fd5b506100d2610269565b6100d261010b366004610cf0565b61027c565b34801561011c57600080fd5b506100d26102c4565b34801561013157600080fd5b506100d26102ca565b34801561014657600080fd5b5061014f6102cf565b6040516100df9190610e93565b34801561016857600080fd5b5061017c610177366004610bf4565b6102df565b005b34801561018a57600080fd5b506100d2610199366004610bb5565b610352565b3480156101aa57600080fd5b506101b3610408565b6040516100df9190610dd5565b3480156101cc57600080fd5b506101b3610417565b3480156101e157600080fd5b506101ea610426565b6040516100df9190610e7f565b34801561020357600080fd5b5061017c610212366004610c31565b610437565b34801561022357600080fd5b5061022c6104b9565b6040516100df9190610ea7565b34801561024557600080fd5b506101b36104e0565b34801561025a57600080fd5b506100d26104ef565b60045481565b60006102736104f5565b50506004545b90565b600080600354600160a01b900460ff16600181111561029757fe5b14156102ab576102a56104f5565b506102b8565b6102b684848461051b565b505b506004545b9392505050565b60025481565b601281565b600354600160a01b900460ff1681565b6102e7610426565b61030c5760405162461bcd60e51b815260040161030390610f9c565b60405180910390fd5b6103158261078d565b61031e8161078d565b600292909255600180546001600160a01b039283166001600160a01b03199182161790915560038054929093169116179055565b600080600354600160a01b900460ff16600181111561036d57fe5b141561037b57506000610402565b60015460405163d47eed4560e01b81526000916001600160a01b03169063d47eed45906103ae9087908790600401610de9565b60206040518083038186803b1580156103c657600080fd5b505afa1580156103da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103fe9190610cd8565b9150505b92915050565b6003546001600160a01b031681565b6000546001600160a01b031690565b6000546001600160a01b0316331490565b61043f610426565b61045b5760405162461bcd60e51b815260040161030390610f9c565b6003805482919060ff60a01b1916600160a01b83600181111561047a57fe5b02179055507f5c57579a8214fe4f710c1c56fa829f045b9fa6d225a744225a30c32188064d4e816040516104ae9190610e93565b60405180910390a150565b6040518060400160405280600b81526020016a283934b1b2a332b2b22b1960a91b81525081565b6001546001600160a01b031681565b61384081565b60006104ff610ad8565b6105076107d6565b905061051281610919565b50600191505090565b600083341461053c5760405162461bcd60e51b815260040161030390610f31565b600154604051631df3cbc560e31b81526001600160a01b039091169063ef9e5e289086906105709087908790600401610de9565b6000604051808303818588803b15801561058957600080fd5b505af115801561059d573d6000803e3d6000fd5b50505050506105aa610b06565b60015460025460405163b5dcc91160e01b81526001600160a01b039092169163b5dcc911916105db91600401610e8a565b60806040518083038186803b1580156105f357600080fd5b505afa925050508015610623575060408051601f3d908101601f1916820190925261062091810190610c50565b60015b6106af57600154600254604051639474f45b60e01b81526001600160a01b0390921691639474f45b9161065891600401610e8a565b60806040518083038186803b15801561067057600080fd5b505afa158015610684573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a89190610c50565b9050610734565b60015460025460405163b5dcc91160e01b81526001600160a01b039092169163b5dcc911916106e091600401610e8a565b60806040518083038186803b1580156106f857600080fd5b505afa15801561070c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107309190610c50565b9150505b61384061074e82606001514261093c90919063ffffffff16565b111561075e5760009150506102bd565b6040810151815160039190910b601201600a0a9060070b81026107808161097e565b5060019695505050505050565b6001600160a01b0381166107b35760405162461bcd60e51b815260040161030390610efa565b803b806107d25760405162461bcd60e51b815260040161030390610fd1565b5050565b6107de610ad8565b600360009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561082c57600080fd5b505afa92505050801561085c575060408051601f3d908101601f1916820190925261085991810190610d8a565b60015b61086557610279565b60ff166080820152600360009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156108bb57600080fd5b505afa9250505080156108eb575060408051601f3d908101601f191682019092526108e891810190610d39565b60015b6108f457610279565b506001600160501b039093168452506020830152604082015260016060820152610279565b6000806109318360200151846080015160ff166109b3565b90506104028161097e565b60006102bd83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506109fc565b60048190556040517f4d29de21de555af78a62fc82dd4bc05e9ae5b0660a37f04729527e0f22780cd3906104ae908390610e8a565b600080601283106109dc576109d5846011198501600a0a63ffffffff610a2816565b90506102bd565b60128310156102bd576103fe846012859003600a0a63ffffffff610a6716565b60008184841115610a205760405162461bcd60e51b81526004016103039190610ea7565b505050900390565b60006102bd83836040518060400160405280601a815260200179536166654d6174683a206469766973696f6e206279207a65726f60301b815250610aa1565b600082610a7657506000610402565b82820282848281610a8357fe5b04146102bd5760405162461bcd60e51b815260040161030390610f5b565b60008183610ac25760405162461bcd60e51b81526004016103039190610ea7565b506000838581610ace57fe5b0495945050505050565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b60408051608081018252600080825260208201819052918101829052606081019190915290565b80356001600160a01b038116811461040257600080fd5b60008083601f840112610b55578182fd5b5081356001600160401b03811115610b6b578182fd5b6020830191508360208083028501011115610b8557600080fd5b9250929050565b8051600381900b811461040257600080fd5b80516001600160501b038116811461040257600080fd5b60008060208385031215610bc7578182fd5b82356001600160401b03811115610bdc578283fd5b610be885828601610b44565b90969095509350505050565b600080600060608486031215610c08578081fd5b83359250610c198560208601610b2d565b9150610c288560408601610b2d565b90509250925092565b600060208284031215610c42578081fd5b8135600281106102bd578182fd5b600060808284031215610c61578081fd5b604051608081016001600160401b038282108183111715610c80578384fd5b81604052845191508160070b8214610c96578384fd5b9082526020840151908082168214610cac578384fd5b506020820152610cbf8460408501610b8c565b6040820152606083015160608201528091505092915050565b600060208284031215610ce9578081fd5b5051919050565b600080600060408486031215610d04578283fd5b8335925060208401356001600160401b03811115610d20578283fd5b610d2c86828701610b44565b9497909650939450505050565b600080600080600060a08688031215610d50578081fd5b610d5a8787610b9e565b9450602086015193506040860151925060608601519150610d7e8760808801610b9e565b90509295509295909350565b600060208284031215610d9b578081fd5b815160ff811681146102bd578182fd5b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b6001600160a01b0391909116815260200190565b602080825281810183905260009060408482028401810190840186845b87811015610e7257868403603f190183528135368a9003601e19018112610e2b578687fd5b89018035906001600160401b03821115610e43578788fd5b8136038b1315610e51578788fd5b610e5e8683898401610dab565b955050509184019190840190600101610e06565b5091979650505050505050565b901515815260200190565b90815260200190565b6020810160028310610ea157fe5b91905290565b6000602080835283518082850152825b81811015610ed357858101830151858201604001528201610eb7565b81811115610ee45783604083870101525b50601f01601f1916929092016040019392505050565b6020808252601e908201527f4163636f756e742063616e6e6f74206265207a65726f20616464726573730000604082015260600190565b60208082526010908201526f496e73756666696369656e742066656560801b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252818101527f4163636f756e7420636f64652073697a652063616e6e6f74206265207a65726f60408201526060019056fea164736f6c634300060b000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "isOwner()": {
        "details": "Returns true if the caller is the current owner."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4382,
        "contract": "contracts/PriceFeedV2.sol:PriceFeedV2",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 19557,
        "contract": "contracts/PriceFeedV2.sol:PriceFeedV2",
        "label": "pythRouter",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IPyth)15719"
      },
      {
        "astId": 19559,
        "contract": "contracts/PriceFeedV2.sol:PriceFeedV2",
        "label": "priceFeedId",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      },
      {
        "astId": 19561,
        "contract": "contracts/PriceFeedV2.sol:PriceFeedV2",
        "label": "chainlinkAggregator",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(AggregatorV3Interface)3091"
      },
      {
        "astId": 19563,
        "contract": "contracts/PriceFeedV2.sol:PriceFeedV2",
        "label": "status",
        "offset": 20,
        "slot": "3",
        "type": "t_enum(OracleStatus)19547"
      },
      {
        "astId": 19565,
        "contract": "contracts/PriceFeedV2.sol:PriceFeedV2",
        "label": "lastGoodPrice",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)3091": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_contract(IPyth)15719": {
        "encoding": "inplace",
        "label": "contract IPyth",
        "numberOfBytes": "20"
      },
      "t_enum(OracleStatus)19547": {
        "encoding": "inplace",
        "label": "enum PriceFeedV2.OracleStatus",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}